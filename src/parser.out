Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DIVIDE
    LAND
    LNOT
    NOT
    OR

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> include_header
Rule 4     empty -> <empty>
Rule 5     include_header -> INCLUDE HEADER
Rule 6     external_declaration -> function_definition
Rule 7     function_definition -> id_declaration arguments compound_statement
Rule 8     arguments -> LPAREN args RPAREN
Rule 9     args -> empty
Rule 10    args -> VOID
Rule 11    args -> INT ID
Rule 12    args -> INT ID COMMA INT ID
Rule 13    external_declaration -> declaration
Rule 14    declaration -> init_declaration SEMI
Rule 15    init_declaration -> id_declaration
Rule 16    init_declaration -> id_declaration array_reference
Rule 17    init_declaration -> id_declaration EQUALS expression
Rule 18    array_reference -> LBRACKET NUMBER RBRACKET
Rule 19    id_declaration -> VOID ID
Rule 20    id_declaration -> INT ID
Rule 21    external_declaration -> SEMI
Rule 22    statement -> compound_statement
Rule 23    statement -> expression_statement
Rule 24    statement -> jump_statement
Rule 25    statement -> loop_statement
Rule 26    statement -> condition_statement
Rule 27    jump_statement -> BREAK SEMI
Rule 28    jump_statement -> RETURN SEMI
Rule 29    jump_statement -> RETURN expression SEMI
Rule 30    loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
Rule 31    loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement
Rule 32    loop_statement -> WHILE LPAREN expression RPAREN statement
Rule 33    condition_statement -> IF LPAREN expression RPAREN statement
Rule 34    condition_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 35    compound_statement -> LBRACE declaration_list RBRACE
Rule 36    compound_statement -> LBRACE declaration_list statement_list RBRACE
Rule 37    compound_statement -> LBRACE statement_list RBRACE
Rule 38    compound_statement -> LBRACE RBRACE
Rule 39    declaration_list -> declaration
Rule 40    declaration_list -> declaration_list declaration
Rule 41    expression_statement -> SEMI
Rule 42    expression_statement -> expression SEMI
Rule 43    statement_list -> statement
Rule 44    statement_list -> statement_list statement
Rule 45    expression -> conditional_expression
Rule 46    expression -> unary_expression EQUALS expression
Rule 47    expression -> STRING
Rule 48    function_call -> ID LPAREN expression_list RPAREN
Rule 49    expression_list -> expression
Rule 50    expression_list -> expression_list COMMA expression
Rule 51    unary_expression -> function_call
Rule 52    expression -> PP expression
Rule 53    expression -> MM expression
Rule 54    expression -> expression PP
Rule 55    expression -> expression MM
Rule 56    unary_expression -> unary_expression PLUS term
Rule 57    unary_expression -> AND term
Rule 58    unary_expression -> unary_expression LT term
Rule 59    unary_expression -> unary_expression GT term
Rule 60    term -> ID
Rule 61    unary_expression -> unary_expression TIMES term
Rule 62    unary_expression -> unary_expression MOD term
Rule 63    unary_expression -> unary_expression MINUS term
Rule 64    unary_expression -> term
Rule 65    term -> factor
Rule 66    factor -> NUMBER
Rule 67    factor -> LPAREN expression RPAREN
Rule 68    conditional_expression -> cast_expression
Rule 69    conditional_expression -> expression LT term
Rule 70    conditional_expression -> expression LE term
Rule 71    conditional_expression -> expression GE term
Rule 72    conditional_expression -> expression GT term
Rule 73    conditional_expression -> expression EQ term
Rule 74    conditional_expression -> expression NE term
Rule 75    conditional_expression -> expression LOR term
Rule 76    cast_expression -> unary_expression

Terminals, with rules where they appear

AND                  : 57
BREAK                : 27
COMMA                : 12 50
DIVIDE               : 
ELSE                 : 34
EQ                   : 73
EQUALS               : 17 46
FOR                  : 30 31
GE                   : 71
GT                   : 59 72
HEADER               : 5
ID                   : 11 12 12 19 20 48 60
IF                   : 33 34
INCLUDE              : 5
INT                  : 11 12 12 20
LAND                 : 
LBRACE               : 35 36 37 38
LBRACKET             : 18
LE                   : 70
LNOT                 : 
LOR                  : 75
LPAREN               : 8 30 31 32 33 34 48 67
LT                   : 58 69
MINUS                : 63
MM                   : 53 55
MOD                  : 62
NE                   : 74
NOT                  : 
NUMBER               : 18 66
OR                   : 
PLUS                 : 56
PP                   : 52 54
RBRACE               : 35 36 37 38
RBRACKET             : 18
RETURN               : 28 29
RPAREN               : 8 30 31 32 33 34 48 67
SEMI                 : 14 21 27 28 29 41 42
STRING               : 47
TIMES                : 61
VOID                 : 10 19
WHILE                : 32
error                : 

Nonterminals, with rules where they appear

args                 : 8
arguments            : 7
array_reference      : 16
cast_expression      : 68
compound_statement   : 7 22
condition_statement  : 26
conditional_expression : 45
declaration          : 13 39 40
declaration_list     : 35 36 40
empty                : 9
expression           : 17 29 31 32 33 34 42 46 49 50 52 53 54 55 67 69 70 71 72 73 74 75
expression_list      : 48 50
expression_statement : 23 30 30 30 31 31
external_declaration : 1 2
factor               : 65
function_call        : 51
function_definition  : 6
id_declaration       : 7 15 16 17
include_header       : 3
init_declaration     : 14
jump_statement       : 24
loop_statement       : 25
statement            : 30 31 32 33 34 34 43 44
statement_list       : 36 37 44
term                 : 56 57 58 59 61 62 63 64 69 70 71 72 73 74 75
translation_unit     : 2 0
unary_expression     : 46 56 58 59 61 62 63 76

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . include_header
    (6) external_declaration -> . function_definition
    (13) external_declaration -> . declaration
    (21) external_declaration -> . SEMI
    (5) include_header -> . INCLUDE HEADER
    (7) function_definition -> . id_declaration arguments compound_statement
    (14) declaration -> . init_declaration SEMI
    (19) id_declaration -> . VOID ID
    (20) id_declaration -> . INT ID
    (15) init_declaration -> . id_declaration
    (16) init_declaration -> . id_declaration array_reference
    (17) init_declaration -> . id_declaration EQUALS expression

    SEMI            shift and go to state 6
    INCLUDE         shift and go to state 7
    VOID            shift and go to state 10
    INT             shift and go to state 11

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    include_header                 shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    id_declaration                 shift and go to state 8
    init_declaration               shift and go to state 9

state 1

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . include_header
    (6) external_declaration -> . function_definition
    (13) external_declaration -> . declaration
    (21) external_declaration -> . SEMI
    (5) include_header -> . INCLUDE HEADER
    (7) function_definition -> . id_declaration arguments compound_statement
    (14) declaration -> . init_declaration SEMI
    (19) id_declaration -> . VOID ID
    (20) id_declaration -> . INT ID
    (15) init_declaration -> . id_declaration
    (16) init_declaration -> . id_declaration array_reference
    (17) init_declaration -> . id_declaration EQUALS expression

    SEMI            shift and go to state 6
    INCLUDE         shift and go to state 7
    VOID            shift and go to state 10
    INT             shift and go to state 11

    external_declaration           shift and go to state 12
    include_header                 shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    id_declaration                 shift and go to state 8
    init_declaration               shift and go to state 9

state 2

    (1) translation_unit -> external_declaration .

    SEMI            reduce using rule 1 (translation_unit -> external_declaration .)
    INCLUDE         reduce using rule 1 (translation_unit -> external_declaration .)
    VOID            reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)


state 3

    (3) external_declaration -> include_header .

    SEMI            reduce using rule 3 (external_declaration -> include_header .)
    INCLUDE         reduce using rule 3 (external_declaration -> include_header .)
    VOID            reduce using rule 3 (external_declaration -> include_header .)
    INT             reduce using rule 3 (external_declaration -> include_header .)
    $end            reduce using rule 3 (external_declaration -> include_header .)


state 4

    (6) external_declaration -> function_definition .

    SEMI            reduce using rule 6 (external_declaration -> function_definition .)
    INCLUDE         reduce using rule 6 (external_declaration -> function_definition .)
    VOID            reduce using rule 6 (external_declaration -> function_definition .)
    INT             reduce using rule 6 (external_declaration -> function_definition .)
    $end            reduce using rule 6 (external_declaration -> function_definition .)


state 5

    (13) external_declaration -> declaration .

    SEMI            reduce using rule 13 (external_declaration -> declaration .)
    INCLUDE         reduce using rule 13 (external_declaration -> declaration .)
    VOID            reduce using rule 13 (external_declaration -> declaration .)
    INT             reduce using rule 13 (external_declaration -> declaration .)
    $end            reduce using rule 13 (external_declaration -> declaration .)


state 6

    (21) external_declaration -> SEMI .

    SEMI            reduce using rule 21 (external_declaration -> SEMI .)
    INCLUDE         reduce using rule 21 (external_declaration -> SEMI .)
    VOID            reduce using rule 21 (external_declaration -> SEMI .)
    INT             reduce using rule 21 (external_declaration -> SEMI .)
    $end            reduce using rule 21 (external_declaration -> SEMI .)


state 7

    (5) include_header -> INCLUDE . HEADER

    HEADER          shift and go to state 13


state 8

    (7) function_definition -> id_declaration . arguments compound_statement
    (15) init_declaration -> id_declaration .
    (16) init_declaration -> id_declaration . array_reference
    (17) init_declaration -> id_declaration . EQUALS expression
    (8) arguments -> . LPAREN args RPAREN
    (18) array_reference -> . LBRACKET NUMBER RBRACKET

    SEMI            reduce using rule 15 (init_declaration -> id_declaration .)
    EQUALS          shift and go to state 16
    LPAREN          shift and go to state 17
    LBRACKET        shift and go to state 18

    arguments                      shift and go to state 14
    array_reference                shift and go to state 15

state 9

    (14) declaration -> init_declaration . SEMI

    SEMI            shift and go to state 19


state 10

    (19) id_declaration -> VOID . ID

    ID              shift and go to state 20


state 11

    (20) id_declaration -> INT . ID

    ID              shift and go to state 21


state 12

    (2) translation_unit -> translation_unit external_declaration .

    SEMI            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INCLUDE         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 13

    (5) include_header -> INCLUDE HEADER .

    SEMI            reduce using rule 5 (include_header -> INCLUDE HEADER .)
    INCLUDE         reduce using rule 5 (include_header -> INCLUDE HEADER .)
    VOID            reduce using rule 5 (include_header -> INCLUDE HEADER .)
    INT             reduce using rule 5 (include_header -> INCLUDE HEADER .)
    $end            reduce using rule 5 (include_header -> INCLUDE HEADER .)


state 14

    (7) function_definition -> id_declaration arguments . compound_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE

    LBRACE          shift and go to state 23

    compound_statement             shift and go to state 22

state 15

    (16) init_declaration -> id_declaration array_reference .

    SEMI            reduce using rule 16 (init_declaration -> id_declaration array_reference .)


state 16

    (17) init_declaration -> id_declaration EQUALS . expression
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 24
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 17

    (8) arguments -> LPAREN . args RPAREN
    (9) args -> . empty
    (10) args -> . VOID
    (11) args -> . INT ID
    (12) args -> . INT ID COMMA INT ID
    (4) empty -> .

    VOID            shift and go to state 40
    INT             shift and go to state 41
    RPAREN          reduce using rule 4 (empty -> .)

    args                           shift and go to state 38
    empty                          shift and go to state 39

state 18

    (18) array_reference -> LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 42


state 19

    (14) declaration -> init_declaration SEMI .

    SEMI            reduce using rule 14 (declaration -> init_declaration SEMI .)
    INCLUDE         reduce using rule 14 (declaration -> init_declaration SEMI .)
    VOID            reduce using rule 14 (declaration -> init_declaration SEMI .)
    INT             reduce using rule 14 (declaration -> init_declaration SEMI .)
    $end            reduce using rule 14 (declaration -> init_declaration SEMI .)
    RBRACE          reduce using rule 14 (declaration -> init_declaration SEMI .)
    LBRACE          reduce using rule 14 (declaration -> init_declaration SEMI .)
    BREAK           reduce using rule 14 (declaration -> init_declaration SEMI .)
    RETURN          reduce using rule 14 (declaration -> init_declaration SEMI .)
    FOR             reduce using rule 14 (declaration -> init_declaration SEMI .)
    WHILE           reduce using rule 14 (declaration -> init_declaration SEMI .)
    IF              reduce using rule 14 (declaration -> init_declaration SEMI .)
    STRING          reduce using rule 14 (declaration -> init_declaration SEMI .)
    PP              reduce using rule 14 (declaration -> init_declaration SEMI .)
    MM              reduce using rule 14 (declaration -> init_declaration SEMI .)
    AND             reduce using rule 14 (declaration -> init_declaration SEMI .)
    ID              reduce using rule 14 (declaration -> init_declaration SEMI .)
    NUMBER          reduce using rule 14 (declaration -> init_declaration SEMI .)
    LPAREN          reduce using rule 14 (declaration -> init_declaration SEMI .)


state 20

    (19) id_declaration -> VOID ID .

    EQUALS          reduce using rule 19 (id_declaration -> VOID ID .)
    LPAREN          reduce using rule 19 (id_declaration -> VOID ID .)
    LBRACKET        reduce using rule 19 (id_declaration -> VOID ID .)
    SEMI            reduce using rule 19 (id_declaration -> VOID ID .)


state 21

    (20) id_declaration -> INT ID .

    EQUALS          reduce using rule 20 (id_declaration -> INT ID .)
    LPAREN          reduce using rule 20 (id_declaration -> INT ID .)
    LBRACKET        reduce using rule 20 (id_declaration -> INT ID .)
    SEMI            reduce using rule 20 (id_declaration -> INT ID .)


state 22

    (7) function_definition -> id_declaration arguments compound_statement .

    SEMI            reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)
    INCLUDE         reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)
    VOID            reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)
    INT             reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)
    $end            reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)


state 23

    (35) compound_statement -> LBRACE . declaration_list RBRACE
    (36) compound_statement -> LBRACE . declaration_list statement_list RBRACE
    (37) compound_statement -> LBRACE . statement_list RBRACE
    (38) compound_statement -> LBRACE . RBRACE
    (39) declaration_list -> . declaration
    (40) declaration_list -> . declaration_list declaration
    (43) statement_list -> . statement
    (44) statement_list -> . statement_list statement
    (14) declaration -> . init_declaration SEMI
    (22) statement -> . compound_statement
    (23) statement -> . expression_statement
    (24) statement -> . jump_statement
    (25) statement -> . loop_statement
    (26) statement -> . condition_statement
    (15) init_declaration -> . id_declaration
    (16) init_declaration -> . id_declaration array_reference
    (17) init_declaration -> . id_declaration EQUALS expression
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (27) jump_statement -> . BREAK SEMI
    (28) jump_statement -> . RETURN SEMI
    (29) jump_statement -> . RETURN expression SEMI
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (32) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (19) id_declaration -> . VOID ID
    (20) id_declaration -> . INT ID
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 44
    LBRACE          shift and go to state 23
    SEMI            shift and go to state 48
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    FOR             shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    VOID            shift and go to state 10
    INT             shift and go to state 11
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    declaration_list               shift and go to state 43
    statement_list                 shift and go to state 45
    declaration                    shift and go to state 46
    statement                      shift and go to state 47
    init_declaration               shift and go to state 9
    compound_statement             shift and go to state 49
    expression_statement           shift and go to state 50
    jump_statement                 shift and go to state 51
    loop_statement                 shift and go to state 52
    condition_statement            shift and go to state 53
    id_declaration                 shift and go to state 54
    expression                     shift and go to state 55
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 24

    (17) init_declaration -> id_declaration EQUALS expression .
    (54) expression -> expression . PP
    (55) expression -> expression . MM
    (69) conditional_expression -> expression . LT term
    (70) conditional_expression -> expression . LE term
    (71) conditional_expression -> expression . GE term
    (72) conditional_expression -> expression . GT term
    (73) conditional_expression -> expression . EQ term
    (74) conditional_expression -> expression . NE term
    (75) conditional_expression -> expression . LOR term

    SEMI            reduce using rule 17 (init_declaration -> id_declaration EQUALS expression .)
    PP              shift and go to state 61
    MM              shift and go to state 62
    LT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    GT              shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LOR             shift and go to state 69


state 25

    (45) expression -> conditional_expression .

    PP              reduce using rule 45 (expression -> conditional_expression .)
    MM              reduce using rule 45 (expression -> conditional_expression .)
    LT              reduce using rule 45 (expression -> conditional_expression .)
    LE              reduce using rule 45 (expression -> conditional_expression .)
    GE              reduce using rule 45 (expression -> conditional_expression .)
    GT              reduce using rule 45 (expression -> conditional_expression .)
    EQ              reduce using rule 45 (expression -> conditional_expression .)
    NE              reduce using rule 45 (expression -> conditional_expression .)
    LOR             reduce using rule 45 (expression -> conditional_expression .)
    SEMI            reduce using rule 45 (expression -> conditional_expression .)
    RPAREN          reduce using rule 45 (expression -> conditional_expression .)
    COMMA           reduce using rule 45 (expression -> conditional_expression .)


state 26

    (46) expression -> unary_expression . EQUALS expression
    (56) unary_expression -> unary_expression . PLUS term
    (58) unary_expression -> unary_expression . LT term
    (59) unary_expression -> unary_expression . GT term
    (61) unary_expression -> unary_expression . TIMES term
    (62) unary_expression -> unary_expression . MOD term
    (63) unary_expression -> unary_expression . MINUS term
    (76) cast_expression -> unary_expression .

  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
    EQUALS          shift and go to state 70
    PLUS            shift and go to state 71
    LT              shift and go to state 72
    GT              shift and go to state 73
    TIMES           shift and go to state 74
    MOD             shift and go to state 75
    MINUS           shift and go to state 76
    PP              reduce using rule 76 (cast_expression -> unary_expression .)
    MM              reduce using rule 76 (cast_expression -> unary_expression .)
    LE              reduce using rule 76 (cast_expression -> unary_expression .)
    GE              reduce using rule 76 (cast_expression -> unary_expression .)
    EQ              reduce using rule 76 (cast_expression -> unary_expression .)
    NE              reduce using rule 76 (cast_expression -> unary_expression .)
    LOR             reduce using rule 76 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 76 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 76 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 76 (cast_expression -> unary_expression .)

  ! LT              [ reduce using rule 76 (cast_expression -> unary_expression .) ]
  ! GT              [ reduce using rule 76 (cast_expression -> unary_expression .) ]


state 27

    (47) expression -> STRING .

    PP              reduce using rule 47 (expression -> STRING .)
    MM              reduce using rule 47 (expression -> STRING .)
    LT              reduce using rule 47 (expression -> STRING .)
    LE              reduce using rule 47 (expression -> STRING .)
    GE              reduce using rule 47 (expression -> STRING .)
    GT              reduce using rule 47 (expression -> STRING .)
    EQ              reduce using rule 47 (expression -> STRING .)
    NE              reduce using rule 47 (expression -> STRING .)
    LOR             reduce using rule 47 (expression -> STRING .)
    SEMI            reduce using rule 47 (expression -> STRING .)
    RPAREN          reduce using rule 47 (expression -> STRING .)
    COMMA           reduce using rule 47 (expression -> STRING .)


state 28

    (52) expression -> PP . expression
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 77
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 29

    (53) expression -> MM . expression
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 78
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 30

    (68) conditional_expression -> cast_expression .

    PP              reduce using rule 68 (conditional_expression -> cast_expression .)
    MM              reduce using rule 68 (conditional_expression -> cast_expression .)
    LT              reduce using rule 68 (conditional_expression -> cast_expression .)
    LE              reduce using rule 68 (conditional_expression -> cast_expression .)
    GE              reduce using rule 68 (conditional_expression -> cast_expression .)
    GT              reduce using rule 68 (conditional_expression -> cast_expression .)
    EQ              reduce using rule 68 (conditional_expression -> cast_expression .)
    NE              reduce using rule 68 (conditional_expression -> cast_expression .)
    LOR             reduce using rule 68 (conditional_expression -> cast_expression .)
    SEMI            reduce using rule 68 (conditional_expression -> cast_expression .)
    RPAREN          reduce using rule 68 (conditional_expression -> cast_expression .)
    COMMA           reduce using rule 68 (conditional_expression -> cast_expression .)


state 31

    (64) unary_expression -> term .

    EQUALS          reduce using rule 64 (unary_expression -> term .)
    PLUS            reduce using rule 64 (unary_expression -> term .)
    LT              reduce using rule 64 (unary_expression -> term .)
    GT              reduce using rule 64 (unary_expression -> term .)
    TIMES           reduce using rule 64 (unary_expression -> term .)
    MOD             reduce using rule 64 (unary_expression -> term .)
    MINUS           reduce using rule 64 (unary_expression -> term .)
    PP              reduce using rule 64 (unary_expression -> term .)
    MM              reduce using rule 64 (unary_expression -> term .)
    LE              reduce using rule 64 (unary_expression -> term .)
    GE              reduce using rule 64 (unary_expression -> term .)
    EQ              reduce using rule 64 (unary_expression -> term .)
    NE              reduce using rule 64 (unary_expression -> term .)
    LOR             reduce using rule 64 (unary_expression -> term .)
    SEMI            reduce using rule 64 (unary_expression -> term .)
    RPAREN          reduce using rule 64 (unary_expression -> term .)
    COMMA           reduce using rule 64 (unary_expression -> term .)


state 32

    (51) unary_expression -> function_call .

    EQUALS          reduce using rule 51 (unary_expression -> function_call .)
    PLUS            reduce using rule 51 (unary_expression -> function_call .)
    LT              reduce using rule 51 (unary_expression -> function_call .)
    GT              reduce using rule 51 (unary_expression -> function_call .)
    TIMES           reduce using rule 51 (unary_expression -> function_call .)
    MOD             reduce using rule 51 (unary_expression -> function_call .)
    MINUS           reduce using rule 51 (unary_expression -> function_call .)
    PP              reduce using rule 51 (unary_expression -> function_call .)
    MM              reduce using rule 51 (unary_expression -> function_call .)
    LE              reduce using rule 51 (unary_expression -> function_call .)
    GE              reduce using rule 51 (unary_expression -> function_call .)
    EQ              reduce using rule 51 (unary_expression -> function_call .)
    NE              reduce using rule 51 (unary_expression -> function_call .)
    LOR             reduce using rule 51 (unary_expression -> function_call .)
    SEMI            reduce using rule 51 (unary_expression -> function_call .)
    RPAREN          reduce using rule 51 (unary_expression -> function_call .)
    COMMA           reduce using rule 51 (unary_expression -> function_call .)


state 33

    (57) unary_expression -> AND . term
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 80
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 79
    factor                         shift and go to state 36

state 34

    (48) function_call -> ID . LPAREN expression_list RPAREN
    (60) term -> ID .

    LPAREN          shift and go to state 81
    EQUALS          reduce using rule 60 (term -> ID .)
    PLUS            reduce using rule 60 (term -> ID .)
    LT              reduce using rule 60 (term -> ID .)
    GT              reduce using rule 60 (term -> ID .)
    TIMES           reduce using rule 60 (term -> ID .)
    MOD             reduce using rule 60 (term -> ID .)
    MINUS           reduce using rule 60 (term -> ID .)
    PP              reduce using rule 60 (term -> ID .)
    MM              reduce using rule 60 (term -> ID .)
    LE              reduce using rule 60 (term -> ID .)
    GE              reduce using rule 60 (term -> ID .)
    EQ              reduce using rule 60 (term -> ID .)
    NE              reduce using rule 60 (term -> ID .)
    LOR             reduce using rule 60 (term -> ID .)
    SEMI            reduce using rule 60 (term -> ID .)
    RPAREN          reduce using rule 60 (term -> ID .)
    COMMA           reduce using rule 60 (term -> ID .)


state 35

    (67) factor -> LPAREN . expression RPAREN
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 82
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 36

    (65) term -> factor .

    EQUALS          reduce using rule 65 (term -> factor .)
    PLUS            reduce using rule 65 (term -> factor .)
    LT              reduce using rule 65 (term -> factor .)
    GT              reduce using rule 65 (term -> factor .)
    TIMES           reduce using rule 65 (term -> factor .)
    MOD             reduce using rule 65 (term -> factor .)
    MINUS           reduce using rule 65 (term -> factor .)
    PP              reduce using rule 65 (term -> factor .)
    MM              reduce using rule 65 (term -> factor .)
    LE              reduce using rule 65 (term -> factor .)
    GE              reduce using rule 65 (term -> factor .)
    EQ              reduce using rule 65 (term -> factor .)
    NE              reduce using rule 65 (term -> factor .)
    LOR             reduce using rule 65 (term -> factor .)
    SEMI            reduce using rule 65 (term -> factor .)
    RPAREN          reduce using rule 65 (term -> factor .)
    COMMA           reduce using rule 65 (term -> factor .)


state 37

    (66) factor -> NUMBER .

    EQUALS          reduce using rule 66 (factor -> NUMBER .)
    PLUS            reduce using rule 66 (factor -> NUMBER .)
    LT              reduce using rule 66 (factor -> NUMBER .)
    GT              reduce using rule 66 (factor -> NUMBER .)
    TIMES           reduce using rule 66 (factor -> NUMBER .)
    MOD             reduce using rule 66 (factor -> NUMBER .)
    MINUS           reduce using rule 66 (factor -> NUMBER .)
    PP              reduce using rule 66 (factor -> NUMBER .)
    MM              reduce using rule 66 (factor -> NUMBER .)
    LE              reduce using rule 66 (factor -> NUMBER .)
    GE              reduce using rule 66 (factor -> NUMBER .)
    EQ              reduce using rule 66 (factor -> NUMBER .)
    NE              reduce using rule 66 (factor -> NUMBER .)
    LOR             reduce using rule 66 (factor -> NUMBER .)
    SEMI            reduce using rule 66 (factor -> NUMBER .)
    RPAREN          reduce using rule 66 (factor -> NUMBER .)
    COMMA           reduce using rule 66 (factor -> NUMBER .)


state 38

    (8) arguments -> LPAREN args . RPAREN

    RPAREN          shift and go to state 83


state 39

    (9) args -> empty .

    RPAREN          reduce using rule 9 (args -> empty .)


state 40

    (10) args -> VOID .

    RPAREN          reduce using rule 10 (args -> VOID .)


state 41

    (11) args -> INT . ID
    (12) args -> INT . ID COMMA INT ID

    ID              shift and go to state 84


state 42

    (18) array_reference -> LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 85


state 43

    (35) compound_statement -> LBRACE declaration_list . RBRACE
    (36) compound_statement -> LBRACE declaration_list . statement_list RBRACE
    (40) declaration_list -> declaration_list . declaration
    (43) statement_list -> . statement
    (44) statement_list -> . statement_list statement
    (14) declaration -> . init_declaration SEMI
    (22) statement -> . compound_statement
    (23) statement -> . expression_statement
    (24) statement -> . jump_statement
    (25) statement -> . loop_statement
    (26) statement -> . condition_statement
    (15) init_declaration -> . id_declaration
    (16) init_declaration -> . id_declaration array_reference
    (17) init_declaration -> . id_declaration EQUALS expression
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (27) jump_statement -> . BREAK SEMI
    (28) jump_statement -> . RETURN SEMI
    (29) jump_statement -> . RETURN expression SEMI
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (32) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (19) id_declaration -> . VOID ID
    (20) id_declaration -> . INT ID
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 86
    LBRACE          shift and go to state 23
    SEMI            shift and go to state 48
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    FOR             shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    VOID            shift and go to state 10
    INT             shift and go to state 11
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    statement_list                 shift and go to state 87
    declaration                    shift and go to state 88
    statement                      shift and go to state 47
    init_declaration               shift and go to state 9
    compound_statement             shift and go to state 49
    expression_statement           shift and go to state 50
    jump_statement                 shift and go to state 51
    loop_statement                 shift and go to state 52
    condition_statement            shift and go to state 53
    id_declaration                 shift and go to state 54
    expression                     shift and go to state 55
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 44

    (38) compound_statement -> LBRACE RBRACE .

    SEMI            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    INCLUDE         reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    VOID            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    STRING          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    PP              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    MM              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    AND             reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    ID              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    NUMBER          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)


state 45

    (37) compound_statement -> LBRACE statement_list . RBRACE
    (44) statement_list -> statement_list . statement
    (22) statement -> . compound_statement
    (23) statement -> . expression_statement
    (24) statement -> . jump_statement
    (25) statement -> . loop_statement
    (26) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (27) jump_statement -> . BREAK SEMI
    (28) jump_statement -> . RETURN SEMI
    (29) jump_statement -> . RETURN expression SEMI
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (32) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 89
    LBRACE          shift and go to state 23
    SEMI            shift and go to state 48
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    FOR             shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    statement                      shift and go to state 90
    compound_statement             shift and go to state 49
    expression_statement           shift and go to state 50
    jump_statement                 shift and go to state 51
    loop_statement                 shift and go to state 52
    condition_statement            shift and go to state 53
    expression                     shift and go to state 55
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 46

    (39) declaration_list -> declaration .

    RBRACE          reduce using rule 39 (declaration_list -> declaration .)
    LBRACE          reduce using rule 39 (declaration_list -> declaration .)
    SEMI            reduce using rule 39 (declaration_list -> declaration .)
    BREAK           reduce using rule 39 (declaration_list -> declaration .)
    RETURN          reduce using rule 39 (declaration_list -> declaration .)
    FOR             reduce using rule 39 (declaration_list -> declaration .)
    WHILE           reduce using rule 39 (declaration_list -> declaration .)
    IF              reduce using rule 39 (declaration_list -> declaration .)
    VOID            reduce using rule 39 (declaration_list -> declaration .)
    INT             reduce using rule 39 (declaration_list -> declaration .)
    STRING          reduce using rule 39 (declaration_list -> declaration .)
    PP              reduce using rule 39 (declaration_list -> declaration .)
    MM              reduce using rule 39 (declaration_list -> declaration .)
    AND             reduce using rule 39 (declaration_list -> declaration .)
    ID              reduce using rule 39 (declaration_list -> declaration .)
    NUMBER          reduce using rule 39 (declaration_list -> declaration .)
    LPAREN          reduce using rule 39 (declaration_list -> declaration .)


state 47

    (43) statement_list -> statement .

    RBRACE          reduce using rule 43 (statement_list -> statement .)
    LBRACE          reduce using rule 43 (statement_list -> statement .)
    SEMI            reduce using rule 43 (statement_list -> statement .)
    BREAK           reduce using rule 43 (statement_list -> statement .)
    RETURN          reduce using rule 43 (statement_list -> statement .)
    FOR             reduce using rule 43 (statement_list -> statement .)
    WHILE           reduce using rule 43 (statement_list -> statement .)
    IF              reduce using rule 43 (statement_list -> statement .)
    STRING          reduce using rule 43 (statement_list -> statement .)
    PP              reduce using rule 43 (statement_list -> statement .)
    MM              reduce using rule 43 (statement_list -> statement .)
    AND             reduce using rule 43 (statement_list -> statement .)
    ID              reduce using rule 43 (statement_list -> statement .)
    NUMBER          reduce using rule 43 (statement_list -> statement .)
    LPAREN          reduce using rule 43 (statement_list -> statement .)


state 48

    (41) expression_statement -> SEMI .

    RBRACE          reduce using rule 41 (expression_statement -> SEMI .)
    LBRACE          reduce using rule 41 (expression_statement -> SEMI .)
    SEMI            reduce using rule 41 (expression_statement -> SEMI .)
    BREAK           reduce using rule 41 (expression_statement -> SEMI .)
    RETURN          reduce using rule 41 (expression_statement -> SEMI .)
    FOR             reduce using rule 41 (expression_statement -> SEMI .)
    WHILE           reduce using rule 41 (expression_statement -> SEMI .)
    IF              reduce using rule 41 (expression_statement -> SEMI .)
    STRING          reduce using rule 41 (expression_statement -> SEMI .)
    PP              reduce using rule 41 (expression_statement -> SEMI .)
    MM              reduce using rule 41 (expression_statement -> SEMI .)
    AND             reduce using rule 41 (expression_statement -> SEMI .)
    ID              reduce using rule 41 (expression_statement -> SEMI .)
    NUMBER          reduce using rule 41 (expression_statement -> SEMI .)
    LPAREN          reduce using rule 41 (expression_statement -> SEMI .)
    RPAREN          reduce using rule 41 (expression_statement -> SEMI .)
    ELSE            reduce using rule 41 (expression_statement -> SEMI .)


state 49

    (22) statement -> compound_statement .

    RBRACE          reduce using rule 22 (statement -> compound_statement .)
    LBRACE          reduce using rule 22 (statement -> compound_statement .)
    SEMI            reduce using rule 22 (statement -> compound_statement .)
    BREAK           reduce using rule 22 (statement -> compound_statement .)
    RETURN          reduce using rule 22 (statement -> compound_statement .)
    FOR             reduce using rule 22 (statement -> compound_statement .)
    WHILE           reduce using rule 22 (statement -> compound_statement .)
    IF              reduce using rule 22 (statement -> compound_statement .)
    STRING          reduce using rule 22 (statement -> compound_statement .)
    PP              reduce using rule 22 (statement -> compound_statement .)
    MM              reduce using rule 22 (statement -> compound_statement .)
    AND             reduce using rule 22 (statement -> compound_statement .)
    ID              reduce using rule 22 (statement -> compound_statement .)
    NUMBER          reduce using rule 22 (statement -> compound_statement .)
    LPAREN          reduce using rule 22 (statement -> compound_statement .)
    ELSE            reduce using rule 22 (statement -> compound_statement .)


state 50

    (23) statement -> expression_statement .

    RBRACE          reduce using rule 23 (statement -> expression_statement .)
    LBRACE          reduce using rule 23 (statement -> expression_statement .)
    SEMI            reduce using rule 23 (statement -> expression_statement .)
    BREAK           reduce using rule 23 (statement -> expression_statement .)
    RETURN          reduce using rule 23 (statement -> expression_statement .)
    FOR             reduce using rule 23 (statement -> expression_statement .)
    WHILE           reduce using rule 23 (statement -> expression_statement .)
    IF              reduce using rule 23 (statement -> expression_statement .)
    STRING          reduce using rule 23 (statement -> expression_statement .)
    PP              reduce using rule 23 (statement -> expression_statement .)
    MM              reduce using rule 23 (statement -> expression_statement .)
    AND             reduce using rule 23 (statement -> expression_statement .)
    ID              reduce using rule 23 (statement -> expression_statement .)
    NUMBER          reduce using rule 23 (statement -> expression_statement .)
    LPAREN          reduce using rule 23 (statement -> expression_statement .)
    ELSE            reduce using rule 23 (statement -> expression_statement .)


state 51

    (24) statement -> jump_statement .

    RBRACE          reduce using rule 24 (statement -> jump_statement .)
    LBRACE          reduce using rule 24 (statement -> jump_statement .)
    SEMI            reduce using rule 24 (statement -> jump_statement .)
    BREAK           reduce using rule 24 (statement -> jump_statement .)
    RETURN          reduce using rule 24 (statement -> jump_statement .)
    FOR             reduce using rule 24 (statement -> jump_statement .)
    WHILE           reduce using rule 24 (statement -> jump_statement .)
    IF              reduce using rule 24 (statement -> jump_statement .)
    STRING          reduce using rule 24 (statement -> jump_statement .)
    PP              reduce using rule 24 (statement -> jump_statement .)
    MM              reduce using rule 24 (statement -> jump_statement .)
    AND             reduce using rule 24 (statement -> jump_statement .)
    ID              reduce using rule 24 (statement -> jump_statement .)
    NUMBER          reduce using rule 24 (statement -> jump_statement .)
    LPAREN          reduce using rule 24 (statement -> jump_statement .)
    ELSE            reduce using rule 24 (statement -> jump_statement .)


state 52

    (25) statement -> loop_statement .

    RBRACE          reduce using rule 25 (statement -> loop_statement .)
    LBRACE          reduce using rule 25 (statement -> loop_statement .)
    SEMI            reduce using rule 25 (statement -> loop_statement .)
    BREAK           reduce using rule 25 (statement -> loop_statement .)
    RETURN          reduce using rule 25 (statement -> loop_statement .)
    FOR             reduce using rule 25 (statement -> loop_statement .)
    WHILE           reduce using rule 25 (statement -> loop_statement .)
    IF              reduce using rule 25 (statement -> loop_statement .)
    STRING          reduce using rule 25 (statement -> loop_statement .)
    PP              reduce using rule 25 (statement -> loop_statement .)
    MM              reduce using rule 25 (statement -> loop_statement .)
    AND             reduce using rule 25 (statement -> loop_statement .)
    ID              reduce using rule 25 (statement -> loop_statement .)
    NUMBER          reduce using rule 25 (statement -> loop_statement .)
    LPAREN          reduce using rule 25 (statement -> loop_statement .)
    ELSE            reduce using rule 25 (statement -> loop_statement .)


state 53

    (26) statement -> condition_statement .

    RBRACE          reduce using rule 26 (statement -> condition_statement .)
    LBRACE          reduce using rule 26 (statement -> condition_statement .)
    SEMI            reduce using rule 26 (statement -> condition_statement .)
    BREAK           reduce using rule 26 (statement -> condition_statement .)
    RETURN          reduce using rule 26 (statement -> condition_statement .)
    FOR             reduce using rule 26 (statement -> condition_statement .)
    WHILE           reduce using rule 26 (statement -> condition_statement .)
    IF              reduce using rule 26 (statement -> condition_statement .)
    STRING          reduce using rule 26 (statement -> condition_statement .)
    PP              reduce using rule 26 (statement -> condition_statement .)
    MM              reduce using rule 26 (statement -> condition_statement .)
    AND             reduce using rule 26 (statement -> condition_statement .)
    ID              reduce using rule 26 (statement -> condition_statement .)
    NUMBER          reduce using rule 26 (statement -> condition_statement .)
    LPAREN          reduce using rule 26 (statement -> condition_statement .)
    ELSE            reduce using rule 26 (statement -> condition_statement .)


state 54

    (15) init_declaration -> id_declaration .
    (16) init_declaration -> id_declaration . array_reference
    (17) init_declaration -> id_declaration . EQUALS expression
    (18) array_reference -> . LBRACKET NUMBER RBRACKET

    SEMI            reduce using rule 15 (init_declaration -> id_declaration .)
    EQUALS          shift and go to state 16
    LBRACKET        shift and go to state 18

    array_reference                shift and go to state 15

state 55

    (42) expression_statement -> expression . SEMI
    (54) expression -> expression . PP
    (55) expression -> expression . MM
    (69) conditional_expression -> expression . LT term
    (70) conditional_expression -> expression . LE term
    (71) conditional_expression -> expression . GE term
    (72) conditional_expression -> expression . GT term
    (73) conditional_expression -> expression . EQ term
    (74) conditional_expression -> expression . NE term
    (75) conditional_expression -> expression . LOR term

    SEMI            shift and go to state 91
    PP              shift and go to state 61
    MM              shift and go to state 62
    LT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    GT              shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LOR             shift and go to state 69


state 56

    (27) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 92


state 57

    (28) jump_statement -> RETURN . SEMI
    (29) jump_statement -> RETURN . expression SEMI
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    SEMI            shift and go to state 93
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 94
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 58

    (30) loop_statement -> FOR . LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement

    LPAREN          shift and go to state 95


state 59

    (32) loop_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 96


state 60

    (33) condition_statement -> IF . LPAREN expression RPAREN statement
    (34) condition_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 97


state 61

    (54) expression -> expression PP .

    PP              reduce using rule 54 (expression -> expression PP .)
    MM              reduce using rule 54 (expression -> expression PP .)
    LT              reduce using rule 54 (expression -> expression PP .)
    LE              reduce using rule 54 (expression -> expression PP .)
    GE              reduce using rule 54 (expression -> expression PP .)
    GT              reduce using rule 54 (expression -> expression PP .)
    EQ              reduce using rule 54 (expression -> expression PP .)
    NE              reduce using rule 54 (expression -> expression PP .)
    LOR             reduce using rule 54 (expression -> expression PP .)
    SEMI            reduce using rule 54 (expression -> expression PP .)
    RPAREN          reduce using rule 54 (expression -> expression PP .)
    COMMA           reduce using rule 54 (expression -> expression PP .)


state 62

    (55) expression -> expression MM .

    PP              reduce using rule 55 (expression -> expression MM .)
    MM              reduce using rule 55 (expression -> expression MM .)
    LT              reduce using rule 55 (expression -> expression MM .)
    LE              reduce using rule 55 (expression -> expression MM .)
    GE              reduce using rule 55 (expression -> expression MM .)
    GT              reduce using rule 55 (expression -> expression MM .)
    EQ              reduce using rule 55 (expression -> expression MM .)
    NE              reduce using rule 55 (expression -> expression MM .)
    LOR             reduce using rule 55 (expression -> expression MM .)
    SEMI            reduce using rule 55 (expression -> expression MM .)
    RPAREN          reduce using rule 55 (expression -> expression MM .)
    COMMA           reduce using rule 55 (expression -> expression MM .)


state 63

    (69) conditional_expression -> expression LT . term
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 80
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 98
    factor                         shift and go to state 36

state 64

    (70) conditional_expression -> expression LE . term
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 80
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 99
    factor                         shift and go to state 36

state 65

    (71) conditional_expression -> expression GE . term
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 80
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 100
    factor                         shift and go to state 36

state 66

    (72) conditional_expression -> expression GT . term
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 80
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 101
    factor                         shift and go to state 36

state 67

    (73) conditional_expression -> expression EQ . term
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 80
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 102
    factor                         shift and go to state 36

state 68

    (74) conditional_expression -> expression NE . term
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 80
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 103
    factor                         shift and go to state 36

state 69

    (75) conditional_expression -> expression LOR . term
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 80
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 104
    factor                         shift and go to state 36

state 70

    (46) expression -> unary_expression EQUALS . expression
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    unary_expression               shift and go to state 26
    expression                     shift and go to state 105
    conditional_expression         shift and go to state 25
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 71

    (56) unary_expression -> unary_expression PLUS . term
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 80
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 106
    factor                         shift and go to state 36

state 72

    (58) unary_expression -> unary_expression LT . term
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 80
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 107
    factor                         shift and go to state 36

state 73

    (59) unary_expression -> unary_expression GT . term
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 80
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 108
    factor                         shift and go to state 36

state 74

    (61) unary_expression -> unary_expression TIMES . term
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 80
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 109
    factor                         shift and go to state 36

state 75

    (62) unary_expression -> unary_expression MOD . term
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 80
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 110
    factor                         shift and go to state 36

state 76

    (63) unary_expression -> unary_expression MINUS . term
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 80
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 111
    factor                         shift and go to state 36

state 77

    (52) expression -> PP expression .
    (54) expression -> expression . PP
    (55) expression -> expression . MM
    (69) conditional_expression -> expression . LT term
    (70) conditional_expression -> expression . LE term
    (71) conditional_expression -> expression . GE term
    (72) conditional_expression -> expression . GT term
    (73) conditional_expression -> expression . EQ term
    (74) conditional_expression -> expression . NE term
    (75) conditional_expression -> expression . LOR term

  ! shift/reduce conflict for PP resolved as shift
  ! shift/reduce conflict for MM resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
    SEMI            reduce using rule 52 (expression -> PP expression .)
    RPAREN          reduce using rule 52 (expression -> PP expression .)
    COMMA           reduce using rule 52 (expression -> PP expression .)
    PP              shift and go to state 61
    MM              shift and go to state 62
    LT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    GT              shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LOR             shift and go to state 69

  ! PP              [ reduce using rule 52 (expression -> PP expression .) ]
  ! MM              [ reduce using rule 52 (expression -> PP expression .) ]
  ! LT              [ reduce using rule 52 (expression -> PP expression .) ]
  ! LE              [ reduce using rule 52 (expression -> PP expression .) ]
  ! GE              [ reduce using rule 52 (expression -> PP expression .) ]
  ! GT              [ reduce using rule 52 (expression -> PP expression .) ]
  ! EQ              [ reduce using rule 52 (expression -> PP expression .) ]
  ! NE              [ reduce using rule 52 (expression -> PP expression .) ]
  ! LOR             [ reduce using rule 52 (expression -> PP expression .) ]


state 78

    (53) expression -> MM expression .
    (54) expression -> expression . PP
    (55) expression -> expression . MM
    (69) conditional_expression -> expression . LT term
    (70) conditional_expression -> expression . LE term
    (71) conditional_expression -> expression . GE term
    (72) conditional_expression -> expression . GT term
    (73) conditional_expression -> expression . EQ term
    (74) conditional_expression -> expression . NE term
    (75) conditional_expression -> expression . LOR term

  ! shift/reduce conflict for PP resolved as shift
  ! shift/reduce conflict for MM resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
    SEMI            reduce using rule 53 (expression -> MM expression .)
    RPAREN          reduce using rule 53 (expression -> MM expression .)
    COMMA           reduce using rule 53 (expression -> MM expression .)
    PP              shift and go to state 61
    MM              shift and go to state 62
    LT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    GT              shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LOR             shift and go to state 69

  ! PP              [ reduce using rule 53 (expression -> MM expression .) ]
  ! MM              [ reduce using rule 53 (expression -> MM expression .) ]
  ! LT              [ reduce using rule 53 (expression -> MM expression .) ]
  ! LE              [ reduce using rule 53 (expression -> MM expression .) ]
  ! GE              [ reduce using rule 53 (expression -> MM expression .) ]
  ! GT              [ reduce using rule 53 (expression -> MM expression .) ]
  ! EQ              [ reduce using rule 53 (expression -> MM expression .) ]
  ! NE              [ reduce using rule 53 (expression -> MM expression .) ]
  ! LOR             [ reduce using rule 53 (expression -> MM expression .) ]


state 79

    (57) unary_expression -> AND term .

    EQUALS          reduce using rule 57 (unary_expression -> AND term .)
    PLUS            reduce using rule 57 (unary_expression -> AND term .)
    LT              reduce using rule 57 (unary_expression -> AND term .)
    GT              reduce using rule 57 (unary_expression -> AND term .)
    TIMES           reduce using rule 57 (unary_expression -> AND term .)
    MOD             reduce using rule 57 (unary_expression -> AND term .)
    MINUS           reduce using rule 57 (unary_expression -> AND term .)
    PP              reduce using rule 57 (unary_expression -> AND term .)
    MM              reduce using rule 57 (unary_expression -> AND term .)
    LE              reduce using rule 57 (unary_expression -> AND term .)
    GE              reduce using rule 57 (unary_expression -> AND term .)
    EQ              reduce using rule 57 (unary_expression -> AND term .)
    NE              reduce using rule 57 (unary_expression -> AND term .)
    LOR             reduce using rule 57 (unary_expression -> AND term .)
    SEMI            reduce using rule 57 (unary_expression -> AND term .)
    RPAREN          reduce using rule 57 (unary_expression -> AND term .)
    COMMA           reduce using rule 57 (unary_expression -> AND term .)


state 80

    (60) term -> ID .

    EQUALS          reduce using rule 60 (term -> ID .)
    PLUS            reduce using rule 60 (term -> ID .)
    LT              reduce using rule 60 (term -> ID .)
    GT              reduce using rule 60 (term -> ID .)
    TIMES           reduce using rule 60 (term -> ID .)
    MOD             reduce using rule 60 (term -> ID .)
    MINUS           reduce using rule 60 (term -> ID .)
    PP              reduce using rule 60 (term -> ID .)
    MM              reduce using rule 60 (term -> ID .)
    LE              reduce using rule 60 (term -> ID .)
    GE              reduce using rule 60 (term -> ID .)
    EQ              reduce using rule 60 (term -> ID .)
    NE              reduce using rule 60 (term -> ID .)
    LOR             reduce using rule 60 (term -> ID .)
    SEMI            reduce using rule 60 (term -> ID .)
    RPAREN          reduce using rule 60 (term -> ID .)
    COMMA           reduce using rule 60 (term -> ID .)


state 81

    (48) function_call -> ID LPAREN . expression_list RPAREN
    (49) expression_list -> . expression
    (50) expression_list -> . expression_list COMMA expression
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression_list                shift and go to state 112
    expression                     shift and go to state 113
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 82

    (67) factor -> LPAREN expression . RPAREN
    (54) expression -> expression . PP
    (55) expression -> expression . MM
    (69) conditional_expression -> expression . LT term
    (70) conditional_expression -> expression . LE term
    (71) conditional_expression -> expression . GE term
    (72) conditional_expression -> expression . GT term
    (73) conditional_expression -> expression . EQ term
    (74) conditional_expression -> expression . NE term
    (75) conditional_expression -> expression . LOR term

    RPAREN          shift and go to state 114
    PP              shift and go to state 61
    MM              shift and go to state 62
    LT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    GT              shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LOR             shift and go to state 69


state 83

    (8) arguments -> LPAREN args RPAREN .

    LBRACE          reduce using rule 8 (arguments -> LPAREN args RPAREN .)


state 84

    (11) args -> INT ID .
    (12) args -> INT ID . COMMA INT ID

    RPAREN          reduce using rule 11 (args -> INT ID .)
    COMMA           shift and go to state 115


state 85

    (18) array_reference -> LBRACKET NUMBER RBRACKET .

    SEMI            reduce using rule 18 (array_reference -> LBRACKET NUMBER RBRACKET .)


state 86

    (35) compound_statement -> LBRACE declaration_list RBRACE .

    SEMI            reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    INCLUDE         reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    VOID            reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    INT             reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    $end            reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    LBRACE          reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    BREAK           reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    RETURN          reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    FOR             reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    IF              reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    STRING          reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    PP              reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    MM              reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    AND             reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    ID              reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    NUMBER          reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    ELSE            reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)


state 87

    (36) compound_statement -> LBRACE declaration_list statement_list . RBRACE
    (44) statement_list -> statement_list . statement
    (22) statement -> . compound_statement
    (23) statement -> . expression_statement
    (24) statement -> . jump_statement
    (25) statement -> . loop_statement
    (26) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (27) jump_statement -> . BREAK SEMI
    (28) jump_statement -> . RETURN SEMI
    (29) jump_statement -> . RETURN expression SEMI
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (32) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 116
    LBRACE          shift and go to state 23
    SEMI            shift and go to state 48
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    FOR             shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    statement                      shift and go to state 90
    compound_statement             shift and go to state 49
    expression_statement           shift and go to state 50
    jump_statement                 shift and go to state 51
    loop_statement                 shift and go to state 52
    condition_statement            shift and go to state 53
    expression                     shift and go to state 55
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 88

    (40) declaration_list -> declaration_list declaration .

    RBRACE          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    SEMI            reduce using rule 40 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 40 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 40 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 40 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 40 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 40 (declaration_list -> declaration_list declaration .)
    STRING          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    PP              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    MM              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    AND             reduce using rule 40 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    NUMBER          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 40 (declaration_list -> declaration_list declaration .)


state 89

    (37) compound_statement -> LBRACE statement_list RBRACE .

    SEMI            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    INCLUDE         reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    VOID            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    STRING          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    PP              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    MM              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    AND             reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)


state 90

    (44) statement_list -> statement_list statement .

    RBRACE          reduce using rule 44 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 44 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 44 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 44 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 44 (statement_list -> statement_list statement .)
    FOR             reduce using rule 44 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 44 (statement_list -> statement_list statement .)
    IF              reduce using rule 44 (statement_list -> statement_list statement .)
    STRING          reduce using rule 44 (statement_list -> statement_list statement .)
    PP              reduce using rule 44 (statement_list -> statement_list statement .)
    MM              reduce using rule 44 (statement_list -> statement_list statement .)
    AND             reduce using rule 44 (statement_list -> statement_list statement .)
    ID              reduce using rule 44 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 44 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 44 (statement_list -> statement_list statement .)


state 91

    (42) expression_statement -> expression SEMI .

    RBRACE          reduce using rule 42 (expression_statement -> expression SEMI .)
    LBRACE          reduce using rule 42 (expression_statement -> expression SEMI .)
    SEMI            reduce using rule 42 (expression_statement -> expression SEMI .)
    BREAK           reduce using rule 42 (expression_statement -> expression SEMI .)
    RETURN          reduce using rule 42 (expression_statement -> expression SEMI .)
    FOR             reduce using rule 42 (expression_statement -> expression SEMI .)
    WHILE           reduce using rule 42 (expression_statement -> expression SEMI .)
    IF              reduce using rule 42 (expression_statement -> expression SEMI .)
    STRING          reduce using rule 42 (expression_statement -> expression SEMI .)
    PP              reduce using rule 42 (expression_statement -> expression SEMI .)
    MM              reduce using rule 42 (expression_statement -> expression SEMI .)
    AND             reduce using rule 42 (expression_statement -> expression SEMI .)
    ID              reduce using rule 42 (expression_statement -> expression SEMI .)
    NUMBER          reduce using rule 42 (expression_statement -> expression SEMI .)
    LPAREN          reduce using rule 42 (expression_statement -> expression SEMI .)
    RPAREN          reduce using rule 42 (expression_statement -> expression SEMI .)
    ELSE            reduce using rule 42 (expression_statement -> expression SEMI .)


state 92

    (27) jump_statement -> BREAK SEMI .

    RBRACE          reduce using rule 27 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 27 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 27 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 27 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 27 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 27 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 27 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 27 (jump_statement -> BREAK SEMI .)
    STRING          reduce using rule 27 (jump_statement -> BREAK SEMI .)
    PP              reduce using rule 27 (jump_statement -> BREAK SEMI .)
    MM              reduce using rule 27 (jump_statement -> BREAK SEMI .)
    AND             reduce using rule 27 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 27 (jump_statement -> BREAK SEMI .)
    NUMBER          reduce using rule 27 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 27 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 27 (jump_statement -> BREAK SEMI .)


state 93

    (28) jump_statement -> RETURN SEMI .

    RBRACE          reduce using rule 28 (jump_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 28 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 28 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 28 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 28 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 28 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 28 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 28 (jump_statement -> RETURN SEMI .)
    STRING          reduce using rule 28 (jump_statement -> RETURN SEMI .)
    PP              reduce using rule 28 (jump_statement -> RETURN SEMI .)
    MM              reduce using rule 28 (jump_statement -> RETURN SEMI .)
    AND             reduce using rule 28 (jump_statement -> RETURN SEMI .)
    ID              reduce using rule 28 (jump_statement -> RETURN SEMI .)
    NUMBER          reduce using rule 28 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 28 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 28 (jump_statement -> RETURN SEMI .)


state 94

    (29) jump_statement -> RETURN expression . SEMI
    (54) expression -> expression . PP
    (55) expression -> expression . MM
    (69) conditional_expression -> expression . LT term
    (70) conditional_expression -> expression . LE term
    (71) conditional_expression -> expression . GE term
    (72) conditional_expression -> expression . GT term
    (73) conditional_expression -> expression . EQ term
    (74) conditional_expression -> expression . NE term
    (75) conditional_expression -> expression . LOR term

    SEMI            shift and go to state 117
    PP              shift and go to state 61
    MM              shift and go to state 62
    LT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    GT              shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LOR             shift and go to state 69


state 95

    (30) loop_statement -> FOR LPAREN . expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    SEMI            shift and go to state 48
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression_statement           shift and go to state 118
    expression                     shift and go to state 55
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 96

    (32) loop_statement -> WHILE LPAREN . expression RPAREN statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 119
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 97

    (33) condition_statement -> IF LPAREN . expression RPAREN statement
    (34) condition_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 120
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 98

    (69) conditional_expression -> expression LT term .

    PP              reduce using rule 69 (conditional_expression -> expression LT term .)
    MM              reduce using rule 69 (conditional_expression -> expression LT term .)
    LT              reduce using rule 69 (conditional_expression -> expression LT term .)
    LE              reduce using rule 69 (conditional_expression -> expression LT term .)
    GE              reduce using rule 69 (conditional_expression -> expression LT term .)
    GT              reduce using rule 69 (conditional_expression -> expression LT term .)
    EQ              reduce using rule 69 (conditional_expression -> expression LT term .)
    NE              reduce using rule 69 (conditional_expression -> expression LT term .)
    LOR             reduce using rule 69 (conditional_expression -> expression LT term .)
    SEMI            reduce using rule 69 (conditional_expression -> expression LT term .)
    RPAREN          reduce using rule 69 (conditional_expression -> expression LT term .)
    COMMA           reduce using rule 69 (conditional_expression -> expression LT term .)


state 99

    (70) conditional_expression -> expression LE term .

    PP              reduce using rule 70 (conditional_expression -> expression LE term .)
    MM              reduce using rule 70 (conditional_expression -> expression LE term .)
    LT              reduce using rule 70 (conditional_expression -> expression LE term .)
    LE              reduce using rule 70 (conditional_expression -> expression LE term .)
    GE              reduce using rule 70 (conditional_expression -> expression LE term .)
    GT              reduce using rule 70 (conditional_expression -> expression LE term .)
    EQ              reduce using rule 70 (conditional_expression -> expression LE term .)
    NE              reduce using rule 70 (conditional_expression -> expression LE term .)
    LOR             reduce using rule 70 (conditional_expression -> expression LE term .)
    SEMI            reduce using rule 70 (conditional_expression -> expression LE term .)
    RPAREN          reduce using rule 70 (conditional_expression -> expression LE term .)
    COMMA           reduce using rule 70 (conditional_expression -> expression LE term .)


state 100

    (71) conditional_expression -> expression GE term .

    PP              reduce using rule 71 (conditional_expression -> expression GE term .)
    MM              reduce using rule 71 (conditional_expression -> expression GE term .)
    LT              reduce using rule 71 (conditional_expression -> expression GE term .)
    LE              reduce using rule 71 (conditional_expression -> expression GE term .)
    GE              reduce using rule 71 (conditional_expression -> expression GE term .)
    GT              reduce using rule 71 (conditional_expression -> expression GE term .)
    EQ              reduce using rule 71 (conditional_expression -> expression GE term .)
    NE              reduce using rule 71 (conditional_expression -> expression GE term .)
    LOR             reduce using rule 71 (conditional_expression -> expression GE term .)
    SEMI            reduce using rule 71 (conditional_expression -> expression GE term .)
    RPAREN          reduce using rule 71 (conditional_expression -> expression GE term .)
    COMMA           reduce using rule 71 (conditional_expression -> expression GE term .)


state 101

    (72) conditional_expression -> expression GT term .

    PP              reduce using rule 72 (conditional_expression -> expression GT term .)
    MM              reduce using rule 72 (conditional_expression -> expression GT term .)
    LT              reduce using rule 72 (conditional_expression -> expression GT term .)
    LE              reduce using rule 72 (conditional_expression -> expression GT term .)
    GE              reduce using rule 72 (conditional_expression -> expression GT term .)
    GT              reduce using rule 72 (conditional_expression -> expression GT term .)
    EQ              reduce using rule 72 (conditional_expression -> expression GT term .)
    NE              reduce using rule 72 (conditional_expression -> expression GT term .)
    LOR             reduce using rule 72 (conditional_expression -> expression GT term .)
    SEMI            reduce using rule 72 (conditional_expression -> expression GT term .)
    RPAREN          reduce using rule 72 (conditional_expression -> expression GT term .)
    COMMA           reduce using rule 72 (conditional_expression -> expression GT term .)


state 102

    (73) conditional_expression -> expression EQ term .

    PP              reduce using rule 73 (conditional_expression -> expression EQ term .)
    MM              reduce using rule 73 (conditional_expression -> expression EQ term .)
    LT              reduce using rule 73 (conditional_expression -> expression EQ term .)
    LE              reduce using rule 73 (conditional_expression -> expression EQ term .)
    GE              reduce using rule 73 (conditional_expression -> expression EQ term .)
    GT              reduce using rule 73 (conditional_expression -> expression EQ term .)
    EQ              reduce using rule 73 (conditional_expression -> expression EQ term .)
    NE              reduce using rule 73 (conditional_expression -> expression EQ term .)
    LOR             reduce using rule 73 (conditional_expression -> expression EQ term .)
    SEMI            reduce using rule 73 (conditional_expression -> expression EQ term .)
    RPAREN          reduce using rule 73 (conditional_expression -> expression EQ term .)
    COMMA           reduce using rule 73 (conditional_expression -> expression EQ term .)


state 103

    (74) conditional_expression -> expression NE term .

    PP              reduce using rule 74 (conditional_expression -> expression NE term .)
    MM              reduce using rule 74 (conditional_expression -> expression NE term .)
    LT              reduce using rule 74 (conditional_expression -> expression NE term .)
    LE              reduce using rule 74 (conditional_expression -> expression NE term .)
    GE              reduce using rule 74 (conditional_expression -> expression NE term .)
    GT              reduce using rule 74 (conditional_expression -> expression NE term .)
    EQ              reduce using rule 74 (conditional_expression -> expression NE term .)
    NE              reduce using rule 74 (conditional_expression -> expression NE term .)
    LOR             reduce using rule 74 (conditional_expression -> expression NE term .)
    SEMI            reduce using rule 74 (conditional_expression -> expression NE term .)
    RPAREN          reduce using rule 74 (conditional_expression -> expression NE term .)
    COMMA           reduce using rule 74 (conditional_expression -> expression NE term .)


state 104

    (75) conditional_expression -> expression LOR term .

    PP              reduce using rule 75 (conditional_expression -> expression LOR term .)
    MM              reduce using rule 75 (conditional_expression -> expression LOR term .)
    LT              reduce using rule 75 (conditional_expression -> expression LOR term .)
    LE              reduce using rule 75 (conditional_expression -> expression LOR term .)
    GE              reduce using rule 75 (conditional_expression -> expression LOR term .)
    GT              reduce using rule 75 (conditional_expression -> expression LOR term .)
    EQ              reduce using rule 75 (conditional_expression -> expression LOR term .)
    NE              reduce using rule 75 (conditional_expression -> expression LOR term .)
    LOR             reduce using rule 75 (conditional_expression -> expression LOR term .)
    SEMI            reduce using rule 75 (conditional_expression -> expression LOR term .)
    RPAREN          reduce using rule 75 (conditional_expression -> expression LOR term .)
    COMMA           reduce using rule 75 (conditional_expression -> expression LOR term .)


state 105

    (46) expression -> unary_expression EQUALS expression .
    (54) expression -> expression . PP
    (55) expression -> expression . MM
    (69) conditional_expression -> expression . LT term
    (70) conditional_expression -> expression . LE term
    (71) conditional_expression -> expression . GE term
    (72) conditional_expression -> expression . GT term
    (73) conditional_expression -> expression . EQ term
    (74) conditional_expression -> expression . NE term
    (75) conditional_expression -> expression . LOR term

  ! shift/reduce conflict for PP resolved as shift
  ! shift/reduce conflict for MM resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
    SEMI            reduce using rule 46 (expression -> unary_expression EQUALS expression .)
    RPAREN          reduce using rule 46 (expression -> unary_expression EQUALS expression .)
    COMMA           reduce using rule 46 (expression -> unary_expression EQUALS expression .)
    PP              shift and go to state 61
    MM              shift and go to state 62
    LT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    GT              shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LOR             shift and go to state 69

  ! PP              [ reduce using rule 46 (expression -> unary_expression EQUALS expression .) ]
  ! MM              [ reduce using rule 46 (expression -> unary_expression EQUALS expression .) ]
  ! LT              [ reduce using rule 46 (expression -> unary_expression EQUALS expression .) ]
  ! LE              [ reduce using rule 46 (expression -> unary_expression EQUALS expression .) ]
  ! GE              [ reduce using rule 46 (expression -> unary_expression EQUALS expression .) ]
  ! GT              [ reduce using rule 46 (expression -> unary_expression EQUALS expression .) ]
  ! EQ              [ reduce using rule 46 (expression -> unary_expression EQUALS expression .) ]
  ! NE              [ reduce using rule 46 (expression -> unary_expression EQUALS expression .) ]
  ! LOR             [ reduce using rule 46 (expression -> unary_expression EQUALS expression .) ]


state 106

    (56) unary_expression -> unary_expression PLUS term .

    EQUALS          reduce using rule 56 (unary_expression -> unary_expression PLUS term .)
    PLUS            reduce using rule 56 (unary_expression -> unary_expression PLUS term .)
    LT              reduce using rule 56 (unary_expression -> unary_expression PLUS term .)
    GT              reduce using rule 56 (unary_expression -> unary_expression PLUS term .)
    TIMES           reduce using rule 56 (unary_expression -> unary_expression PLUS term .)
    MOD             reduce using rule 56 (unary_expression -> unary_expression PLUS term .)
    MINUS           reduce using rule 56 (unary_expression -> unary_expression PLUS term .)
    PP              reduce using rule 56 (unary_expression -> unary_expression PLUS term .)
    MM              reduce using rule 56 (unary_expression -> unary_expression PLUS term .)
    LE              reduce using rule 56 (unary_expression -> unary_expression PLUS term .)
    GE              reduce using rule 56 (unary_expression -> unary_expression PLUS term .)
    EQ              reduce using rule 56 (unary_expression -> unary_expression PLUS term .)
    NE              reduce using rule 56 (unary_expression -> unary_expression PLUS term .)
    LOR             reduce using rule 56 (unary_expression -> unary_expression PLUS term .)
    SEMI            reduce using rule 56 (unary_expression -> unary_expression PLUS term .)
    RPAREN          reduce using rule 56 (unary_expression -> unary_expression PLUS term .)
    COMMA           reduce using rule 56 (unary_expression -> unary_expression PLUS term .)


state 107

    (58) unary_expression -> unary_expression LT term .

    EQUALS          reduce using rule 58 (unary_expression -> unary_expression LT term .)
    PLUS            reduce using rule 58 (unary_expression -> unary_expression LT term .)
    LT              reduce using rule 58 (unary_expression -> unary_expression LT term .)
    GT              reduce using rule 58 (unary_expression -> unary_expression LT term .)
    TIMES           reduce using rule 58 (unary_expression -> unary_expression LT term .)
    MOD             reduce using rule 58 (unary_expression -> unary_expression LT term .)
    MINUS           reduce using rule 58 (unary_expression -> unary_expression LT term .)
    PP              reduce using rule 58 (unary_expression -> unary_expression LT term .)
    MM              reduce using rule 58 (unary_expression -> unary_expression LT term .)
    LE              reduce using rule 58 (unary_expression -> unary_expression LT term .)
    GE              reduce using rule 58 (unary_expression -> unary_expression LT term .)
    EQ              reduce using rule 58 (unary_expression -> unary_expression LT term .)
    NE              reduce using rule 58 (unary_expression -> unary_expression LT term .)
    LOR             reduce using rule 58 (unary_expression -> unary_expression LT term .)
    SEMI            reduce using rule 58 (unary_expression -> unary_expression LT term .)
    RPAREN          reduce using rule 58 (unary_expression -> unary_expression LT term .)
    COMMA           reduce using rule 58 (unary_expression -> unary_expression LT term .)


state 108

    (59) unary_expression -> unary_expression GT term .

    EQUALS          reduce using rule 59 (unary_expression -> unary_expression GT term .)
    PLUS            reduce using rule 59 (unary_expression -> unary_expression GT term .)
    LT              reduce using rule 59 (unary_expression -> unary_expression GT term .)
    GT              reduce using rule 59 (unary_expression -> unary_expression GT term .)
    TIMES           reduce using rule 59 (unary_expression -> unary_expression GT term .)
    MOD             reduce using rule 59 (unary_expression -> unary_expression GT term .)
    MINUS           reduce using rule 59 (unary_expression -> unary_expression GT term .)
    PP              reduce using rule 59 (unary_expression -> unary_expression GT term .)
    MM              reduce using rule 59 (unary_expression -> unary_expression GT term .)
    LE              reduce using rule 59 (unary_expression -> unary_expression GT term .)
    GE              reduce using rule 59 (unary_expression -> unary_expression GT term .)
    EQ              reduce using rule 59 (unary_expression -> unary_expression GT term .)
    NE              reduce using rule 59 (unary_expression -> unary_expression GT term .)
    LOR             reduce using rule 59 (unary_expression -> unary_expression GT term .)
    SEMI            reduce using rule 59 (unary_expression -> unary_expression GT term .)
    RPAREN          reduce using rule 59 (unary_expression -> unary_expression GT term .)
    COMMA           reduce using rule 59 (unary_expression -> unary_expression GT term .)


state 109

    (61) unary_expression -> unary_expression TIMES term .

    EQUALS          reduce using rule 61 (unary_expression -> unary_expression TIMES term .)
    PLUS            reduce using rule 61 (unary_expression -> unary_expression TIMES term .)
    LT              reduce using rule 61 (unary_expression -> unary_expression TIMES term .)
    GT              reduce using rule 61 (unary_expression -> unary_expression TIMES term .)
    TIMES           reduce using rule 61 (unary_expression -> unary_expression TIMES term .)
    MOD             reduce using rule 61 (unary_expression -> unary_expression TIMES term .)
    MINUS           reduce using rule 61 (unary_expression -> unary_expression TIMES term .)
    PP              reduce using rule 61 (unary_expression -> unary_expression TIMES term .)
    MM              reduce using rule 61 (unary_expression -> unary_expression TIMES term .)
    LE              reduce using rule 61 (unary_expression -> unary_expression TIMES term .)
    GE              reduce using rule 61 (unary_expression -> unary_expression TIMES term .)
    EQ              reduce using rule 61 (unary_expression -> unary_expression TIMES term .)
    NE              reduce using rule 61 (unary_expression -> unary_expression TIMES term .)
    LOR             reduce using rule 61 (unary_expression -> unary_expression TIMES term .)
    SEMI            reduce using rule 61 (unary_expression -> unary_expression TIMES term .)
    RPAREN          reduce using rule 61 (unary_expression -> unary_expression TIMES term .)
    COMMA           reduce using rule 61 (unary_expression -> unary_expression TIMES term .)


state 110

    (62) unary_expression -> unary_expression MOD term .

    EQUALS          reduce using rule 62 (unary_expression -> unary_expression MOD term .)
    PLUS            reduce using rule 62 (unary_expression -> unary_expression MOD term .)
    LT              reduce using rule 62 (unary_expression -> unary_expression MOD term .)
    GT              reduce using rule 62 (unary_expression -> unary_expression MOD term .)
    TIMES           reduce using rule 62 (unary_expression -> unary_expression MOD term .)
    MOD             reduce using rule 62 (unary_expression -> unary_expression MOD term .)
    MINUS           reduce using rule 62 (unary_expression -> unary_expression MOD term .)
    PP              reduce using rule 62 (unary_expression -> unary_expression MOD term .)
    MM              reduce using rule 62 (unary_expression -> unary_expression MOD term .)
    LE              reduce using rule 62 (unary_expression -> unary_expression MOD term .)
    GE              reduce using rule 62 (unary_expression -> unary_expression MOD term .)
    EQ              reduce using rule 62 (unary_expression -> unary_expression MOD term .)
    NE              reduce using rule 62 (unary_expression -> unary_expression MOD term .)
    LOR             reduce using rule 62 (unary_expression -> unary_expression MOD term .)
    SEMI            reduce using rule 62 (unary_expression -> unary_expression MOD term .)
    RPAREN          reduce using rule 62 (unary_expression -> unary_expression MOD term .)
    COMMA           reduce using rule 62 (unary_expression -> unary_expression MOD term .)


state 111

    (63) unary_expression -> unary_expression MINUS term .

    EQUALS          reduce using rule 63 (unary_expression -> unary_expression MINUS term .)
    PLUS            reduce using rule 63 (unary_expression -> unary_expression MINUS term .)
    LT              reduce using rule 63 (unary_expression -> unary_expression MINUS term .)
    GT              reduce using rule 63 (unary_expression -> unary_expression MINUS term .)
    TIMES           reduce using rule 63 (unary_expression -> unary_expression MINUS term .)
    MOD             reduce using rule 63 (unary_expression -> unary_expression MINUS term .)
    MINUS           reduce using rule 63 (unary_expression -> unary_expression MINUS term .)
    PP              reduce using rule 63 (unary_expression -> unary_expression MINUS term .)
    MM              reduce using rule 63 (unary_expression -> unary_expression MINUS term .)
    LE              reduce using rule 63 (unary_expression -> unary_expression MINUS term .)
    GE              reduce using rule 63 (unary_expression -> unary_expression MINUS term .)
    EQ              reduce using rule 63 (unary_expression -> unary_expression MINUS term .)
    NE              reduce using rule 63 (unary_expression -> unary_expression MINUS term .)
    LOR             reduce using rule 63 (unary_expression -> unary_expression MINUS term .)
    SEMI            reduce using rule 63 (unary_expression -> unary_expression MINUS term .)
    RPAREN          reduce using rule 63 (unary_expression -> unary_expression MINUS term .)
    COMMA           reduce using rule 63 (unary_expression -> unary_expression MINUS term .)


state 112

    (48) function_call -> ID LPAREN expression_list . RPAREN
    (50) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 121
    COMMA           shift and go to state 122


state 113

    (49) expression_list -> expression .
    (54) expression -> expression . PP
    (55) expression -> expression . MM
    (69) conditional_expression -> expression . LT term
    (70) conditional_expression -> expression . LE term
    (71) conditional_expression -> expression . GE term
    (72) conditional_expression -> expression . GT term
    (73) conditional_expression -> expression . EQ term
    (74) conditional_expression -> expression . NE term
    (75) conditional_expression -> expression . LOR term

    RPAREN          reduce using rule 49 (expression_list -> expression .)
    COMMA           reduce using rule 49 (expression_list -> expression .)
    PP              shift and go to state 61
    MM              shift and go to state 62
    LT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    GT              shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LOR             shift and go to state 69


state 114

    (67) factor -> LPAREN expression RPAREN .

    EQUALS          reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    PP              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    MM              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    EQ              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    LOR             reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 67 (factor -> LPAREN expression RPAREN .)


state 115

    (12) args -> INT ID COMMA . INT ID

    INT             shift and go to state 123


state 116

    (36) compound_statement -> LBRACE declaration_list statement_list RBRACE .

    SEMI            reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INCLUDE         reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    VOID            reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INT             reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    $end            reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RBRACE          reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LBRACE          reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BREAK           reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RETURN          reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FOR             reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    WHILE           reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    IF              reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    STRING          reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PP              reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    MM              reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    AND             reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ID              reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    NUMBER          reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LPAREN          reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ELSE            reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)


state 117

    (29) jump_statement -> RETURN expression SEMI .

    RBRACE          reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    STRING          reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    PP              reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    MM              reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    AND             reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    ID              reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    NUMBER          reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 29 (jump_statement -> RETURN expression SEMI .)


state 118

    (30) loop_statement -> FOR LPAREN expression_statement . expression_statement expression_statement RPAREN statement
    (31) loop_statement -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    SEMI            shift and go to state 48
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression_statement           shift and go to state 124
    expression                     shift and go to state 55
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 119

    (32) loop_statement -> WHILE LPAREN expression . RPAREN statement
    (54) expression -> expression . PP
    (55) expression -> expression . MM
    (69) conditional_expression -> expression . LT term
    (70) conditional_expression -> expression . LE term
    (71) conditional_expression -> expression . GE term
    (72) conditional_expression -> expression . GT term
    (73) conditional_expression -> expression . EQ term
    (74) conditional_expression -> expression . NE term
    (75) conditional_expression -> expression . LOR term

    RPAREN          shift and go to state 125
    PP              shift and go to state 61
    MM              shift and go to state 62
    LT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    GT              shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LOR             shift and go to state 69


state 120

    (33) condition_statement -> IF LPAREN expression . RPAREN statement
    (34) condition_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (54) expression -> expression . PP
    (55) expression -> expression . MM
    (69) conditional_expression -> expression . LT term
    (70) conditional_expression -> expression . LE term
    (71) conditional_expression -> expression . GE term
    (72) conditional_expression -> expression . GT term
    (73) conditional_expression -> expression . EQ term
    (74) conditional_expression -> expression . NE term
    (75) conditional_expression -> expression . LOR term

    RPAREN          shift and go to state 126
    PP              shift and go to state 61
    MM              shift and go to state 62
    LT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    GT              shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LOR             shift and go to state 69


state 121

    (48) function_call -> ID LPAREN expression_list RPAREN .

    EQUALS          reduce using rule 48 (function_call -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 48 (function_call -> ID LPAREN expression_list RPAREN .)
    LT              reduce using rule 48 (function_call -> ID LPAREN expression_list RPAREN .)
    GT              reduce using rule 48 (function_call -> ID LPAREN expression_list RPAREN .)
    TIMES           reduce using rule 48 (function_call -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 48 (function_call -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 48 (function_call -> ID LPAREN expression_list RPAREN .)
    PP              reduce using rule 48 (function_call -> ID LPAREN expression_list RPAREN .)
    MM              reduce using rule 48 (function_call -> ID LPAREN expression_list RPAREN .)
    LE              reduce using rule 48 (function_call -> ID LPAREN expression_list RPAREN .)
    GE              reduce using rule 48 (function_call -> ID LPAREN expression_list RPAREN .)
    EQ              reduce using rule 48 (function_call -> ID LPAREN expression_list RPAREN .)
    NE              reduce using rule 48 (function_call -> ID LPAREN expression_list RPAREN .)
    LOR             reduce using rule 48 (function_call -> ID LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 48 (function_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 48 (function_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 48 (function_call -> ID LPAREN expression_list RPAREN .)


state 122

    (50) expression_list -> expression_list COMMA . expression
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 127
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 123

    (12) args -> INT ID COMMA INT . ID

    ID              shift and go to state 128


state 124

    (30) loop_statement -> FOR LPAREN expression_statement expression_statement . expression_statement RPAREN statement
    (31) loop_statement -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    SEMI            shift and go to state 48
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression_statement           shift and go to state 129
    expression                     shift and go to state 130
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 125

    (32) loop_statement -> WHILE LPAREN expression RPAREN . statement
    (22) statement -> . compound_statement
    (23) statement -> . expression_statement
    (24) statement -> . jump_statement
    (25) statement -> . loop_statement
    (26) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (27) jump_statement -> . BREAK SEMI
    (28) jump_statement -> . RETURN SEMI
    (29) jump_statement -> . RETURN expression SEMI
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (32) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 23
    SEMI            shift and go to state 48
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    FOR             shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 55
    statement                      shift and go to state 131
    compound_statement             shift and go to state 49
    expression_statement           shift and go to state 50
    jump_statement                 shift and go to state 51
    loop_statement                 shift and go to state 52
    condition_statement            shift and go to state 53
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 126

    (33) condition_statement -> IF LPAREN expression RPAREN . statement
    (34) condition_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (22) statement -> . compound_statement
    (23) statement -> . expression_statement
    (24) statement -> . jump_statement
    (25) statement -> . loop_statement
    (26) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (27) jump_statement -> . BREAK SEMI
    (28) jump_statement -> . RETURN SEMI
    (29) jump_statement -> . RETURN expression SEMI
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (32) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 23
    SEMI            shift and go to state 48
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    FOR             shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 55
    statement                      shift and go to state 132
    compound_statement             shift and go to state 49
    expression_statement           shift and go to state 50
    jump_statement                 shift and go to state 51
    loop_statement                 shift and go to state 52
    condition_statement            shift and go to state 53
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 127

    (50) expression_list -> expression_list COMMA expression .
    (54) expression -> expression . PP
    (55) expression -> expression . MM
    (69) conditional_expression -> expression . LT term
    (70) conditional_expression -> expression . LE term
    (71) conditional_expression -> expression . GE term
    (72) conditional_expression -> expression . GT term
    (73) conditional_expression -> expression . EQ term
    (74) conditional_expression -> expression . NE term
    (75) conditional_expression -> expression . LOR term

    RPAREN          reduce using rule 50 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 50 (expression_list -> expression_list COMMA expression .)
    PP              shift and go to state 61
    MM              shift and go to state 62
    LT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    GT              shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LOR             shift and go to state 69


state 128

    (12) args -> INT ID COMMA INT ID .

    RPAREN          reduce using rule 12 (args -> INT ID COMMA INT ID .)


state 129

    (30) loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement . RPAREN statement

    RPAREN          shift and go to state 133


state 130

    (31) loop_statement -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement
    (42) expression_statement -> expression . SEMI
    (54) expression -> expression . PP
    (55) expression -> expression . MM
    (69) conditional_expression -> expression . LT term
    (70) conditional_expression -> expression . LE term
    (71) conditional_expression -> expression . GE term
    (72) conditional_expression -> expression . GT term
    (73) conditional_expression -> expression . EQ term
    (74) conditional_expression -> expression . NE term
    (75) conditional_expression -> expression . LOR term

    RPAREN          shift and go to state 134
    SEMI            shift and go to state 91
    PP              shift and go to state 61
    MM              shift and go to state 62
    LT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65
    GT              shift and go to state 66
    EQ              shift and go to state 67
    NE              shift and go to state 68
    LOR             shift and go to state 69


state 131

    (32) loop_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    PP              reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    MM              reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    AND             reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)


state 132

    (33) condition_statement -> IF LPAREN expression RPAREN statement .
    (34) condition_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    PP              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    MM              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    AND             reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 135

  ! ELSE            [ reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .) ]


state 133

    (30) loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN . statement
    (22) statement -> . compound_statement
    (23) statement -> . expression_statement
    (24) statement -> . jump_statement
    (25) statement -> . loop_statement
    (26) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (27) jump_statement -> . BREAK SEMI
    (28) jump_statement -> . RETURN SEMI
    (29) jump_statement -> . RETURN expression SEMI
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (32) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 23
    SEMI            shift and go to state 48
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    FOR             shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression_statement           shift and go to state 50
    statement                      shift and go to state 136
    compound_statement             shift and go to state 49
    jump_statement                 shift and go to state 51
    loop_statement                 shift and go to state 52
    condition_statement            shift and go to state 53
    expression                     shift and go to state 55
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 134

    (31) loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement
    (22) statement -> . compound_statement
    (23) statement -> . expression_statement
    (24) statement -> . jump_statement
    (25) statement -> . loop_statement
    (26) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (27) jump_statement -> . BREAK SEMI
    (28) jump_statement -> . RETURN SEMI
    (29) jump_statement -> . RETURN expression SEMI
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (32) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 23
    SEMI            shift and go to state 48
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    FOR             shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression_statement           shift and go to state 50
    expression                     shift and go to state 55
    statement                      shift and go to state 137
    compound_statement             shift and go to state 49
    jump_statement                 shift and go to state 51
    loop_statement                 shift and go to state 52
    condition_statement            shift and go to state 53
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 135

    (34) condition_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (22) statement -> . compound_statement
    (23) statement -> . expression_statement
    (24) statement -> . jump_statement
    (25) statement -> . loop_statement
    (26) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (27) jump_statement -> . BREAK SEMI
    (28) jump_statement -> . RETURN SEMI
    (29) jump_statement -> . RETURN expression SEMI
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (32) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (52) expression -> . PP expression
    (53) expression -> . MM expression
    (54) expression -> . expression PP
    (55) expression -> . expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . expression LT term
    (70) conditional_expression -> . expression LE term
    (71) conditional_expression -> . expression GE term
    (72) conditional_expression -> . expression GT term
    (73) conditional_expression -> . expression EQ term
    (74) conditional_expression -> . expression NE term
    (75) conditional_expression -> . expression LOR term
    (51) unary_expression -> . function_call
    (56) unary_expression -> . unary_expression PLUS term
    (57) unary_expression -> . AND term
    (58) unary_expression -> . unary_expression LT term
    (59) unary_expression -> . unary_expression GT term
    (61) unary_expression -> . unary_expression TIMES term
    (62) unary_expression -> . unary_expression MOD term
    (63) unary_expression -> . unary_expression MINUS term
    (64) unary_expression -> . term
    (76) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression_list RPAREN
    (60) term -> . ID
    (65) term -> . factor
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 23
    SEMI            shift and go to state 48
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    FOR             shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 55
    statement                      shift and go to state 138
    compound_statement             shift and go to state 49
    expression_statement           shift and go to state 50
    jump_statement                 shift and go to state 51
    loop_statement                 shift and go to state 52
    condition_statement            shift and go to state 53
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 36

state 136

    (30) loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .

    RBRACE          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    LBRACE          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    SEMI            reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    BREAK           reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    RETURN          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    FOR             reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    WHILE           reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    IF              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    STRING          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    PP              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    MM              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    AND             reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    ID              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    NUMBER          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    LPAREN          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    ELSE            reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)


state 137

    (31) loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .

    RBRACE          reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LBRACE          reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SEMI            reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FOR             reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IF              reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STRING          reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    PP              reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MM              reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    AND             reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ID              reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    NUMBER          reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)


state 138

    (34) condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PP              reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MM              reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AND             reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LT in state 26 resolved as shift
WARNING: shift/reduce conflict for GT in state 26 resolved as shift
WARNING: shift/reduce conflict for PP in state 77 resolved as shift
WARNING: shift/reduce conflict for MM in state 77 resolved as shift
WARNING: shift/reduce conflict for LT in state 77 resolved as shift
WARNING: shift/reduce conflict for LE in state 77 resolved as shift
WARNING: shift/reduce conflict for GE in state 77 resolved as shift
WARNING: shift/reduce conflict for GT in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ in state 77 resolved as shift
WARNING: shift/reduce conflict for NE in state 77 resolved as shift
WARNING: shift/reduce conflict for LOR in state 77 resolved as shift
WARNING: shift/reduce conflict for PP in state 78 resolved as shift
WARNING: shift/reduce conflict for MM in state 78 resolved as shift
WARNING: shift/reduce conflict for LT in state 78 resolved as shift
WARNING: shift/reduce conflict for LE in state 78 resolved as shift
WARNING: shift/reduce conflict for GE in state 78 resolved as shift
WARNING: shift/reduce conflict for GT in state 78 resolved as shift
WARNING: shift/reduce conflict for EQ in state 78 resolved as shift
WARNING: shift/reduce conflict for NE in state 78 resolved as shift
WARNING: shift/reduce conflict for LOR in state 78 resolved as shift
WARNING: shift/reduce conflict for PP in state 105 resolved as shift
WARNING: shift/reduce conflict for MM in state 105 resolved as shift
WARNING: shift/reduce conflict for LT in state 105 resolved as shift
WARNING: shift/reduce conflict for LE in state 105 resolved as shift
WARNING: shift/reduce conflict for GE in state 105 resolved as shift
WARNING: shift/reduce conflict for GT in state 105 resolved as shift
WARNING: shift/reduce conflict for EQ in state 105 resolved as shift
WARNING: shift/reduce conflict for NE in state 105 resolved as shift
WARNING: shift/reduce conflict for LOR in state 105 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 132 resolved as shift
