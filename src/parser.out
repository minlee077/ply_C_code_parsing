Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    DIVIDE
    LAND
    LNOT
    LOR
    MOD
    NOT
    OR
    STRING
    TIMES

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> include_header
Rule 4     empty -> <empty>
Rule 5     include_header -> INCLUDE HEADER
Rule 6     external_declaration -> function_definition
Rule 7     function_definition -> id_declaration arguments compound_statement
Rule 8     arguments -> LPAREN args RPAREN
Rule 9     args -> empty
Rule 10    args -> VOID
Rule 11    args -> INT ID
Rule 12    args -> INT ID COMMA INT ID
Rule 13    external_declaration -> declaration
Rule 14    declaration -> init_declaration SEMI
Rule 15    init_declaration -> id_declaration
Rule 16    init_declaration -> id_declaration array_reference
Rule 17    init_declaration -> id_declaration EQUALS expression
Rule 18    array_reference -> LBRACKET NUMBER RBRACKET
Rule 19    id_declaration -> VOID ID
Rule 20    id_declaration -> INT ID
Rule 21    external_declaration -> SEMI
Rule 22    statement -> compound_statement
Rule 23    statement -> expression_statement
Rule 24    statement -> jump_statement
Rule 25    statement -> loop_statement
Rule 26    statement -> condition_statement
Rule 27    jump_statement -> BREAK SEMI
Rule 28    jump_statement -> RETURN SEMI
Rule 29    jump_statement -> RETURN expression SEMI
Rule 30    loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
Rule 31    loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement
Rule 32    loop_statement -> WHILE LPAREN expression RPAREN statement
Rule 33    condition_statement -> IF LPAREN expression RPAREN statement
Rule 34    condition_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 35    compound_statement -> LBRACE declaration_list RBRACE
Rule 36    compound_statement -> LBRACE declaration_list statement_list RBRACE
Rule 37    compound_statement -> LBRACE statement_list RBRACE
Rule 38    compound_statement -> LBRACE RBRACE
Rule 39    declaration_list -> declaration
Rule 40    declaration_list -> declaration_list declaration
Rule 41    expression_statement -> SEMI
Rule 42    expression_statement -> expression SEMI
Rule 43    statement_list -> statement
Rule 44    statement_list -> statement_list statement
Rule 45    expression -> conditional_expression
Rule 46    expression -> unary_expression EQUALS expression
Rule 47    expression -> <empty>
Rule 48    function_call -> ID LPAREN expression RPAREN
Rule 49    unary_expression -> function_call
Rule 50    unary_expression -> PP unary_expression
Rule 51    unary_expression -> MM unary_expression
Rule 52    expression -> expression PLUS term
Rule 53    expression -> expression MINUS term
Rule 54    expression -> term
Rule 55    term -> factor
Rule 56    factor -> NUMBER
Rule 57    factor -> LPAREN expression RPAREN
Rule 58    conditional_expression -> cast_expression
Rule 59    conditional_expression -> expression LT term
Rule 60    conditional_expression -> expression LE term
Rule 61    conditional_expression -> expression GE term
Rule 62    conditional_expression -> expression GT term
Rule 63    conditional_expression -> expression EQ term
Rule 64    conditional_expression -> expression NE term
Rule 65    cast_expression -> unary_expression

Terminals, with rules where they appear

AND                  : 
BREAK                : 27
COMMA                : 12
DIVIDE               : 
ELSE                 : 34
EQ                   : 63
EQUALS               : 17 46
FOR                  : 30 31
GE                   : 61
GT                   : 62
HEADER               : 5
ID                   : 11 12 12 19 20 48
IF                   : 33 34
INCLUDE              : 5
INT                  : 11 12 12 20
LAND                 : 
LBRACE               : 35 36 37 38
LBRACKET             : 18
LE                   : 60
LNOT                 : 
LOR                  : 
LPAREN               : 8 30 31 32 33 34 48 57
LT                   : 59
MINUS                : 53
MM                   : 51
MOD                  : 
NE                   : 64
NOT                  : 
NUMBER               : 18 56
OR                   : 
PLUS                 : 52
PP                   : 50
RBRACE               : 35 36 37 38
RBRACKET             : 18
RETURN               : 28 29
RPAREN               : 8 30 31 32 33 34 48 57
SEMI                 : 14 21 27 28 29 41 42
STRING               : 
TIMES                : 
VOID                 : 10 19
WHILE                : 32
error                : 

Nonterminals, with rules where they appear

args                 : 8
arguments            : 7
array_reference      : 16
cast_expression      : 58
compound_statement   : 7 22
condition_statement  : 26
conditional_expression : 45
declaration          : 13 39 40
declaration_list     : 35 36 40
empty                : 9
expression           : 17 29 31 32 33 34 42 46 48 52 53 57 59 60 61 62 63 64
expression_statement : 23 30 30 30 31 31
external_declaration : 1 2
factor               : 55
function_call        : 49
function_definition  : 6
id_declaration       : 7 15 16 17
include_header       : 3
init_declaration     : 14
jump_statement       : 24
loop_statement       : 25
statement            : 30 31 32 33 34 34 43 44
statement_list       : 36 37 44
term                 : 52 53 54 59 60 61 62 63 64
translation_unit     : 2 0
unary_expression     : 46 50 51 65

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . include_header
    (6) external_declaration -> . function_definition
    (13) external_declaration -> . declaration
    (21) external_declaration -> . SEMI
    (5) include_header -> . INCLUDE HEADER
    (7) function_definition -> . id_declaration arguments compound_statement
    (14) declaration -> . init_declaration SEMI
    (19) id_declaration -> . VOID ID
    (20) id_declaration -> . INT ID
    (15) init_declaration -> . id_declaration
    (16) init_declaration -> . id_declaration array_reference
    (17) init_declaration -> . id_declaration EQUALS expression

    SEMI            shift and go to state 6
    INCLUDE         shift and go to state 7
    VOID            shift and go to state 10
    INT             shift and go to state 11

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    include_header                 shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    id_declaration                 shift and go to state 8
    init_declaration               shift and go to state 9

state 1

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . include_header
    (6) external_declaration -> . function_definition
    (13) external_declaration -> . declaration
    (21) external_declaration -> . SEMI
    (5) include_header -> . INCLUDE HEADER
    (7) function_definition -> . id_declaration arguments compound_statement
    (14) declaration -> . init_declaration SEMI
    (19) id_declaration -> . VOID ID
    (20) id_declaration -> . INT ID
    (15) init_declaration -> . id_declaration
    (16) init_declaration -> . id_declaration array_reference
    (17) init_declaration -> . id_declaration EQUALS expression

    SEMI            shift and go to state 6
    INCLUDE         shift and go to state 7
    VOID            shift and go to state 10
    INT             shift and go to state 11

    external_declaration           shift and go to state 12
    include_header                 shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    id_declaration                 shift and go to state 8
    init_declaration               shift and go to state 9

state 2

    (1) translation_unit -> external_declaration .

    SEMI            reduce using rule 1 (translation_unit -> external_declaration .)
    INCLUDE         reduce using rule 1 (translation_unit -> external_declaration .)
    VOID            reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)


state 3

    (3) external_declaration -> include_header .

    SEMI            reduce using rule 3 (external_declaration -> include_header .)
    INCLUDE         reduce using rule 3 (external_declaration -> include_header .)
    VOID            reduce using rule 3 (external_declaration -> include_header .)
    INT             reduce using rule 3 (external_declaration -> include_header .)
    $end            reduce using rule 3 (external_declaration -> include_header .)


state 4

    (6) external_declaration -> function_definition .

    SEMI            reduce using rule 6 (external_declaration -> function_definition .)
    INCLUDE         reduce using rule 6 (external_declaration -> function_definition .)
    VOID            reduce using rule 6 (external_declaration -> function_definition .)
    INT             reduce using rule 6 (external_declaration -> function_definition .)
    $end            reduce using rule 6 (external_declaration -> function_definition .)


state 5

    (13) external_declaration -> declaration .

    SEMI            reduce using rule 13 (external_declaration -> declaration .)
    INCLUDE         reduce using rule 13 (external_declaration -> declaration .)
    VOID            reduce using rule 13 (external_declaration -> declaration .)
    INT             reduce using rule 13 (external_declaration -> declaration .)
    $end            reduce using rule 13 (external_declaration -> declaration .)


state 6

    (21) external_declaration -> SEMI .

    SEMI            reduce using rule 21 (external_declaration -> SEMI .)
    INCLUDE         reduce using rule 21 (external_declaration -> SEMI .)
    VOID            reduce using rule 21 (external_declaration -> SEMI .)
    INT             reduce using rule 21 (external_declaration -> SEMI .)
    $end            reduce using rule 21 (external_declaration -> SEMI .)


state 7

    (5) include_header -> INCLUDE . HEADER

    HEADER          shift and go to state 13


state 8

    (7) function_definition -> id_declaration . arguments compound_statement
    (15) init_declaration -> id_declaration .
    (16) init_declaration -> id_declaration . array_reference
    (17) init_declaration -> id_declaration . EQUALS expression
    (8) arguments -> . LPAREN args RPAREN
    (18) array_reference -> . LBRACKET NUMBER RBRACKET

    SEMI            reduce using rule 15 (init_declaration -> id_declaration .)
    EQUALS          shift and go to state 16
    LPAREN          shift and go to state 17
    LBRACKET        shift and go to state 18

    arguments                      shift and go to state 14
    array_reference                shift and go to state 15

state 9

    (14) declaration -> init_declaration . SEMI

    SEMI            shift and go to state 19


state 10

    (19) id_declaration -> VOID . ID

    ID              shift and go to state 20


state 11

    (20) id_declaration -> INT . ID

    ID              shift and go to state 21


state 12

    (2) translation_unit -> translation_unit external_declaration .

    SEMI            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INCLUDE         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 13

    (5) include_header -> INCLUDE HEADER .

    SEMI            reduce using rule 5 (include_header -> INCLUDE HEADER .)
    INCLUDE         reduce using rule 5 (include_header -> INCLUDE HEADER .)
    VOID            reduce using rule 5 (include_header -> INCLUDE HEADER .)
    INT             reduce using rule 5 (include_header -> INCLUDE HEADER .)
    $end            reduce using rule 5 (include_header -> INCLUDE HEADER .)


state 14

    (7) function_definition -> id_declaration arguments . compound_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE

    LBRACE          shift and go to state 23

    compound_statement             shift and go to state 22

state 15

    (16) init_declaration -> id_declaration array_reference .

    SEMI            reduce using rule 16 (init_declaration -> id_declaration array_reference .)


state 16

    (17) init_declaration -> id_declaration EQUALS . expression
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> .
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (58) conditional_expression -> . cast_expression
    (59) conditional_expression -> . expression LT term
    (60) conditional_expression -> . expression LE term
    (61) conditional_expression -> . expression GE term
    (62) conditional_expression -> . expression GT term
    (63) conditional_expression -> . expression EQ term
    (64) conditional_expression -> . expression NE term
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (55) term -> . factor
    (65) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

    PLUS            reduce using rule 47 (expression -> .)
    MINUS           reduce using rule 47 (expression -> .)
    LT              reduce using rule 47 (expression -> .)
    LE              reduce using rule 47 (expression -> .)
    GE              reduce using rule 47 (expression -> .)
    GT              reduce using rule 47 (expression -> .)
    EQ              reduce using rule 47 (expression -> .)
    NE              reduce using rule 47 (expression -> .)
    SEMI            reduce using rule 47 (expression -> .)
    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33
    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

    expression                     shift and go to state 24
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 27
    cast_expression                shift and go to state 28
    function_call                  shift and go to state 29
    factor                         shift and go to state 32

state 17

    (8) arguments -> LPAREN . args RPAREN
    (9) args -> . empty
    (10) args -> . VOID
    (11) args -> . INT ID
    (12) args -> . INT ID COMMA INT ID
    (4) empty -> .

    VOID            shift and go to state 38
    INT             shift and go to state 39
    RPAREN          reduce using rule 4 (empty -> .)

    args                           shift and go to state 36
    empty                          shift and go to state 37

state 18

    (18) array_reference -> LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 40


state 19

    (14) declaration -> init_declaration SEMI .

    SEMI            reduce using rule 14 (declaration -> init_declaration SEMI .)
    INCLUDE         reduce using rule 14 (declaration -> init_declaration SEMI .)
    VOID            reduce using rule 14 (declaration -> init_declaration SEMI .)
    INT             reduce using rule 14 (declaration -> init_declaration SEMI .)
    $end            reduce using rule 14 (declaration -> init_declaration SEMI .)
    RBRACE          reduce using rule 14 (declaration -> init_declaration SEMI .)
    LBRACE          reduce using rule 14 (declaration -> init_declaration SEMI .)
    BREAK           reduce using rule 14 (declaration -> init_declaration SEMI .)
    RETURN          reduce using rule 14 (declaration -> init_declaration SEMI .)
    FOR             reduce using rule 14 (declaration -> init_declaration SEMI .)
    WHILE           reduce using rule 14 (declaration -> init_declaration SEMI .)
    IF              reduce using rule 14 (declaration -> init_declaration SEMI .)
    PP              reduce using rule 14 (declaration -> init_declaration SEMI .)
    MM              reduce using rule 14 (declaration -> init_declaration SEMI .)
    ID              reduce using rule 14 (declaration -> init_declaration SEMI .)
    NUMBER          reduce using rule 14 (declaration -> init_declaration SEMI .)
    LPAREN          reduce using rule 14 (declaration -> init_declaration SEMI .)
    PLUS            reduce using rule 14 (declaration -> init_declaration SEMI .)
    MINUS           reduce using rule 14 (declaration -> init_declaration SEMI .)
    LT              reduce using rule 14 (declaration -> init_declaration SEMI .)
    LE              reduce using rule 14 (declaration -> init_declaration SEMI .)
    GE              reduce using rule 14 (declaration -> init_declaration SEMI .)
    GT              reduce using rule 14 (declaration -> init_declaration SEMI .)
    EQ              reduce using rule 14 (declaration -> init_declaration SEMI .)
    NE              reduce using rule 14 (declaration -> init_declaration SEMI .)


state 20

    (19) id_declaration -> VOID ID .

    EQUALS          reduce using rule 19 (id_declaration -> VOID ID .)
    LPAREN          reduce using rule 19 (id_declaration -> VOID ID .)
    LBRACKET        reduce using rule 19 (id_declaration -> VOID ID .)
    SEMI            reduce using rule 19 (id_declaration -> VOID ID .)


state 21

    (20) id_declaration -> INT ID .

    EQUALS          reduce using rule 20 (id_declaration -> INT ID .)
    LPAREN          reduce using rule 20 (id_declaration -> INT ID .)
    LBRACKET        reduce using rule 20 (id_declaration -> INT ID .)
    SEMI            reduce using rule 20 (id_declaration -> INT ID .)


state 22

    (7) function_definition -> id_declaration arguments compound_statement .

    SEMI            reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)
    INCLUDE         reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)
    VOID            reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)
    INT             reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)
    $end            reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)


state 23

    (35) compound_statement -> LBRACE . declaration_list RBRACE
    (36) compound_statement -> LBRACE . declaration_list statement_list RBRACE
    (37) compound_statement -> LBRACE . statement_list RBRACE
    (38) compound_statement -> LBRACE . RBRACE
    (39) declaration_list -> . declaration
    (40) declaration_list -> . declaration_list declaration
    (43) statement_list -> . statement
    (44) statement_list -> . statement_list statement
    (14) declaration -> . init_declaration SEMI
    (22) statement -> . compound_statement
    (23) statement -> . expression_statement
    (24) statement -> . jump_statement
    (25) statement -> . loop_statement
    (26) statement -> . condition_statement
    (15) init_declaration -> . id_declaration
    (16) init_declaration -> . id_declaration array_reference
    (17) init_declaration -> . id_declaration EQUALS expression
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (27) jump_statement -> . BREAK SEMI
    (28) jump_statement -> . RETURN SEMI
    (29) jump_statement -> . RETURN expression SEMI
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (32) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (19) id_declaration -> . VOID ID
    (20) id_declaration -> . INT ID
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> .
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (58) conditional_expression -> . cast_expression
    (59) conditional_expression -> . expression LT term
    (60) conditional_expression -> . expression LE term
    (61) conditional_expression -> . expression GE term
    (62) conditional_expression -> . expression GT term
    (63) conditional_expression -> . expression EQ term
    (64) conditional_expression -> . expression NE term
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (55) term -> . factor
    (65) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 42
    LBRACE          shift and go to state 23
    SEMI            shift and go to state 46
    BREAK           shift and go to state 54
    RETURN          shift and go to state 55
    FOR             shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    VOID            shift and go to state 10
    INT             shift and go to state 11
    PLUS            reduce using rule 47 (expression -> .)
    MINUS           reduce using rule 47 (expression -> .)
    LT              reduce using rule 47 (expression -> .)
    LE              reduce using rule 47 (expression -> .)
    GE              reduce using rule 47 (expression -> .)
    GT              reduce using rule 47 (expression -> .)
    EQ              reduce using rule 47 (expression -> .)
    NE              reduce using rule 47 (expression -> .)
    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33
    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

  ! SEMI            [ reduce using rule 47 (expression -> .) ]

    declaration_list               shift and go to state 41
    statement_list                 shift and go to state 43
    declaration                    shift and go to state 44
    statement                      shift and go to state 45
    init_declaration               shift and go to state 9
    compound_statement             shift and go to state 47
    expression_statement           shift and go to state 48
    jump_statement                 shift and go to state 49
    loop_statement                 shift and go to state 50
    condition_statement            shift and go to state 51
    id_declaration                 shift and go to state 52
    expression                     shift and go to state 53
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 27
    cast_expression                shift and go to state 28
    function_call                  shift and go to state 29
    factor                         shift and go to state 32

state 24

    (17) init_declaration -> id_declaration EQUALS expression .
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term
    (59) conditional_expression -> expression . LT term
    (60) conditional_expression -> expression . LE term
    (61) conditional_expression -> expression . GE term
    (62) conditional_expression -> expression . GT term
    (63) conditional_expression -> expression . EQ term
    (64) conditional_expression -> expression . NE term

    SEMI            reduce using rule 17 (init_declaration -> id_declaration EQUALS expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GE              shift and go to state 63
    GT              shift and go to state 64
    EQ              shift and go to state 65
    NE              shift and go to state 66


state 25

    (45) expression -> conditional_expression .

    PLUS            reduce using rule 45 (expression -> conditional_expression .)
    MINUS           reduce using rule 45 (expression -> conditional_expression .)
    LT              reduce using rule 45 (expression -> conditional_expression .)
    LE              reduce using rule 45 (expression -> conditional_expression .)
    GE              reduce using rule 45 (expression -> conditional_expression .)
    GT              reduce using rule 45 (expression -> conditional_expression .)
    EQ              reduce using rule 45 (expression -> conditional_expression .)
    NE              reduce using rule 45 (expression -> conditional_expression .)
    SEMI            reduce using rule 45 (expression -> conditional_expression .)
    RPAREN          reduce using rule 45 (expression -> conditional_expression .)


state 26

    (46) expression -> unary_expression . EQUALS expression
    (65) cast_expression -> unary_expression .

    EQUALS          shift and go to state 67
    PLUS            reduce using rule 65 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 65 (cast_expression -> unary_expression .)
    LT              reduce using rule 65 (cast_expression -> unary_expression .)
    LE              reduce using rule 65 (cast_expression -> unary_expression .)
    GE              reduce using rule 65 (cast_expression -> unary_expression .)
    GT              reduce using rule 65 (cast_expression -> unary_expression .)
    EQ              reduce using rule 65 (cast_expression -> unary_expression .)
    NE              reduce using rule 65 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 65 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 65 (cast_expression -> unary_expression .)


state 27

    (54) expression -> term .

    PLUS            reduce using rule 54 (expression -> term .)
    MINUS           reduce using rule 54 (expression -> term .)
    LT              reduce using rule 54 (expression -> term .)
    LE              reduce using rule 54 (expression -> term .)
    GE              reduce using rule 54 (expression -> term .)
    GT              reduce using rule 54 (expression -> term .)
    EQ              reduce using rule 54 (expression -> term .)
    NE              reduce using rule 54 (expression -> term .)
    SEMI            reduce using rule 54 (expression -> term .)
    RPAREN          reduce using rule 54 (expression -> term .)


state 28

    (58) conditional_expression -> cast_expression .

    PLUS            reduce using rule 58 (conditional_expression -> cast_expression .)
    MINUS           reduce using rule 58 (conditional_expression -> cast_expression .)
    LT              reduce using rule 58 (conditional_expression -> cast_expression .)
    LE              reduce using rule 58 (conditional_expression -> cast_expression .)
    GE              reduce using rule 58 (conditional_expression -> cast_expression .)
    GT              reduce using rule 58 (conditional_expression -> cast_expression .)
    EQ              reduce using rule 58 (conditional_expression -> cast_expression .)
    NE              reduce using rule 58 (conditional_expression -> cast_expression .)
    SEMI            reduce using rule 58 (conditional_expression -> cast_expression .)
    RPAREN          reduce using rule 58 (conditional_expression -> cast_expression .)


state 29

    (49) unary_expression -> function_call .

    EQUALS          reduce using rule 49 (unary_expression -> function_call .)
    PLUS            reduce using rule 49 (unary_expression -> function_call .)
    MINUS           reduce using rule 49 (unary_expression -> function_call .)
    LT              reduce using rule 49 (unary_expression -> function_call .)
    LE              reduce using rule 49 (unary_expression -> function_call .)
    GE              reduce using rule 49 (unary_expression -> function_call .)
    GT              reduce using rule 49 (unary_expression -> function_call .)
    EQ              reduce using rule 49 (unary_expression -> function_call .)
    NE              reduce using rule 49 (unary_expression -> function_call .)
    SEMI            reduce using rule 49 (unary_expression -> function_call .)
    RPAREN          reduce using rule 49 (unary_expression -> function_call .)


state 30

    (50) unary_expression -> PP . unary_expression
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN

    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33

    unary_expression               shift and go to state 68
    function_call                  shift and go to state 29

state 31

    (51) unary_expression -> MM . unary_expression
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN

    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33

    unary_expression               shift and go to state 69
    function_call                  shift and go to state 29

state 32

    (55) term -> factor .

    PLUS            reduce using rule 55 (term -> factor .)
    MINUS           reduce using rule 55 (term -> factor .)
    LT              reduce using rule 55 (term -> factor .)
    LE              reduce using rule 55 (term -> factor .)
    GE              reduce using rule 55 (term -> factor .)
    GT              reduce using rule 55 (term -> factor .)
    EQ              reduce using rule 55 (term -> factor .)
    NE              reduce using rule 55 (term -> factor .)
    SEMI            reduce using rule 55 (term -> factor .)
    RPAREN          reduce using rule 55 (term -> factor .)


state 33

    (48) function_call -> ID . LPAREN expression RPAREN

    LPAREN          shift and go to state 70


state 34

    (57) factor -> LPAREN . expression RPAREN
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> .
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (58) conditional_expression -> . cast_expression
    (59) conditional_expression -> . expression LT term
    (60) conditional_expression -> . expression LE term
    (61) conditional_expression -> . expression GE term
    (62) conditional_expression -> . expression GT term
    (63) conditional_expression -> . expression EQ term
    (64) conditional_expression -> . expression NE term
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (55) term -> . factor
    (65) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 47 (expression -> .)
    PLUS            reduce using rule 47 (expression -> .)
    MINUS           reduce using rule 47 (expression -> .)
    LT              reduce using rule 47 (expression -> .)
    LE              reduce using rule 47 (expression -> .)
    GE              reduce using rule 47 (expression -> .)
    GT              reduce using rule 47 (expression -> .)
    EQ              reduce using rule 47 (expression -> .)
    NE              reduce using rule 47 (expression -> .)
    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33
    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

    expression                     shift and go to state 71
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 27
    cast_expression                shift and go to state 28
    function_call                  shift and go to state 29
    factor                         shift and go to state 32

state 35

    (56) factor -> NUMBER .

    PLUS            reduce using rule 56 (factor -> NUMBER .)
    MINUS           reduce using rule 56 (factor -> NUMBER .)
    LT              reduce using rule 56 (factor -> NUMBER .)
    LE              reduce using rule 56 (factor -> NUMBER .)
    GE              reduce using rule 56 (factor -> NUMBER .)
    GT              reduce using rule 56 (factor -> NUMBER .)
    EQ              reduce using rule 56 (factor -> NUMBER .)
    NE              reduce using rule 56 (factor -> NUMBER .)
    SEMI            reduce using rule 56 (factor -> NUMBER .)
    RPAREN          reduce using rule 56 (factor -> NUMBER .)


state 36

    (8) arguments -> LPAREN args . RPAREN

    RPAREN          shift and go to state 72


state 37

    (9) args -> empty .

    RPAREN          reduce using rule 9 (args -> empty .)


state 38

    (10) args -> VOID .

    RPAREN          reduce using rule 10 (args -> VOID .)


state 39

    (11) args -> INT . ID
    (12) args -> INT . ID COMMA INT ID

    ID              shift and go to state 73


state 40

    (18) array_reference -> LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 74


state 41

    (35) compound_statement -> LBRACE declaration_list . RBRACE
    (36) compound_statement -> LBRACE declaration_list . statement_list RBRACE
    (40) declaration_list -> declaration_list . declaration
    (43) statement_list -> . statement
    (44) statement_list -> . statement_list statement
    (14) declaration -> . init_declaration SEMI
    (22) statement -> . compound_statement
    (23) statement -> . expression_statement
    (24) statement -> . jump_statement
    (25) statement -> . loop_statement
    (26) statement -> . condition_statement
    (15) init_declaration -> . id_declaration
    (16) init_declaration -> . id_declaration array_reference
    (17) init_declaration -> . id_declaration EQUALS expression
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (27) jump_statement -> . BREAK SEMI
    (28) jump_statement -> . RETURN SEMI
    (29) jump_statement -> . RETURN expression SEMI
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (32) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (19) id_declaration -> . VOID ID
    (20) id_declaration -> . INT ID
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> .
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (58) conditional_expression -> . cast_expression
    (59) conditional_expression -> . expression LT term
    (60) conditional_expression -> . expression LE term
    (61) conditional_expression -> . expression GE term
    (62) conditional_expression -> . expression GT term
    (63) conditional_expression -> . expression EQ term
    (64) conditional_expression -> . expression NE term
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (55) term -> . factor
    (65) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 75
    LBRACE          shift and go to state 23
    SEMI            shift and go to state 46
    BREAK           shift and go to state 54
    RETURN          shift and go to state 55
    FOR             shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    VOID            shift and go to state 10
    INT             shift and go to state 11
    PLUS            reduce using rule 47 (expression -> .)
    MINUS           reduce using rule 47 (expression -> .)
    LT              reduce using rule 47 (expression -> .)
    LE              reduce using rule 47 (expression -> .)
    GE              reduce using rule 47 (expression -> .)
    GT              reduce using rule 47 (expression -> .)
    EQ              reduce using rule 47 (expression -> .)
    NE              reduce using rule 47 (expression -> .)
    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33
    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

  ! SEMI            [ reduce using rule 47 (expression -> .) ]

    statement_list                 shift and go to state 76
    declaration                    shift and go to state 77
    statement                      shift and go to state 45
    init_declaration               shift and go to state 9
    compound_statement             shift and go to state 47
    expression_statement           shift and go to state 48
    jump_statement                 shift and go to state 49
    loop_statement                 shift and go to state 50
    condition_statement            shift and go to state 51
    id_declaration                 shift and go to state 52
    expression                     shift and go to state 53
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 27
    cast_expression                shift and go to state 28
    function_call                  shift and go to state 29
    factor                         shift and go to state 32

state 42

    (38) compound_statement -> LBRACE RBRACE .

    SEMI            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    INCLUDE         reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    VOID            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    PP              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    MM              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    ID              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    NUMBER          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    PLUS            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    LT              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    LE              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    GE              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    GT              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    EQ              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    NE              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)


state 43

    (37) compound_statement -> LBRACE statement_list . RBRACE
    (44) statement_list -> statement_list . statement
    (22) statement -> . compound_statement
    (23) statement -> . expression_statement
    (24) statement -> . jump_statement
    (25) statement -> . loop_statement
    (26) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (27) jump_statement -> . BREAK SEMI
    (28) jump_statement -> . RETURN SEMI
    (29) jump_statement -> . RETURN expression SEMI
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (32) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> .
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (58) conditional_expression -> . cast_expression
    (59) conditional_expression -> . expression LT term
    (60) conditional_expression -> . expression LE term
    (61) conditional_expression -> . expression GE term
    (62) conditional_expression -> . expression GT term
    (63) conditional_expression -> . expression EQ term
    (64) conditional_expression -> . expression NE term
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (55) term -> . factor
    (65) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 78
    LBRACE          shift and go to state 23
    SEMI            shift and go to state 46
    BREAK           shift and go to state 54
    RETURN          shift and go to state 55
    FOR             shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    PLUS            reduce using rule 47 (expression -> .)
    MINUS           reduce using rule 47 (expression -> .)
    LT              reduce using rule 47 (expression -> .)
    LE              reduce using rule 47 (expression -> .)
    GE              reduce using rule 47 (expression -> .)
    GT              reduce using rule 47 (expression -> .)
    EQ              reduce using rule 47 (expression -> .)
    NE              reduce using rule 47 (expression -> .)
    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33
    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

  ! SEMI            [ reduce using rule 47 (expression -> .) ]

    statement                      shift and go to state 79
    compound_statement             shift and go to state 47
    expression_statement           shift and go to state 48
    jump_statement                 shift and go to state 49
    loop_statement                 shift and go to state 50
    condition_statement            shift and go to state 51
    expression                     shift and go to state 53
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 27
    cast_expression                shift and go to state 28
    function_call                  shift and go to state 29
    factor                         shift and go to state 32

state 44

    (39) declaration_list -> declaration .

    RBRACE          reduce using rule 39 (declaration_list -> declaration .)
    LBRACE          reduce using rule 39 (declaration_list -> declaration .)
    SEMI            reduce using rule 39 (declaration_list -> declaration .)
    BREAK           reduce using rule 39 (declaration_list -> declaration .)
    RETURN          reduce using rule 39 (declaration_list -> declaration .)
    FOR             reduce using rule 39 (declaration_list -> declaration .)
    WHILE           reduce using rule 39 (declaration_list -> declaration .)
    IF              reduce using rule 39 (declaration_list -> declaration .)
    VOID            reduce using rule 39 (declaration_list -> declaration .)
    INT             reduce using rule 39 (declaration_list -> declaration .)
    PP              reduce using rule 39 (declaration_list -> declaration .)
    MM              reduce using rule 39 (declaration_list -> declaration .)
    ID              reduce using rule 39 (declaration_list -> declaration .)
    NUMBER          reduce using rule 39 (declaration_list -> declaration .)
    LPAREN          reduce using rule 39 (declaration_list -> declaration .)
    PLUS            reduce using rule 39 (declaration_list -> declaration .)
    MINUS           reduce using rule 39 (declaration_list -> declaration .)
    LT              reduce using rule 39 (declaration_list -> declaration .)
    LE              reduce using rule 39 (declaration_list -> declaration .)
    GE              reduce using rule 39 (declaration_list -> declaration .)
    GT              reduce using rule 39 (declaration_list -> declaration .)
    EQ              reduce using rule 39 (declaration_list -> declaration .)
    NE              reduce using rule 39 (declaration_list -> declaration .)


state 45

    (43) statement_list -> statement .

    RBRACE          reduce using rule 43 (statement_list -> statement .)
    LBRACE          reduce using rule 43 (statement_list -> statement .)
    SEMI            reduce using rule 43 (statement_list -> statement .)
    BREAK           reduce using rule 43 (statement_list -> statement .)
    RETURN          reduce using rule 43 (statement_list -> statement .)
    FOR             reduce using rule 43 (statement_list -> statement .)
    WHILE           reduce using rule 43 (statement_list -> statement .)
    IF              reduce using rule 43 (statement_list -> statement .)
    PP              reduce using rule 43 (statement_list -> statement .)
    MM              reduce using rule 43 (statement_list -> statement .)
    ID              reduce using rule 43 (statement_list -> statement .)
    NUMBER          reduce using rule 43 (statement_list -> statement .)
    LPAREN          reduce using rule 43 (statement_list -> statement .)
    PLUS            reduce using rule 43 (statement_list -> statement .)
    MINUS           reduce using rule 43 (statement_list -> statement .)
    LT              reduce using rule 43 (statement_list -> statement .)
    LE              reduce using rule 43 (statement_list -> statement .)
    GE              reduce using rule 43 (statement_list -> statement .)
    GT              reduce using rule 43 (statement_list -> statement .)
    EQ              reduce using rule 43 (statement_list -> statement .)
    NE              reduce using rule 43 (statement_list -> statement .)


state 46

    (41) expression_statement -> SEMI .

    RBRACE          reduce using rule 41 (expression_statement -> SEMI .)
    LBRACE          reduce using rule 41 (expression_statement -> SEMI .)
    SEMI            reduce using rule 41 (expression_statement -> SEMI .)
    BREAK           reduce using rule 41 (expression_statement -> SEMI .)
    RETURN          reduce using rule 41 (expression_statement -> SEMI .)
    FOR             reduce using rule 41 (expression_statement -> SEMI .)
    WHILE           reduce using rule 41 (expression_statement -> SEMI .)
    IF              reduce using rule 41 (expression_statement -> SEMI .)
    PP              reduce using rule 41 (expression_statement -> SEMI .)
    MM              reduce using rule 41 (expression_statement -> SEMI .)
    ID              reduce using rule 41 (expression_statement -> SEMI .)
    NUMBER          reduce using rule 41 (expression_statement -> SEMI .)
    LPAREN          reduce using rule 41 (expression_statement -> SEMI .)
    PLUS            reduce using rule 41 (expression_statement -> SEMI .)
    MINUS           reduce using rule 41 (expression_statement -> SEMI .)
    LT              reduce using rule 41 (expression_statement -> SEMI .)
    LE              reduce using rule 41 (expression_statement -> SEMI .)
    GE              reduce using rule 41 (expression_statement -> SEMI .)
    GT              reduce using rule 41 (expression_statement -> SEMI .)
    EQ              reduce using rule 41 (expression_statement -> SEMI .)
    NE              reduce using rule 41 (expression_statement -> SEMI .)
    RPAREN          reduce using rule 41 (expression_statement -> SEMI .)
    ELSE            reduce using rule 41 (expression_statement -> SEMI .)


state 47

    (22) statement -> compound_statement .

    RBRACE          reduce using rule 22 (statement -> compound_statement .)
    LBRACE          reduce using rule 22 (statement -> compound_statement .)
    SEMI            reduce using rule 22 (statement -> compound_statement .)
    BREAK           reduce using rule 22 (statement -> compound_statement .)
    RETURN          reduce using rule 22 (statement -> compound_statement .)
    FOR             reduce using rule 22 (statement -> compound_statement .)
    WHILE           reduce using rule 22 (statement -> compound_statement .)
    IF              reduce using rule 22 (statement -> compound_statement .)
    PP              reduce using rule 22 (statement -> compound_statement .)
    MM              reduce using rule 22 (statement -> compound_statement .)
    ID              reduce using rule 22 (statement -> compound_statement .)
    NUMBER          reduce using rule 22 (statement -> compound_statement .)
    LPAREN          reduce using rule 22 (statement -> compound_statement .)
    PLUS            reduce using rule 22 (statement -> compound_statement .)
    MINUS           reduce using rule 22 (statement -> compound_statement .)
    LT              reduce using rule 22 (statement -> compound_statement .)
    LE              reduce using rule 22 (statement -> compound_statement .)
    GE              reduce using rule 22 (statement -> compound_statement .)
    GT              reduce using rule 22 (statement -> compound_statement .)
    EQ              reduce using rule 22 (statement -> compound_statement .)
    NE              reduce using rule 22 (statement -> compound_statement .)
    ELSE            reduce using rule 22 (statement -> compound_statement .)


state 48

    (23) statement -> expression_statement .

    RBRACE          reduce using rule 23 (statement -> expression_statement .)
    LBRACE          reduce using rule 23 (statement -> expression_statement .)
    SEMI            reduce using rule 23 (statement -> expression_statement .)
    BREAK           reduce using rule 23 (statement -> expression_statement .)
    RETURN          reduce using rule 23 (statement -> expression_statement .)
    FOR             reduce using rule 23 (statement -> expression_statement .)
    WHILE           reduce using rule 23 (statement -> expression_statement .)
    IF              reduce using rule 23 (statement -> expression_statement .)
    PP              reduce using rule 23 (statement -> expression_statement .)
    MM              reduce using rule 23 (statement -> expression_statement .)
    ID              reduce using rule 23 (statement -> expression_statement .)
    NUMBER          reduce using rule 23 (statement -> expression_statement .)
    LPAREN          reduce using rule 23 (statement -> expression_statement .)
    PLUS            reduce using rule 23 (statement -> expression_statement .)
    MINUS           reduce using rule 23 (statement -> expression_statement .)
    LT              reduce using rule 23 (statement -> expression_statement .)
    LE              reduce using rule 23 (statement -> expression_statement .)
    GE              reduce using rule 23 (statement -> expression_statement .)
    GT              reduce using rule 23 (statement -> expression_statement .)
    EQ              reduce using rule 23 (statement -> expression_statement .)
    NE              reduce using rule 23 (statement -> expression_statement .)
    ELSE            reduce using rule 23 (statement -> expression_statement .)


state 49

    (24) statement -> jump_statement .

    RBRACE          reduce using rule 24 (statement -> jump_statement .)
    LBRACE          reduce using rule 24 (statement -> jump_statement .)
    SEMI            reduce using rule 24 (statement -> jump_statement .)
    BREAK           reduce using rule 24 (statement -> jump_statement .)
    RETURN          reduce using rule 24 (statement -> jump_statement .)
    FOR             reduce using rule 24 (statement -> jump_statement .)
    WHILE           reduce using rule 24 (statement -> jump_statement .)
    IF              reduce using rule 24 (statement -> jump_statement .)
    PP              reduce using rule 24 (statement -> jump_statement .)
    MM              reduce using rule 24 (statement -> jump_statement .)
    ID              reduce using rule 24 (statement -> jump_statement .)
    NUMBER          reduce using rule 24 (statement -> jump_statement .)
    LPAREN          reduce using rule 24 (statement -> jump_statement .)
    PLUS            reduce using rule 24 (statement -> jump_statement .)
    MINUS           reduce using rule 24 (statement -> jump_statement .)
    LT              reduce using rule 24 (statement -> jump_statement .)
    LE              reduce using rule 24 (statement -> jump_statement .)
    GE              reduce using rule 24 (statement -> jump_statement .)
    GT              reduce using rule 24 (statement -> jump_statement .)
    EQ              reduce using rule 24 (statement -> jump_statement .)
    NE              reduce using rule 24 (statement -> jump_statement .)
    ELSE            reduce using rule 24 (statement -> jump_statement .)


state 50

    (25) statement -> loop_statement .

    RBRACE          reduce using rule 25 (statement -> loop_statement .)
    LBRACE          reduce using rule 25 (statement -> loop_statement .)
    SEMI            reduce using rule 25 (statement -> loop_statement .)
    BREAK           reduce using rule 25 (statement -> loop_statement .)
    RETURN          reduce using rule 25 (statement -> loop_statement .)
    FOR             reduce using rule 25 (statement -> loop_statement .)
    WHILE           reduce using rule 25 (statement -> loop_statement .)
    IF              reduce using rule 25 (statement -> loop_statement .)
    PP              reduce using rule 25 (statement -> loop_statement .)
    MM              reduce using rule 25 (statement -> loop_statement .)
    ID              reduce using rule 25 (statement -> loop_statement .)
    NUMBER          reduce using rule 25 (statement -> loop_statement .)
    LPAREN          reduce using rule 25 (statement -> loop_statement .)
    PLUS            reduce using rule 25 (statement -> loop_statement .)
    MINUS           reduce using rule 25 (statement -> loop_statement .)
    LT              reduce using rule 25 (statement -> loop_statement .)
    LE              reduce using rule 25 (statement -> loop_statement .)
    GE              reduce using rule 25 (statement -> loop_statement .)
    GT              reduce using rule 25 (statement -> loop_statement .)
    EQ              reduce using rule 25 (statement -> loop_statement .)
    NE              reduce using rule 25 (statement -> loop_statement .)
    ELSE            reduce using rule 25 (statement -> loop_statement .)


state 51

    (26) statement -> condition_statement .

    RBRACE          reduce using rule 26 (statement -> condition_statement .)
    LBRACE          reduce using rule 26 (statement -> condition_statement .)
    SEMI            reduce using rule 26 (statement -> condition_statement .)
    BREAK           reduce using rule 26 (statement -> condition_statement .)
    RETURN          reduce using rule 26 (statement -> condition_statement .)
    FOR             reduce using rule 26 (statement -> condition_statement .)
    WHILE           reduce using rule 26 (statement -> condition_statement .)
    IF              reduce using rule 26 (statement -> condition_statement .)
    PP              reduce using rule 26 (statement -> condition_statement .)
    MM              reduce using rule 26 (statement -> condition_statement .)
    ID              reduce using rule 26 (statement -> condition_statement .)
    NUMBER          reduce using rule 26 (statement -> condition_statement .)
    LPAREN          reduce using rule 26 (statement -> condition_statement .)
    PLUS            reduce using rule 26 (statement -> condition_statement .)
    MINUS           reduce using rule 26 (statement -> condition_statement .)
    LT              reduce using rule 26 (statement -> condition_statement .)
    LE              reduce using rule 26 (statement -> condition_statement .)
    GE              reduce using rule 26 (statement -> condition_statement .)
    GT              reduce using rule 26 (statement -> condition_statement .)
    EQ              reduce using rule 26 (statement -> condition_statement .)
    NE              reduce using rule 26 (statement -> condition_statement .)
    ELSE            reduce using rule 26 (statement -> condition_statement .)


state 52

    (15) init_declaration -> id_declaration .
    (16) init_declaration -> id_declaration . array_reference
    (17) init_declaration -> id_declaration . EQUALS expression
    (18) array_reference -> . LBRACKET NUMBER RBRACKET

    SEMI            reduce using rule 15 (init_declaration -> id_declaration .)
    EQUALS          shift and go to state 16
    LBRACKET        shift and go to state 18

    array_reference                shift and go to state 15

state 53

    (42) expression_statement -> expression . SEMI
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term
    (59) conditional_expression -> expression . LT term
    (60) conditional_expression -> expression . LE term
    (61) conditional_expression -> expression . GE term
    (62) conditional_expression -> expression . GT term
    (63) conditional_expression -> expression . EQ term
    (64) conditional_expression -> expression . NE term

    SEMI            shift and go to state 80
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GE              shift and go to state 63
    GT              shift and go to state 64
    EQ              shift and go to state 65
    NE              shift and go to state 66


state 54

    (27) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 81


state 55

    (28) jump_statement -> RETURN . SEMI
    (29) jump_statement -> RETURN . expression SEMI
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> .
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (58) conditional_expression -> . cast_expression
    (59) conditional_expression -> . expression LT term
    (60) conditional_expression -> . expression LE term
    (61) conditional_expression -> . expression GE term
    (62) conditional_expression -> . expression GT term
    (63) conditional_expression -> . expression EQ term
    (64) conditional_expression -> . expression NE term
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (55) term -> . factor
    (65) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 82
    PLUS            reduce using rule 47 (expression -> .)
    MINUS           reduce using rule 47 (expression -> .)
    LT              reduce using rule 47 (expression -> .)
    LE              reduce using rule 47 (expression -> .)
    GE              reduce using rule 47 (expression -> .)
    GT              reduce using rule 47 (expression -> .)
    EQ              reduce using rule 47 (expression -> .)
    NE              reduce using rule 47 (expression -> .)
    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33
    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

  ! SEMI            [ reduce using rule 47 (expression -> .) ]

    expression                     shift and go to state 83
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 27
    cast_expression                shift and go to state 28
    function_call                  shift and go to state 29
    factor                         shift and go to state 32

state 56

    (30) loop_statement -> FOR . LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement

    LPAREN          shift and go to state 84


state 57

    (32) loop_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 85


state 58

    (33) condition_statement -> IF . LPAREN expression RPAREN statement
    (34) condition_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 86


state 59

    (52) expression -> expression PLUS . term
    (55) term -> . factor
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

    term                           shift and go to state 87
    factor                         shift and go to state 32

state 60

    (53) expression -> expression MINUS . term
    (55) term -> . factor
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

    term                           shift and go to state 88
    factor                         shift and go to state 32

state 61

    (59) conditional_expression -> expression LT . term
    (55) term -> . factor
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

    term                           shift and go to state 89
    factor                         shift and go to state 32

state 62

    (60) conditional_expression -> expression LE . term
    (55) term -> . factor
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

    term                           shift and go to state 90
    factor                         shift and go to state 32

state 63

    (61) conditional_expression -> expression GE . term
    (55) term -> . factor
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

    term                           shift and go to state 91
    factor                         shift and go to state 32

state 64

    (62) conditional_expression -> expression GT . term
    (55) term -> . factor
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

    term                           shift and go to state 92
    factor                         shift and go to state 32

state 65

    (63) conditional_expression -> expression EQ . term
    (55) term -> . factor
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

    term                           shift and go to state 93
    factor                         shift and go to state 32

state 66

    (64) conditional_expression -> expression NE . term
    (55) term -> . factor
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

    term                           shift and go to state 94
    factor                         shift and go to state 32

state 67

    (46) expression -> unary_expression EQUALS . expression
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> .
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (58) conditional_expression -> . cast_expression
    (59) conditional_expression -> . expression LT term
    (60) conditional_expression -> . expression LE term
    (61) conditional_expression -> . expression GE term
    (62) conditional_expression -> . expression GT term
    (63) conditional_expression -> . expression EQ term
    (64) conditional_expression -> . expression NE term
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (55) term -> . factor
    (65) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

    PLUS            reduce using rule 47 (expression -> .)
    MINUS           reduce using rule 47 (expression -> .)
    LT              reduce using rule 47 (expression -> .)
    LE              reduce using rule 47 (expression -> .)
    GE              reduce using rule 47 (expression -> .)
    GT              reduce using rule 47 (expression -> .)
    EQ              reduce using rule 47 (expression -> .)
    NE              reduce using rule 47 (expression -> .)
    SEMI            reduce using rule 47 (expression -> .)
    RPAREN          reduce using rule 47 (expression -> .)
    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33
    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

    unary_expression               shift and go to state 26
    expression                     shift and go to state 95
    conditional_expression         shift and go to state 25
    term                           shift and go to state 27
    cast_expression                shift and go to state 28
    function_call                  shift and go to state 29
    factor                         shift and go to state 32

state 68

    (50) unary_expression -> PP unary_expression .

    EQUALS          reduce using rule 50 (unary_expression -> PP unary_expression .)
    PLUS            reduce using rule 50 (unary_expression -> PP unary_expression .)
    MINUS           reduce using rule 50 (unary_expression -> PP unary_expression .)
    LT              reduce using rule 50 (unary_expression -> PP unary_expression .)
    LE              reduce using rule 50 (unary_expression -> PP unary_expression .)
    GE              reduce using rule 50 (unary_expression -> PP unary_expression .)
    GT              reduce using rule 50 (unary_expression -> PP unary_expression .)
    EQ              reduce using rule 50 (unary_expression -> PP unary_expression .)
    NE              reduce using rule 50 (unary_expression -> PP unary_expression .)
    SEMI            reduce using rule 50 (unary_expression -> PP unary_expression .)
    RPAREN          reduce using rule 50 (unary_expression -> PP unary_expression .)


state 69

    (51) unary_expression -> MM unary_expression .

    EQUALS          reduce using rule 51 (unary_expression -> MM unary_expression .)
    PLUS            reduce using rule 51 (unary_expression -> MM unary_expression .)
    MINUS           reduce using rule 51 (unary_expression -> MM unary_expression .)
    LT              reduce using rule 51 (unary_expression -> MM unary_expression .)
    LE              reduce using rule 51 (unary_expression -> MM unary_expression .)
    GE              reduce using rule 51 (unary_expression -> MM unary_expression .)
    GT              reduce using rule 51 (unary_expression -> MM unary_expression .)
    EQ              reduce using rule 51 (unary_expression -> MM unary_expression .)
    NE              reduce using rule 51 (unary_expression -> MM unary_expression .)
    SEMI            reduce using rule 51 (unary_expression -> MM unary_expression .)
    RPAREN          reduce using rule 51 (unary_expression -> MM unary_expression .)


state 70

    (48) function_call -> ID LPAREN . expression RPAREN
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> .
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (58) conditional_expression -> . cast_expression
    (59) conditional_expression -> . expression LT term
    (60) conditional_expression -> . expression LE term
    (61) conditional_expression -> . expression GE term
    (62) conditional_expression -> . expression GT term
    (63) conditional_expression -> . expression EQ term
    (64) conditional_expression -> . expression NE term
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (55) term -> . factor
    (65) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 47 (expression -> .)
    PLUS            reduce using rule 47 (expression -> .)
    MINUS           reduce using rule 47 (expression -> .)
    LT              reduce using rule 47 (expression -> .)
    LE              reduce using rule 47 (expression -> .)
    GE              reduce using rule 47 (expression -> .)
    GT              reduce using rule 47 (expression -> .)
    EQ              reduce using rule 47 (expression -> .)
    NE              reduce using rule 47 (expression -> .)
    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33
    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

    expression                     shift and go to state 96
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 27
    cast_expression                shift and go to state 28
    function_call                  shift and go to state 29
    factor                         shift and go to state 32

state 71

    (57) factor -> LPAREN expression . RPAREN
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term
    (59) conditional_expression -> expression . LT term
    (60) conditional_expression -> expression . LE term
    (61) conditional_expression -> expression . GE term
    (62) conditional_expression -> expression . GT term
    (63) conditional_expression -> expression . EQ term
    (64) conditional_expression -> expression . NE term

    RPAREN          shift and go to state 97
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GE              shift and go to state 63
    GT              shift and go to state 64
    EQ              shift and go to state 65
    NE              shift and go to state 66


state 72

    (8) arguments -> LPAREN args RPAREN .

    LBRACE          reduce using rule 8 (arguments -> LPAREN args RPAREN .)


state 73

    (11) args -> INT ID .
    (12) args -> INT ID . COMMA INT ID

    RPAREN          reduce using rule 11 (args -> INT ID .)
    COMMA           shift and go to state 98


state 74

    (18) array_reference -> LBRACKET NUMBER RBRACKET .

    SEMI            reduce using rule 18 (array_reference -> LBRACKET NUMBER RBRACKET .)


state 75

    (35) compound_statement -> LBRACE declaration_list RBRACE .

    SEMI            reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    INCLUDE         reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    VOID            reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    INT             reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    $end            reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    LBRACE          reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    BREAK           reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    RETURN          reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    FOR             reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    IF              reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    PP              reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    MM              reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    ID              reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    NUMBER          reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    PLUS            reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    MINUS           reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    LT              reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    LE              reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    GE              reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    GT              reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    EQ              reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    NE              reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    ELSE            reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)


state 76

    (36) compound_statement -> LBRACE declaration_list statement_list . RBRACE
    (44) statement_list -> statement_list . statement
    (22) statement -> . compound_statement
    (23) statement -> . expression_statement
    (24) statement -> . jump_statement
    (25) statement -> . loop_statement
    (26) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (27) jump_statement -> . BREAK SEMI
    (28) jump_statement -> . RETURN SEMI
    (29) jump_statement -> . RETURN expression SEMI
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (32) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> .
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (58) conditional_expression -> . cast_expression
    (59) conditional_expression -> . expression LT term
    (60) conditional_expression -> . expression LE term
    (61) conditional_expression -> . expression GE term
    (62) conditional_expression -> . expression GT term
    (63) conditional_expression -> . expression EQ term
    (64) conditional_expression -> . expression NE term
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (55) term -> . factor
    (65) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 99
    LBRACE          shift and go to state 23
    SEMI            shift and go to state 46
    BREAK           shift and go to state 54
    RETURN          shift and go to state 55
    FOR             shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    PLUS            reduce using rule 47 (expression -> .)
    MINUS           reduce using rule 47 (expression -> .)
    LT              reduce using rule 47 (expression -> .)
    LE              reduce using rule 47 (expression -> .)
    GE              reduce using rule 47 (expression -> .)
    GT              reduce using rule 47 (expression -> .)
    EQ              reduce using rule 47 (expression -> .)
    NE              reduce using rule 47 (expression -> .)
    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33
    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

  ! SEMI            [ reduce using rule 47 (expression -> .) ]

    statement                      shift and go to state 79
    compound_statement             shift and go to state 47
    expression_statement           shift and go to state 48
    jump_statement                 shift and go to state 49
    loop_statement                 shift and go to state 50
    condition_statement            shift and go to state 51
    expression                     shift and go to state 53
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 27
    cast_expression                shift and go to state 28
    function_call                  shift and go to state 29
    factor                         shift and go to state 32

state 77

    (40) declaration_list -> declaration_list declaration .

    RBRACE          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    SEMI            reduce using rule 40 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 40 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 40 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 40 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 40 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 40 (declaration_list -> declaration_list declaration .)
    PP              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    MM              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    NUMBER          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 40 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 40 (declaration_list -> declaration_list declaration .)
    LT              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    LE              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    GE              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    GT              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    EQ              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    NE              reduce using rule 40 (declaration_list -> declaration_list declaration .)


state 78

    (37) compound_statement -> LBRACE statement_list RBRACE .

    SEMI            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    INCLUDE         reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    VOID            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    PP              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    MM              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LT              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LE              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    GE              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    GT              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    EQ              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    NE              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)


state 79

    (44) statement_list -> statement_list statement .

    RBRACE          reduce using rule 44 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 44 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 44 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 44 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 44 (statement_list -> statement_list statement .)
    FOR             reduce using rule 44 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 44 (statement_list -> statement_list statement .)
    IF              reduce using rule 44 (statement_list -> statement_list statement .)
    PP              reduce using rule 44 (statement_list -> statement_list statement .)
    MM              reduce using rule 44 (statement_list -> statement_list statement .)
    ID              reduce using rule 44 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 44 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 44 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 44 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 44 (statement_list -> statement_list statement .)
    LT              reduce using rule 44 (statement_list -> statement_list statement .)
    LE              reduce using rule 44 (statement_list -> statement_list statement .)
    GE              reduce using rule 44 (statement_list -> statement_list statement .)
    GT              reduce using rule 44 (statement_list -> statement_list statement .)
    EQ              reduce using rule 44 (statement_list -> statement_list statement .)
    NE              reduce using rule 44 (statement_list -> statement_list statement .)


state 80

    (42) expression_statement -> expression SEMI .

    RBRACE          reduce using rule 42 (expression_statement -> expression SEMI .)
    LBRACE          reduce using rule 42 (expression_statement -> expression SEMI .)
    SEMI            reduce using rule 42 (expression_statement -> expression SEMI .)
    BREAK           reduce using rule 42 (expression_statement -> expression SEMI .)
    RETURN          reduce using rule 42 (expression_statement -> expression SEMI .)
    FOR             reduce using rule 42 (expression_statement -> expression SEMI .)
    WHILE           reduce using rule 42 (expression_statement -> expression SEMI .)
    IF              reduce using rule 42 (expression_statement -> expression SEMI .)
    PP              reduce using rule 42 (expression_statement -> expression SEMI .)
    MM              reduce using rule 42 (expression_statement -> expression SEMI .)
    ID              reduce using rule 42 (expression_statement -> expression SEMI .)
    NUMBER          reduce using rule 42 (expression_statement -> expression SEMI .)
    LPAREN          reduce using rule 42 (expression_statement -> expression SEMI .)
    PLUS            reduce using rule 42 (expression_statement -> expression SEMI .)
    MINUS           reduce using rule 42 (expression_statement -> expression SEMI .)
    LT              reduce using rule 42 (expression_statement -> expression SEMI .)
    LE              reduce using rule 42 (expression_statement -> expression SEMI .)
    GE              reduce using rule 42 (expression_statement -> expression SEMI .)
    GT              reduce using rule 42 (expression_statement -> expression SEMI .)
    EQ              reduce using rule 42 (expression_statement -> expression SEMI .)
    NE              reduce using rule 42 (expression_statement -> expression SEMI .)
    RPAREN          reduce using rule 42 (expression_statement -> expression SEMI .)
    ELSE            reduce using rule 42 (expression_statement -> expression SEMI .)


state 81

    (27) jump_statement -> BREAK SEMI .

    RBRACE          reduce using rule 27 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 27 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 27 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 27 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 27 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 27 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 27 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 27 (jump_statement -> BREAK SEMI .)
    PP              reduce using rule 27 (jump_statement -> BREAK SEMI .)
    MM              reduce using rule 27 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 27 (jump_statement -> BREAK SEMI .)
    NUMBER          reduce using rule 27 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 27 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 27 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 27 (jump_statement -> BREAK SEMI .)
    LT              reduce using rule 27 (jump_statement -> BREAK SEMI .)
    LE              reduce using rule 27 (jump_statement -> BREAK SEMI .)
    GE              reduce using rule 27 (jump_statement -> BREAK SEMI .)
    GT              reduce using rule 27 (jump_statement -> BREAK SEMI .)
    EQ              reduce using rule 27 (jump_statement -> BREAK SEMI .)
    NE              reduce using rule 27 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 27 (jump_statement -> BREAK SEMI .)


state 82

    (28) jump_statement -> RETURN SEMI .

    RBRACE          reduce using rule 28 (jump_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 28 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 28 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 28 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 28 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 28 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 28 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 28 (jump_statement -> RETURN SEMI .)
    PP              reduce using rule 28 (jump_statement -> RETURN SEMI .)
    MM              reduce using rule 28 (jump_statement -> RETURN SEMI .)
    ID              reduce using rule 28 (jump_statement -> RETURN SEMI .)
    NUMBER          reduce using rule 28 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 28 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 28 (jump_statement -> RETURN SEMI .)
    MINUS           reduce using rule 28 (jump_statement -> RETURN SEMI .)
    LT              reduce using rule 28 (jump_statement -> RETURN SEMI .)
    LE              reduce using rule 28 (jump_statement -> RETURN SEMI .)
    GE              reduce using rule 28 (jump_statement -> RETURN SEMI .)
    GT              reduce using rule 28 (jump_statement -> RETURN SEMI .)
    EQ              reduce using rule 28 (jump_statement -> RETURN SEMI .)
    NE              reduce using rule 28 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 28 (jump_statement -> RETURN SEMI .)


state 83

    (29) jump_statement -> RETURN expression . SEMI
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term
    (59) conditional_expression -> expression . LT term
    (60) conditional_expression -> expression . LE term
    (61) conditional_expression -> expression . GE term
    (62) conditional_expression -> expression . GT term
    (63) conditional_expression -> expression . EQ term
    (64) conditional_expression -> expression . NE term

    SEMI            shift and go to state 100
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GE              shift and go to state 63
    GT              shift and go to state 64
    EQ              shift and go to state 65
    NE              shift and go to state 66


state 84

    (30) loop_statement -> FOR LPAREN . expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> .
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (58) conditional_expression -> . cast_expression
    (59) conditional_expression -> . expression LT term
    (60) conditional_expression -> . expression LE term
    (61) conditional_expression -> . expression GE term
    (62) conditional_expression -> . expression GT term
    (63) conditional_expression -> . expression EQ term
    (64) conditional_expression -> . expression NE term
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (55) term -> . factor
    (65) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 46
    PLUS            reduce using rule 47 (expression -> .)
    MINUS           reduce using rule 47 (expression -> .)
    LT              reduce using rule 47 (expression -> .)
    LE              reduce using rule 47 (expression -> .)
    GE              reduce using rule 47 (expression -> .)
    GT              reduce using rule 47 (expression -> .)
    EQ              reduce using rule 47 (expression -> .)
    NE              reduce using rule 47 (expression -> .)
    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33
    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

  ! SEMI            [ reduce using rule 47 (expression -> .) ]

    expression_statement           shift and go to state 101
    expression                     shift and go to state 53
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 27
    cast_expression                shift and go to state 28
    function_call                  shift and go to state 29
    factor                         shift and go to state 32

state 85

    (32) loop_statement -> WHILE LPAREN . expression RPAREN statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> .
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (58) conditional_expression -> . cast_expression
    (59) conditional_expression -> . expression LT term
    (60) conditional_expression -> . expression LE term
    (61) conditional_expression -> . expression GE term
    (62) conditional_expression -> . expression GT term
    (63) conditional_expression -> . expression EQ term
    (64) conditional_expression -> . expression NE term
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (55) term -> . factor
    (65) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 47 (expression -> .)
    PLUS            reduce using rule 47 (expression -> .)
    MINUS           reduce using rule 47 (expression -> .)
    LT              reduce using rule 47 (expression -> .)
    LE              reduce using rule 47 (expression -> .)
    GE              reduce using rule 47 (expression -> .)
    GT              reduce using rule 47 (expression -> .)
    EQ              reduce using rule 47 (expression -> .)
    NE              reduce using rule 47 (expression -> .)
    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33
    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

    expression                     shift and go to state 102
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 27
    cast_expression                shift and go to state 28
    function_call                  shift and go to state 29
    factor                         shift and go to state 32

state 86

    (33) condition_statement -> IF LPAREN . expression RPAREN statement
    (34) condition_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> .
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (58) conditional_expression -> . cast_expression
    (59) conditional_expression -> . expression LT term
    (60) conditional_expression -> . expression LE term
    (61) conditional_expression -> . expression GE term
    (62) conditional_expression -> . expression GT term
    (63) conditional_expression -> . expression EQ term
    (64) conditional_expression -> . expression NE term
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (55) term -> . factor
    (65) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 47 (expression -> .)
    PLUS            reduce using rule 47 (expression -> .)
    MINUS           reduce using rule 47 (expression -> .)
    LT              reduce using rule 47 (expression -> .)
    LE              reduce using rule 47 (expression -> .)
    GE              reduce using rule 47 (expression -> .)
    GT              reduce using rule 47 (expression -> .)
    EQ              reduce using rule 47 (expression -> .)
    NE              reduce using rule 47 (expression -> .)
    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33
    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

    expression                     shift and go to state 103
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 27
    cast_expression                shift and go to state 28
    function_call                  shift and go to state 29
    factor                         shift and go to state 32

state 87

    (52) expression -> expression PLUS term .

    PLUS            reduce using rule 52 (expression -> expression PLUS term .)
    MINUS           reduce using rule 52 (expression -> expression PLUS term .)
    LT              reduce using rule 52 (expression -> expression PLUS term .)
    LE              reduce using rule 52 (expression -> expression PLUS term .)
    GE              reduce using rule 52 (expression -> expression PLUS term .)
    GT              reduce using rule 52 (expression -> expression PLUS term .)
    EQ              reduce using rule 52 (expression -> expression PLUS term .)
    NE              reduce using rule 52 (expression -> expression PLUS term .)
    SEMI            reduce using rule 52 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 52 (expression -> expression PLUS term .)


state 88

    (53) expression -> expression MINUS term .

    PLUS            reduce using rule 53 (expression -> expression MINUS term .)
    MINUS           reduce using rule 53 (expression -> expression MINUS term .)
    LT              reduce using rule 53 (expression -> expression MINUS term .)
    LE              reduce using rule 53 (expression -> expression MINUS term .)
    GE              reduce using rule 53 (expression -> expression MINUS term .)
    GT              reduce using rule 53 (expression -> expression MINUS term .)
    EQ              reduce using rule 53 (expression -> expression MINUS term .)
    NE              reduce using rule 53 (expression -> expression MINUS term .)
    SEMI            reduce using rule 53 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 53 (expression -> expression MINUS term .)


state 89

    (59) conditional_expression -> expression LT term .

    PLUS            reduce using rule 59 (conditional_expression -> expression LT term .)
    MINUS           reduce using rule 59 (conditional_expression -> expression LT term .)
    LT              reduce using rule 59 (conditional_expression -> expression LT term .)
    LE              reduce using rule 59 (conditional_expression -> expression LT term .)
    GE              reduce using rule 59 (conditional_expression -> expression LT term .)
    GT              reduce using rule 59 (conditional_expression -> expression LT term .)
    EQ              reduce using rule 59 (conditional_expression -> expression LT term .)
    NE              reduce using rule 59 (conditional_expression -> expression LT term .)
    SEMI            reduce using rule 59 (conditional_expression -> expression LT term .)
    RPAREN          reduce using rule 59 (conditional_expression -> expression LT term .)


state 90

    (60) conditional_expression -> expression LE term .

    PLUS            reduce using rule 60 (conditional_expression -> expression LE term .)
    MINUS           reduce using rule 60 (conditional_expression -> expression LE term .)
    LT              reduce using rule 60 (conditional_expression -> expression LE term .)
    LE              reduce using rule 60 (conditional_expression -> expression LE term .)
    GE              reduce using rule 60 (conditional_expression -> expression LE term .)
    GT              reduce using rule 60 (conditional_expression -> expression LE term .)
    EQ              reduce using rule 60 (conditional_expression -> expression LE term .)
    NE              reduce using rule 60 (conditional_expression -> expression LE term .)
    SEMI            reduce using rule 60 (conditional_expression -> expression LE term .)
    RPAREN          reduce using rule 60 (conditional_expression -> expression LE term .)


state 91

    (61) conditional_expression -> expression GE term .

    PLUS            reduce using rule 61 (conditional_expression -> expression GE term .)
    MINUS           reduce using rule 61 (conditional_expression -> expression GE term .)
    LT              reduce using rule 61 (conditional_expression -> expression GE term .)
    LE              reduce using rule 61 (conditional_expression -> expression GE term .)
    GE              reduce using rule 61 (conditional_expression -> expression GE term .)
    GT              reduce using rule 61 (conditional_expression -> expression GE term .)
    EQ              reduce using rule 61 (conditional_expression -> expression GE term .)
    NE              reduce using rule 61 (conditional_expression -> expression GE term .)
    SEMI            reduce using rule 61 (conditional_expression -> expression GE term .)
    RPAREN          reduce using rule 61 (conditional_expression -> expression GE term .)


state 92

    (62) conditional_expression -> expression GT term .

    PLUS            reduce using rule 62 (conditional_expression -> expression GT term .)
    MINUS           reduce using rule 62 (conditional_expression -> expression GT term .)
    LT              reduce using rule 62 (conditional_expression -> expression GT term .)
    LE              reduce using rule 62 (conditional_expression -> expression GT term .)
    GE              reduce using rule 62 (conditional_expression -> expression GT term .)
    GT              reduce using rule 62 (conditional_expression -> expression GT term .)
    EQ              reduce using rule 62 (conditional_expression -> expression GT term .)
    NE              reduce using rule 62 (conditional_expression -> expression GT term .)
    SEMI            reduce using rule 62 (conditional_expression -> expression GT term .)
    RPAREN          reduce using rule 62 (conditional_expression -> expression GT term .)


state 93

    (63) conditional_expression -> expression EQ term .

    PLUS            reduce using rule 63 (conditional_expression -> expression EQ term .)
    MINUS           reduce using rule 63 (conditional_expression -> expression EQ term .)
    LT              reduce using rule 63 (conditional_expression -> expression EQ term .)
    LE              reduce using rule 63 (conditional_expression -> expression EQ term .)
    GE              reduce using rule 63 (conditional_expression -> expression EQ term .)
    GT              reduce using rule 63 (conditional_expression -> expression EQ term .)
    EQ              reduce using rule 63 (conditional_expression -> expression EQ term .)
    NE              reduce using rule 63 (conditional_expression -> expression EQ term .)
    SEMI            reduce using rule 63 (conditional_expression -> expression EQ term .)
    RPAREN          reduce using rule 63 (conditional_expression -> expression EQ term .)


state 94

    (64) conditional_expression -> expression NE term .

    PLUS            reduce using rule 64 (conditional_expression -> expression NE term .)
    MINUS           reduce using rule 64 (conditional_expression -> expression NE term .)
    LT              reduce using rule 64 (conditional_expression -> expression NE term .)
    LE              reduce using rule 64 (conditional_expression -> expression NE term .)
    GE              reduce using rule 64 (conditional_expression -> expression NE term .)
    GT              reduce using rule 64 (conditional_expression -> expression NE term .)
    EQ              reduce using rule 64 (conditional_expression -> expression NE term .)
    NE              reduce using rule 64 (conditional_expression -> expression NE term .)
    SEMI            reduce using rule 64 (conditional_expression -> expression NE term .)
    RPAREN          reduce using rule 64 (conditional_expression -> expression NE term .)


state 95

    (46) expression -> unary_expression EQUALS expression .
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term
    (59) conditional_expression -> expression . LT term
    (60) conditional_expression -> expression . LE term
    (61) conditional_expression -> expression . GE term
    (62) conditional_expression -> expression . GT term
    (63) conditional_expression -> expression . EQ term
    (64) conditional_expression -> expression . NE term

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    SEMI            reduce using rule 46 (expression -> unary_expression EQUALS expression .)
    RPAREN          reduce using rule 46 (expression -> unary_expression EQUALS expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GE              shift and go to state 63
    GT              shift and go to state 64
    EQ              shift and go to state 65
    NE              shift and go to state 66

  ! PLUS            [ reduce using rule 46 (expression -> unary_expression EQUALS expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> unary_expression EQUALS expression .) ]
  ! LT              [ reduce using rule 46 (expression -> unary_expression EQUALS expression .) ]
  ! LE              [ reduce using rule 46 (expression -> unary_expression EQUALS expression .) ]
  ! GE              [ reduce using rule 46 (expression -> unary_expression EQUALS expression .) ]
  ! GT              [ reduce using rule 46 (expression -> unary_expression EQUALS expression .) ]
  ! EQ              [ reduce using rule 46 (expression -> unary_expression EQUALS expression .) ]
  ! NE              [ reduce using rule 46 (expression -> unary_expression EQUALS expression .) ]


state 96

    (48) function_call -> ID LPAREN expression . RPAREN
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term
    (59) conditional_expression -> expression . LT term
    (60) conditional_expression -> expression . LE term
    (61) conditional_expression -> expression . GE term
    (62) conditional_expression -> expression . GT term
    (63) conditional_expression -> expression . EQ term
    (64) conditional_expression -> expression . NE term

    RPAREN          shift and go to state 104
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GE              shift and go to state 63
    GT              shift and go to state 64
    EQ              shift and go to state 65
    NE              shift and go to state 66


state 97

    (57) factor -> LPAREN expression RPAREN .

    PLUS            reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    EQ              reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 57 (factor -> LPAREN expression RPAREN .)


state 98

    (12) args -> INT ID COMMA . INT ID

    INT             shift and go to state 105


state 99

    (36) compound_statement -> LBRACE declaration_list statement_list RBRACE .

    SEMI            reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INCLUDE         reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    VOID            reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INT             reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    $end            reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RBRACE          reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LBRACE          reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BREAK           reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RETURN          reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FOR             reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    WHILE           reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    IF              reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PP              reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    MM              reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ID              reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    NUMBER          reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LPAREN          reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PLUS            reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    MINUS           reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LT              reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LE              reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    GE              reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    GT              reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    EQ              reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    NE              reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ELSE            reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)


state 100

    (29) jump_statement -> RETURN expression SEMI .

    RBRACE          reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    PP              reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    MM              reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    ID              reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    NUMBER          reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    LT              reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    LE              reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    GE              reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    GT              reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    EQ              reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    NE              reduce using rule 29 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 29 (jump_statement -> RETURN expression SEMI .)


state 101

    (30) loop_statement -> FOR LPAREN expression_statement . expression_statement expression_statement RPAREN statement
    (31) loop_statement -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> .
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (58) conditional_expression -> . cast_expression
    (59) conditional_expression -> . expression LT term
    (60) conditional_expression -> . expression LE term
    (61) conditional_expression -> . expression GE term
    (62) conditional_expression -> . expression GT term
    (63) conditional_expression -> . expression EQ term
    (64) conditional_expression -> . expression NE term
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (55) term -> . factor
    (65) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 46
    PLUS            reduce using rule 47 (expression -> .)
    MINUS           reduce using rule 47 (expression -> .)
    LT              reduce using rule 47 (expression -> .)
    LE              reduce using rule 47 (expression -> .)
    GE              reduce using rule 47 (expression -> .)
    GT              reduce using rule 47 (expression -> .)
    EQ              reduce using rule 47 (expression -> .)
    NE              reduce using rule 47 (expression -> .)
    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33
    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

  ! SEMI            [ reduce using rule 47 (expression -> .) ]

    expression_statement           shift and go to state 106
    expression                     shift and go to state 53
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 27
    cast_expression                shift and go to state 28
    function_call                  shift and go to state 29
    factor                         shift and go to state 32

state 102

    (32) loop_statement -> WHILE LPAREN expression . RPAREN statement
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term
    (59) conditional_expression -> expression . LT term
    (60) conditional_expression -> expression . LE term
    (61) conditional_expression -> expression . GE term
    (62) conditional_expression -> expression . GT term
    (63) conditional_expression -> expression . EQ term
    (64) conditional_expression -> expression . NE term

    RPAREN          shift and go to state 107
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GE              shift and go to state 63
    GT              shift and go to state 64
    EQ              shift and go to state 65
    NE              shift and go to state 66


state 103

    (33) condition_statement -> IF LPAREN expression . RPAREN statement
    (34) condition_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term
    (59) conditional_expression -> expression . LT term
    (60) conditional_expression -> expression . LE term
    (61) conditional_expression -> expression . GE term
    (62) conditional_expression -> expression . GT term
    (63) conditional_expression -> expression . EQ term
    (64) conditional_expression -> expression . NE term

    RPAREN          shift and go to state 108
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GE              shift and go to state 63
    GT              shift and go to state 64
    EQ              shift and go to state 65
    NE              shift and go to state 66


state 104

    (48) function_call -> ID LPAREN expression RPAREN .

    EQUALS          reduce using rule 48 (function_call -> ID LPAREN expression RPAREN .)
    PLUS            reduce using rule 48 (function_call -> ID LPAREN expression RPAREN .)
    MINUS           reduce using rule 48 (function_call -> ID LPAREN expression RPAREN .)
    LT              reduce using rule 48 (function_call -> ID LPAREN expression RPAREN .)
    LE              reduce using rule 48 (function_call -> ID LPAREN expression RPAREN .)
    GE              reduce using rule 48 (function_call -> ID LPAREN expression RPAREN .)
    GT              reduce using rule 48 (function_call -> ID LPAREN expression RPAREN .)
    EQ              reduce using rule 48 (function_call -> ID LPAREN expression RPAREN .)
    NE              reduce using rule 48 (function_call -> ID LPAREN expression RPAREN .)
    SEMI            reduce using rule 48 (function_call -> ID LPAREN expression RPAREN .)
    RPAREN          reduce using rule 48 (function_call -> ID LPAREN expression RPAREN .)


state 105

    (12) args -> INT ID COMMA INT . ID

    ID              shift and go to state 109


state 106

    (30) loop_statement -> FOR LPAREN expression_statement expression_statement . expression_statement RPAREN statement
    (31) loop_statement -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> .
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (58) conditional_expression -> . cast_expression
    (59) conditional_expression -> . expression LT term
    (60) conditional_expression -> . expression LE term
    (61) conditional_expression -> . expression GE term
    (62) conditional_expression -> . expression GT term
    (63) conditional_expression -> . expression EQ term
    (64) conditional_expression -> . expression NE term
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (55) term -> . factor
    (65) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 46
    RPAREN          reduce using rule 47 (expression -> .)
    PLUS            reduce using rule 47 (expression -> .)
    MINUS           reduce using rule 47 (expression -> .)
    LT              reduce using rule 47 (expression -> .)
    LE              reduce using rule 47 (expression -> .)
    GE              reduce using rule 47 (expression -> .)
    GT              reduce using rule 47 (expression -> .)
    EQ              reduce using rule 47 (expression -> .)
    NE              reduce using rule 47 (expression -> .)
    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33
    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

  ! SEMI            [ reduce using rule 47 (expression -> .) ]

    expression_statement           shift and go to state 110
    expression                     shift and go to state 111
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 27
    cast_expression                shift and go to state 28
    function_call                  shift and go to state 29
    factor                         shift and go to state 32

state 107

    (32) loop_statement -> WHILE LPAREN expression RPAREN . statement
    (22) statement -> . compound_statement
    (23) statement -> . expression_statement
    (24) statement -> . jump_statement
    (25) statement -> . loop_statement
    (26) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (27) jump_statement -> . BREAK SEMI
    (28) jump_statement -> . RETURN SEMI
    (29) jump_statement -> . RETURN expression SEMI
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (32) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> .
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (58) conditional_expression -> . cast_expression
    (59) conditional_expression -> . expression LT term
    (60) conditional_expression -> . expression LE term
    (61) conditional_expression -> . expression GE term
    (62) conditional_expression -> . expression GT term
    (63) conditional_expression -> . expression EQ term
    (64) conditional_expression -> . expression NE term
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (55) term -> . factor
    (65) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for SEMI resolved as shift
    LBRACE          shift and go to state 23
    SEMI            shift and go to state 46
    BREAK           shift and go to state 54
    RETURN          shift and go to state 55
    FOR             shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    PLUS            reduce using rule 47 (expression -> .)
    MINUS           reduce using rule 47 (expression -> .)
    LT              reduce using rule 47 (expression -> .)
    LE              reduce using rule 47 (expression -> .)
    GE              reduce using rule 47 (expression -> .)
    GT              reduce using rule 47 (expression -> .)
    EQ              reduce using rule 47 (expression -> .)
    NE              reduce using rule 47 (expression -> .)
    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33
    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

  ! SEMI            [ reduce using rule 47 (expression -> .) ]

    expression                     shift and go to state 53
    statement                      shift and go to state 112
    compound_statement             shift and go to state 47
    expression_statement           shift and go to state 48
    jump_statement                 shift and go to state 49
    loop_statement                 shift and go to state 50
    condition_statement            shift and go to state 51
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 27
    cast_expression                shift and go to state 28
    function_call                  shift and go to state 29
    factor                         shift and go to state 32

state 108

    (33) condition_statement -> IF LPAREN expression RPAREN . statement
    (34) condition_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (22) statement -> . compound_statement
    (23) statement -> . expression_statement
    (24) statement -> . jump_statement
    (25) statement -> . loop_statement
    (26) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (27) jump_statement -> . BREAK SEMI
    (28) jump_statement -> . RETURN SEMI
    (29) jump_statement -> . RETURN expression SEMI
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (32) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> .
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (58) conditional_expression -> . cast_expression
    (59) conditional_expression -> . expression LT term
    (60) conditional_expression -> . expression LE term
    (61) conditional_expression -> . expression GE term
    (62) conditional_expression -> . expression GT term
    (63) conditional_expression -> . expression EQ term
    (64) conditional_expression -> . expression NE term
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (55) term -> . factor
    (65) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for SEMI resolved as shift
    LBRACE          shift and go to state 23
    SEMI            shift and go to state 46
    BREAK           shift and go to state 54
    RETURN          shift and go to state 55
    FOR             shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    PLUS            reduce using rule 47 (expression -> .)
    MINUS           reduce using rule 47 (expression -> .)
    LT              reduce using rule 47 (expression -> .)
    LE              reduce using rule 47 (expression -> .)
    GE              reduce using rule 47 (expression -> .)
    GT              reduce using rule 47 (expression -> .)
    EQ              reduce using rule 47 (expression -> .)
    NE              reduce using rule 47 (expression -> .)
    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33
    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

  ! SEMI            [ reduce using rule 47 (expression -> .) ]

    expression                     shift and go to state 53
    statement                      shift and go to state 113
    compound_statement             shift and go to state 47
    expression_statement           shift and go to state 48
    jump_statement                 shift and go to state 49
    loop_statement                 shift and go to state 50
    condition_statement            shift and go to state 51
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 27
    cast_expression                shift and go to state 28
    function_call                  shift and go to state 29
    factor                         shift and go to state 32

state 109

    (12) args -> INT ID COMMA INT ID .

    RPAREN          reduce using rule 12 (args -> INT ID COMMA INT ID .)


state 110

    (30) loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement . RPAREN statement

    RPAREN          shift and go to state 114


state 111

    (31) loop_statement -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement
    (42) expression_statement -> expression . SEMI
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term
    (59) conditional_expression -> expression . LT term
    (60) conditional_expression -> expression . LE term
    (61) conditional_expression -> expression . GE term
    (62) conditional_expression -> expression . GT term
    (63) conditional_expression -> expression . EQ term
    (64) conditional_expression -> expression . NE term

    RPAREN          shift and go to state 115
    SEMI            shift and go to state 80
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    LT              shift and go to state 61
    LE              shift and go to state 62
    GE              shift and go to state 63
    GT              shift and go to state 64
    EQ              shift and go to state 65
    NE              shift and go to state 66


state 112

    (32) loop_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    PP              reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    MM              reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    LT              reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    LE              reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    GE              reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    GT              reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    EQ              reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    NE              reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 32 (loop_statement -> WHILE LPAREN expression RPAREN statement .)


state 113

    (33) condition_statement -> IF LPAREN expression RPAREN statement .
    (34) condition_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    PP              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    MM              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    LT              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    LE              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    GE              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    GT              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    EQ              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    NE              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 116

  ! ELSE            [ reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .) ]


state 114

    (30) loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN . statement
    (22) statement -> . compound_statement
    (23) statement -> . expression_statement
    (24) statement -> . jump_statement
    (25) statement -> . loop_statement
    (26) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (27) jump_statement -> . BREAK SEMI
    (28) jump_statement -> . RETURN SEMI
    (29) jump_statement -> . RETURN expression SEMI
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (32) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> .
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (58) conditional_expression -> . cast_expression
    (59) conditional_expression -> . expression LT term
    (60) conditional_expression -> . expression LE term
    (61) conditional_expression -> . expression GE term
    (62) conditional_expression -> . expression GT term
    (63) conditional_expression -> . expression EQ term
    (64) conditional_expression -> . expression NE term
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (55) term -> . factor
    (65) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for SEMI resolved as shift
    LBRACE          shift and go to state 23
    SEMI            shift and go to state 46
    BREAK           shift and go to state 54
    RETURN          shift and go to state 55
    FOR             shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    PLUS            reduce using rule 47 (expression -> .)
    MINUS           reduce using rule 47 (expression -> .)
    LT              reduce using rule 47 (expression -> .)
    LE              reduce using rule 47 (expression -> .)
    GE              reduce using rule 47 (expression -> .)
    GT              reduce using rule 47 (expression -> .)
    EQ              reduce using rule 47 (expression -> .)
    NE              reduce using rule 47 (expression -> .)
    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33
    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

  ! SEMI            [ reduce using rule 47 (expression -> .) ]

    expression_statement           shift and go to state 48
    statement                      shift and go to state 117
    compound_statement             shift and go to state 47
    jump_statement                 shift and go to state 49
    loop_statement                 shift and go to state 50
    condition_statement            shift and go to state 51
    expression                     shift and go to state 53
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 27
    cast_expression                shift and go to state 28
    function_call                  shift and go to state 29
    factor                         shift and go to state 32

state 115

    (31) loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement
    (22) statement -> . compound_statement
    (23) statement -> . expression_statement
    (24) statement -> . jump_statement
    (25) statement -> . loop_statement
    (26) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (27) jump_statement -> . BREAK SEMI
    (28) jump_statement -> . RETURN SEMI
    (29) jump_statement -> . RETURN expression SEMI
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (32) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> .
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (58) conditional_expression -> . cast_expression
    (59) conditional_expression -> . expression LT term
    (60) conditional_expression -> . expression LE term
    (61) conditional_expression -> . expression GE term
    (62) conditional_expression -> . expression GT term
    (63) conditional_expression -> . expression EQ term
    (64) conditional_expression -> . expression NE term
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (55) term -> . factor
    (65) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for SEMI resolved as shift
    LBRACE          shift and go to state 23
    SEMI            shift and go to state 46
    BREAK           shift and go to state 54
    RETURN          shift and go to state 55
    FOR             shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    PLUS            reduce using rule 47 (expression -> .)
    MINUS           reduce using rule 47 (expression -> .)
    LT              reduce using rule 47 (expression -> .)
    LE              reduce using rule 47 (expression -> .)
    GE              reduce using rule 47 (expression -> .)
    GT              reduce using rule 47 (expression -> .)
    EQ              reduce using rule 47 (expression -> .)
    NE              reduce using rule 47 (expression -> .)
    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33
    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

  ! SEMI            [ reduce using rule 47 (expression -> .) ]

    expression_statement           shift and go to state 48
    expression                     shift and go to state 53
    statement                      shift and go to state 118
    compound_statement             shift and go to state 47
    jump_statement                 shift and go to state 49
    loop_statement                 shift and go to state 50
    condition_statement            shift and go to state 51
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 27
    cast_expression                shift and go to state 28
    function_call                  shift and go to state 29
    factor                         shift and go to state 32

state 116

    (34) condition_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (22) statement -> . compound_statement
    (23) statement -> . expression_statement
    (24) statement -> . jump_statement
    (25) statement -> . loop_statement
    (26) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (27) jump_statement -> . BREAK SEMI
    (28) jump_statement -> . RETURN SEMI
    (29) jump_statement -> . RETURN expression SEMI
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (31) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (32) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> .
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (58) conditional_expression -> . cast_expression
    (59) conditional_expression -> . expression LT term
    (60) conditional_expression -> . expression LE term
    (61) conditional_expression -> . expression GE term
    (62) conditional_expression -> . expression GT term
    (63) conditional_expression -> . expression EQ term
    (64) conditional_expression -> . expression NE term
    (49) unary_expression -> . function_call
    (50) unary_expression -> . PP unary_expression
    (51) unary_expression -> . MM unary_expression
    (55) term -> . factor
    (65) cast_expression -> . unary_expression
    (48) function_call -> . ID LPAREN expression RPAREN
    (56) factor -> . NUMBER
    (57) factor -> . LPAREN expression RPAREN

  ! shift/reduce conflict for SEMI resolved as shift
    LBRACE          shift and go to state 23
    SEMI            shift and go to state 46
    BREAK           shift and go to state 54
    RETURN          shift and go to state 55
    FOR             shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    PLUS            reduce using rule 47 (expression -> .)
    MINUS           reduce using rule 47 (expression -> .)
    LT              reduce using rule 47 (expression -> .)
    LE              reduce using rule 47 (expression -> .)
    GE              reduce using rule 47 (expression -> .)
    GT              reduce using rule 47 (expression -> .)
    EQ              reduce using rule 47 (expression -> .)
    NE              reduce using rule 47 (expression -> .)
    PP              shift and go to state 30
    MM              shift and go to state 31
    ID              shift and go to state 33
    NUMBER          shift and go to state 35
    LPAREN          shift and go to state 34

  ! SEMI            [ reduce using rule 47 (expression -> .) ]

    expression                     shift and go to state 53
    statement                      shift and go to state 119
    compound_statement             shift and go to state 47
    expression_statement           shift and go to state 48
    jump_statement                 shift and go to state 49
    loop_statement                 shift and go to state 50
    condition_statement            shift and go to state 51
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 27
    cast_expression                shift and go to state 28
    function_call                  shift and go to state 29
    factor                         shift and go to state 32

state 117

    (30) loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .

    RBRACE          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    LBRACE          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    SEMI            reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    BREAK           reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    RETURN          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    FOR             reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    WHILE           reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    IF              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    PP              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    MM              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    ID              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    NUMBER          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    LPAREN          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    PLUS            reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    MINUS           reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    LT              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    LE              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    GE              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    GT              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    EQ              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    NE              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    ELSE            reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)


state 118

    (31) loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .

    RBRACE          reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LBRACE          reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SEMI            reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FOR             reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IF              reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    PP              reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MM              reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ID              reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    NUMBER          reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    PLUS            reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MINUS           reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LT              reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LE              reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    GE              reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    GT              reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    EQ              reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    NE              reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 31 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)


state 119

    (34) condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PP              reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MM              reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LT              reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LE              reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GE              reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GT              reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    EQ              reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NE              reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 34 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMI in state 23 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 41 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 43 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 55 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 76 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 95 resolved as shift
WARNING: shift/reduce conflict for LT in state 95 resolved as shift
WARNING: shift/reduce conflict for LE in state 95 resolved as shift
WARNING: shift/reduce conflict for GE in state 95 resolved as shift
WARNING: shift/reduce conflict for GT in state 95 resolved as shift
WARNING: shift/reduce conflict for EQ in state 95 resolved as shift
WARNING: shift/reduce conflict for NE in state 95 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 101 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 106 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 107 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 108 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 113 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 114 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 115 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 116 resolved as shift
