Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DIVIDE
    NOT
    OR

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> include_header
Rule 4     empty -> <empty>
Rule 5     include_header -> INCLUDE HEADER
Rule 6     external_declaration -> function_definition
Rule 7     function_definition -> id_declaration arguments compound_statement
Rule 8     arguments -> LPAREN args RPAREN
Rule 9     args -> empty
Rule 10    args -> VOID
Rule 11    args -> INT ID
Rule 12    args -> INT ID COMMA INT ID
Rule 13    external_declaration -> declaration
Rule 14    declaration -> init_declaration SEMI
Rule 15    init_declaration -> id_declaration
Rule 16    init_declaration -> id_declaration LBRACKET NUMBER RBRACKET
Rule 17    init_declaration -> id_declaration EQUALS expression
Rule 18    id_declaration -> VOID ID
Rule 19    id_declaration -> INT ID
Rule 20    external_declaration -> SEMI
Rule 21    statement -> compound_statement
Rule 22    statement -> expression_statement
Rule 23    statement -> jump_statement
Rule 24    statement -> loop_statement
Rule 25    statement -> condition_statement
Rule 26    jump_statement -> BREAK SEMI
Rule 27    jump_statement -> RETURN SEMI
Rule 28    jump_statement -> RETURN expression SEMI
Rule 29    loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
Rule 30    loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement
Rule 31    loop_statement -> WHILE LPAREN expression RPAREN statement
Rule 32    condition_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 33    condition_statement -> IF LPAREN expression RPAREN statement
Rule 34    condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN statement
Rule 35    condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement
Rule 36    compound_statement -> LBRACE declaration_list RBRACE
Rule 37    compound_statement -> LBRACE declaration_list statement_list RBRACE
Rule 38    compound_statement -> LBRACE statement_list RBRACE
Rule 39    compound_statement -> LBRACE RBRACE
Rule 40    declaration_list -> declaration
Rule 41    declaration_list -> declaration_list declaration
Rule 42    expression_statement -> SEMI
Rule 43    expression_statement -> expression SEMI
Rule 44    statement_list -> statement
Rule 45    statement_list -> statement_list statement
Rule 46    expression -> conditional_expression
Rule 47    expression -> unary_expression EQUALS expression
Rule 48    expression -> STRING
Rule 49    temp -> LNOT unary_expression
Rule 50    term -> temp
Rule 51    function_call -> ID LPAREN expression_list RPAREN
Rule 52    function_call -> ID LPAREN RPAREN
Rule 53    expression_list -> expression
Rule 54    expression_list -> expression_list COMMA expression
Rule 55    unary_expression -> function_call
Rule 56    expression -> PP unary_expression
Rule 57    expression -> MM unary_expression
Rule 58    expression -> unary_expression PP
Rule 59    expression -> unary_expression MM
Rule 60    unary_expression -> AND term
Rule 61    term -> ID
Rule 62    term -> ID LBRACKET NUMBER RBRACKET
Rule 63    term -> ID LBRACKET ID RBRACKET
Rule 64    unary_expression -> term
Rule 65    term -> factor
Rule 66    factor -> NUMBER
Rule 67    factor -> LPAREN expression RPAREN
Rule 68    conditional_expression -> cast_expression
Rule 69    conditional_expression -> unary_expression LT term
Rule 70    conditional_expression -> unary_expression LE term
Rule 71    conditional_expression -> unary_expression GE term
Rule 72    conditional_expression -> unary_expression GT term
Rule 73    conditional_expression -> unary_expression EQ term
Rule 74    conditional_expression -> unary_expression NE term
Rule 75    conditional_expression -> unary_expression AND term
Rule 76    conditional_expression -> unary_expression LAND term
Rule 77    conditional_expression -> unary_expression PLUS term
Rule 78    conditional_expression -> unary_expression TIMES term
Rule 79    conditional_expression -> unary_expression MOD term
Rule 80    conditional_expression -> unary_expression MINUS term
Rule 81    cast_expression -> unary_expression

Terminals, with rules where they appear

AND                  : 60 75
BREAK                : 26
COMMA                : 12 54
DIVIDE               : 
ELSE                 : 32 35
EQ                   : 34 73
EQUALS               : 17 47
FOR                  : 29 30
GE                   : 71
GT                   : 72
HEADER               : 5
ID                   : 11 12 12 18 19 34 34 51 52 61 62 63 63
IF                   : 32 33 34 35
INCLUDE              : 5
INT                  : 11 12 12 19
LAND                 : 76
LBRACE               : 36 37 38 39
LBRACKET             : 16 62 63
LE                   : 70
LNOT                 : 49
LOR                  : 35
LPAREN               : 8 29 30 31 32 33 34 35 51 52 67
LT                   : 69
MINUS                : 80
MM                   : 57 59
MOD                  : 34 79
NE                   : 74
NOT                  : 
NUMBER               : 16 34 62 66
OR                   : 
PLUS                 : 77
PP                   : 56 58
RBRACE               : 36 37 38 39
RBRACKET             : 16 62 63
RETURN               : 27 28
RPAREN               : 8 29 30 31 32 33 34 35 51 52 67
SEMI                 : 14 20 26 27 28 42 43
STRING               : 48
TIMES                : 78
VOID                 : 10 18
WHILE                : 31
error                : 

Nonterminals, with rules where they appear

args                 : 8
arguments            : 7
cast_expression      : 68
compound_statement   : 7 21
condition_statement  : 25
conditional_expression : 46
declaration          : 13 40 41
declaration_list     : 36 37 41
empty                : 9
expression           : 17 28 30 31 32 33 35 35 43 47 53 54 67
expression_list      : 51 54
expression_statement : 22 29 29 29 30 30
external_declaration : 1 2
factor               : 65
function_call        : 55
function_definition  : 6
id_declaration       : 7 15 16 17
include_header       : 3
init_declaration     : 14
jump_statement       : 23
loop_statement       : 24
statement            : 29 30 31 32 32 33 34 35 35 44 45
statement_list       : 37 38 45
temp                 : 50
term                 : 60 64 69 70 71 72 73 74 75 76 77 78 79 80
translation_unit     : 2 0
unary_expression     : 47 49 56 57 58 59 69 70 71 72 73 74 75 76 77 78 79 80 81

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . include_header
    (6) external_declaration -> . function_definition
    (13) external_declaration -> . declaration
    (20) external_declaration -> . SEMI
    (5) include_header -> . INCLUDE HEADER
    (7) function_definition -> . id_declaration arguments compound_statement
    (14) declaration -> . init_declaration SEMI
    (18) id_declaration -> . VOID ID
    (19) id_declaration -> . INT ID
    (15) init_declaration -> . id_declaration
    (16) init_declaration -> . id_declaration LBRACKET NUMBER RBRACKET
    (17) init_declaration -> . id_declaration EQUALS expression

    SEMI            shift and go to state 6
    INCLUDE         shift and go to state 7
    VOID            shift and go to state 10
    INT             shift and go to state 11

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    include_header                 shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    id_declaration                 shift and go to state 8
    init_declaration               shift and go to state 9

state 1

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . include_header
    (6) external_declaration -> . function_definition
    (13) external_declaration -> . declaration
    (20) external_declaration -> . SEMI
    (5) include_header -> . INCLUDE HEADER
    (7) function_definition -> . id_declaration arguments compound_statement
    (14) declaration -> . init_declaration SEMI
    (18) id_declaration -> . VOID ID
    (19) id_declaration -> . INT ID
    (15) init_declaration -> . id_declaration
    (16) init_declaration -> . id_declaration LBRACKET NUMBER RBRACKET
    (17) init_declaration -> . id_declaration EQUALS expression

    SEMI            shift and go to state 6
    INCLUDE         shift and go to state 7
    VOID            shift and go to state 10
    INT             shift and go to state 11

    external_declaration           shift and go to state 12
    include_header                 shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    id_declaration                 shift and go to state 8
    init_declaration               shift and go to state 9

state 2

    (1) translation_unit -> external_declaration .

    SEMI            reduce using rule 1 (translation_unit -> external_declaration .)
    INCLUDE         reduce using rule 1 (translation_unit -> external_declaration .)
    VOID            reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)


state 3

    (3) external_declaration -> include_header .

    SEMI            reduce using rule 3 (external_declaration -> include_header .)
    INCLUDE         reduce using rule 3 (external_declaration -> include_header .)
    VOID            reduce using rule 3 (external_declaration -> include_header .)
    INT             reduce using rule 3 (external_declaration -> include_header .)
    $end            reduce using rule 3 (external_declaration -> include_header .)


state 4

    (6) external_declaration -> function_definition .

    SEMI            reduce using rule 6 (external_declaration -> function_definition .)
    INCLUDE         reduce using rule 6 (external_declaration -> function_definition .)
    VOID            reduce using rule 6 (external_declaration -> function_definition .)
    INT             reduce using rule 6 (external_declaration -> function_definition .)
    $end            reduce using rule 6 (external_declaration -> function_definition .)


state 5

    (13) external_declaration -> declaration .

    SEMI            reduce using rule 13 (external_declaration -> declaration .)
    INCLUDE         reduce using rule 13 (external_declaration -> declaration .)
    VOID            reduce using rule 13 (external_declaration -> declaration .)
    INT             reduce using rule 13 (external_declaration -> declaration .)
    $end            reduce using rule 13 (external_declaration -> declaration .)


state 6

    (20) external_declaration -> SEMI .

    SEMI            reduce using rule 20 (external_declaration -> SEMI .)
    INCLUDE         reduce using rule 20 (external_declaration -> SEMI .)
    VOID            reduce using rule 20 (external_declaration -> SEMI .)
    INT             reduce using rule 20 (external_declaration -> SEMI .)
    $end            reduce using rule 20 (external_declaration -> SEMI .)


state 7

    (5) include_header -> INCLUDE . HEADER

    HEADER          shift and go to state 13


state 8

    (7) function_definition -> id_declaration . arguments compound_statement
    (15) init_declaration -> id_declaration .
    (16) init_declaration -> id_declaration . LBRACKET NUMBER RBRACKET
    (17) init_declaration -> id_declaration . EQUALS expression
    (8) arguments -> . LPAREN args RPAREN

    SEMI            reduce using rule 15 (init_declaration -> id_declaration .)
    LBRACKET        shift and go to state 15
    EQUALS          shift and go to state 16
    LPAREN          shift and go to state 17

    arguments                      shift and go to state 14

state 9

    (14) declaration -> init_declaration . SEMI

    SEMI            shift and go to state 18


state 10

    (18) id_declaration -> VOID . ID

    ID              shift and go to state 19


state 11

    (19) id_declaration -> INT . ID

    ID              shift and go to state 20


state 12

    (2) translation_unit -> translation_unit external_declaration .

    SEMI            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INCLUDE         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 13

    (5) include_header -> INCLUDE HEADER .

    SEMI            reduce using rule 5 (include_header -> INCLUDE HEADER .)
    INCLUDE         reduce using rule 5 (include_header -> INCLUDE HEADER .)
    VOID            reduce using rule 5 (include_header -> INCLUDE HEADER .)
    INT             reduce using rule 5 (include_header -> INCLUDE HEADER .)
    $end            reduce using rule 5 (include_header -> INCLUDE HEADER .)


state 14

    (7) function_definition -> id_declaration arguments . compound_statement
    (36) compound_statement -> . LBRACE declaration_list RBRACE
    (37) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (38) compound_statement -> . LBRACE statement_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE

    LBRACE          shift and go to state 22

    compound_statement             shift and go to state 21

state 15

    (16) init_declaration -> id_declaration LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 23


state 16

    (17) init_declaration -> id_declaration EQUALS . expression
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 24
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 17

    (8) arguments -> LPAREN . args RPAREN
    (9) args -> . empty
    (10) args -> . VOID
    (11) args -> . INT ID
    (12) args -> . INT ID COMMA INT ID
    (4) empty -> .

    VOID            shift and go to state 42
    INT             shift and go to state 43
    RPAREN          reduce using rule 4 (empty -> .)

    args                           shift and go to state 40
    empty                          shift and go to state 41

state 18

    (14) declaration -> init_declaration SEMI .

    SEMI            reduce using rule 14 (declaration -> init_declaration SEMI .)
    INCLUDE         reduce using rule 14 (declaration -> init_declaration SEMI .)
    VOID            reduce using rule 14 (declaration -> init_declaration SEMI .)
    INT             reduce using rule 14 (declaration -> init_declaration SEMI .)
    $end            reduce using rule 14 (declaration -> init_declaration SEMI .)
    RBRACE          reduce using rule 14 (declaration -> init_declaration SEMI .)
    LBRACE          reduce using rule 14 (declaration -> init_declaration SEMI .)
    BREAK           reduce using rule 14 (declaration -> init_declaration SEMI .)
    RETURN          reduce using rule 14 (declaration -> init_declaration SEMI .)
    FOR             reduce using rule 14 (declaration -> init_declaration SEMI .)
    WHILE           reduce using rule 14 (declaration -> init_declaration SEMI .)
    IF              reduce using rule 14 (declaration -> init_declaration SEMI .)
    STRING          reduce using rule 14 (declaration -> init_declaration SEMI .)
    PP              reduce using rule 14 (declaration -> init_declaration SEMI .)
    MM              reduce using rule 14 (declaration -> init_declaration SEMI .)
    AND             reduce using rule 14 (declaration -> init_declaration SEMI .)
    ID              reduce using rule 14 (declaration -> init_declaration SEMI .)
    LNOT            reduce using rule 14 (declaration -> init_declaration SEMI .)
    NUMBER          reduce using rule 14 (declaration -> init_declaration SEMI .)
    LPAREN          reduce using rule 14 (declaration -> init_declaration SEMI .)


state 19

    (18) id_declaration -> VOID ID .

    LBRACKET        reduce using rule 18 (id_declaration -> VOID ID .)
    EQUALS          reduce using rule 18 (id_declaration -> VOID ID .)
    LPAREN          reduce using rule 18 (id_declaration -> VOID ID .)
    SEMI            reduce using rule 18 (id_declaration -> VOID ID .)


state 20

    (19) id_declaration -> INT ID .

    LBRACKET        reduce using rule 19 (id_declaration -> INT ID .)
    EQUALS          reduce using rule 19 (id_declaration -> INT ID .)
    LPAREN          reduce using rule 19 (id_declaration -> INT ID .)
    SEMI            reduce using rule 19 (id_declaration -> INT ID .)


state 21

    (7) function_definition -> id_declaration arguments compound_statement .

    SEMI            reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)
    INCLUDE         reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)
    VOID            reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)
    INT             reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)
    $end            reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)


state 22

    (36) compound_statement -> LBRACE . declaration_list RBRACE
    (37) compound_statement -> LBRACE . declaration_list statement_list RBRACE
    (38) compound_statement -> LBRACE . statement_list RBRACE
    (39) compound_statement -> LBRACE . RBRACE
    (40) declaration_list -> . declaration
    (41) declaration_list -> . declaration_list declaration
    (44) statement_list -> . statement
    (45) statement_list -> . statement_list statement
    (14) declaration -> . init_declaration SEMI
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (15) init_declaration -> . id_declaration
    (16) init_declaration -> . id_declaration LBRACKET NUMBER RBRACKET
    (17) init_declaration -> . id_declaration EQUALS expression
    (36) compound_statement -> . LBRACE declaration_list RBRACE
    (37) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (38) compound_statement -> . LBRACE statement_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (42) expression_statement -> . SEMI
    (43) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN ID MOD ID EQ NUMBER RPAREN statement
    (35) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (18) id_declaration -> . VOID ID
    (19) id_declaration -> . INT ID
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 45
    LBRACE          shift and go to state 22
    SEMI            shift and go to state 49
    BREAK           shift and go to state 57
    RETURN          shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    VOID            shift and go to state 10
    INT             shift and go to state 11
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    declaration_list               shift and go to state 44
    statement_list                 shift and go to state 46
    declaration                    shift and go to state 47
    statement                      shift and go to state 48
    init_declaration               shift and go to state 9
    compound_statement             shift and go to state 50
    expression_statement           shift and go to state 51
    jump_statement                 shift and go to state 52
    loop_statement                 shift and go to state 53
    condition_statement            shift and go to state 54
    id_declaration                 shift and go to state 55
    expression                     shift and go to state 56
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 23

    (16) init_declaration -> id_declaration LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 62


state 24

    (17) init_declaration -> id_declaration EQUALS expression .

    SEMI            reduce using rule 17 (init_declaration -> id_declaration EQUALS expression .)


state 25

    (46) expression -> conditional_expression .

    SEMI            reduce using rule 46 (expression -> conditional_expression .)
    RPAREN          reduce using rule 46 (expression -> conditional_expression .)
    COMMA           reduce using rule 46 (expression -> conditional_expression .)
    LOR             reduce using rule 46 (expression -> conditional_expression .)


state 26

    (47) expression -> unary_expression . EQUALS expression
    (58) expression -> unary_expression . PP
    (59) expression -> unary_expression . MM
    (69) conditional_expression -> unary_expression . LT term
    (70) conditional_expression -> unary_expression . LE term
    (71) conditional_expression -> unary_expression . GE term
    (72) conditional_expression -> unary_expression . GT term
    (73) conditional_expression -> unary_expression . EQ term
    (74) conditional_expression -> unary_expression . NE term
    (75) conditional_expression -> unary_expression . AND term
    (76) conditional_expression -> unary_expression . LAND term
    (77) conditional_expression -> unary_expression . PLUS term
    (78) conditional_expression -> unary_expression . TIMES term
    (79) conditional_expression -> unary_expression . MOD term
    (80) conditional_expression -> unary_expression . MINUS term
    (81) cast_expression -> unary_expression .

    EQUALS          shift and go to state 63
    PP              shift and go to state 64
    MM              shift and go to state 65
    LT              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68
    GT              shift and go to state 69
    EQ              shift and go to state 70
    NE              shift and go to state 71
    AND             shift and go to state 72
    LAND            shift and go to state 73
    PLUS            shift and go to state 74
    TIMES           shift and go to state 75
    MOD             shift and go to state 76
    MINUS           shift and go to state 77
    SEMI            reduce using rule 81 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 81 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 81 (cast_expression -> unary_expression .)
    LOR             reduce using rule 81 (cast_expression -> unary_expression .)


state 27

    (48) expression -> STRING .

    SEMI            reduce using rule 48 (expression -> STRING .)
    RPAREN          reduce using rule 48 (expression -> STRING .)
    COMMA           reduce using rule 48 (expression -> STRING .)
    LOR             reduce using rule 48 (expression -> STRING .)


state 28

    (56) expression -> PP . unary_expression
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    unary_expression               shift and go to state 78
    function_call                  shift and go to state 33
    term                           shift and go to state 31
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 29

    (57) expression -> MM . unary_expression
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    unary_expression               shift and go to state 79
    function_call                  shift and go to state 33
    term                           shift and go to state 31
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 30

    (68) conditional_expression -> cast_expression .

    SEMI            reduce using rule 68 (conditional_expression -> cast_expression .)
    RPAREN          reduce using rule 68 (conditional_expression -> cast_expression .)
    COMMA           reduce using rule 68 (conditional_expression -> cast_expression .)
    LOR             reduce using rule 68 (conditional_expression -> cast_expression .)


state 31

    (64) unary_expression -> term .

    EQUALS          reduce using rule 64 (unary_expression -> term .)
    PP              reduce using rule 64 (unary_expression -> term .)
    MM              reduce using rule 64 (unary_expression -> term .)
    LT              reduce using rule 64 (unary_expression -> term .)
    LE              reduce using rule 64 (unary_expression -> term .)
    GE              reduce using rule 64 (unary_expression -> term .)
    GT              reduce using rule 64 (unary_expression -> term .)
    EQ              reduce using rule 64 (unary_expression -> term .)
    NE              reduce using rule 64 (unary_expression -> term .)
    AND             reduce using rule 64 (unary_expression -> term .)
    LAND            reduce using rule 64 (unary_expression -> term .)
    PLUS            reduce using rule 64 (unary_expression -> term .)
    TIMES           reduce using rule 64 (unary_expression -> term .)
    MOD             reduce using rule 64 (unary_expression -> term .)
    MINUS           reduce using rule 64 (unary_expression -> term .)
    SEMI            reduce using rule 64 (unary_expression -> term .)
    RPAREN          reduce using rule 64 (unary_expression -> term .)
    COMMA           reduce using rule 64 (unary_expression -> term .)
    LOR             reduce using rule 64 (unary_expression -> term .)


state 32

    (60) unary_expression -> AND . term
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 81
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 80
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 33

    (55) unary_expression -> function_call .

    EQUALS          reduce using rule 55 (unary_expression -> function_call .)
    PP              reduce using rule 55 (unary_expression -> function_call .)
    MM              reduce using rule 55 (unary_expression -> function_call .)
    LT              reduce using rule 55 (unary_expression -> function_call .)
    LE              reduce using rule 55 (unary_expression -> function_call .)
    GE              reduce using rule 55 (unary_expression -> function_call .)
    GT              reduce using rule 55 (unary_expression -> function_call .)
    EQ              reduce using rule 55 (unary_expression -> function_call .)
    NE              reduce using rule 55 (unary_expression -> function_call .)
    AND             reduce using rule 55 (unary_expression -> function_call .)
    LAND            reduce using rule 55 (unary_expression -> function_call .)
    PLUS            reduce using rule 55 (unary_expression -> function_call .)
    TIMES           reduce using rule 55 (unary_expression -> function_call .)
    MOD             reduce using rule 55 (unary_expression -> function_call .)
    MINUS           reduce using rule 55 (unary_expression -> function_call .)
    SEMI            reduce using rule 55 (unary_expression -> function_call .)
    RPAREN          reduce using rule 55 (unary_expression -> function_call .)
    COMMA           reduce using rule 55 (unary_expression -> function_call .)
    LOR             reduce using rule 55 (unary_expression -> function_call .)


state 34

    (51) function_call -> ID . LPAREN expression_list RPAREN
    (52) function_call -> ID . LPAREN RPAREN
    (61) term -> ID .
    (62) term -> ID . LBRACKET NUMBER RBRACKET
    (63) term -> ID . LBRACKET ID RBRACKET

    LPAREN          shift and go to state 82
    EQUALS          reduce using rule 61 (term -> ID .)
    PP              reduce using rule 61 (term -> ID .)
    MM              reduce using rule 61 (term -> ID .)
    LT              reduce using rule 61 (term -> ID .)
    LE              reduce using rule 61 (term -> ID .)
    GE              reduce using rule 61 (term -> ID .)
    GT              reduce using rule 61 (term -> ID .)
    EQ              reduce using rule 61 (term -> ID .)
    NE              reduce using rule 61 (term -> ID .)
    AND             reduce using rule 61 (term -> ID .)
    LAND            reduce using rule 61 (term -> ID .)
    PLUS            reduce using rule 61 (term -> ID .)
    TIMES           reduce using rule 61 (term -> ID .)
    MOD             reduce using rule 61 (term -> ID .)
    MINUS           reduce using rule 61 (term -> ID .)
    SEMI            reduce using rule 61 (term -> ID .)
    RPAREN          reduce using rule 61 (term -> ID .)
    COMMA           reduce using rule 61 (term -> ID .)
    LOR             reduce using rule 61 (term -> ID .)
    LBRACKET        shift and go to state 83


state 35

    (67) factor -> LPAREN . expression RPAREN
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 84
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 36

    (50) term -> temp .

    EQUALS          reduce using rule 50 (term -> temp .)
    PP              reduce using rule 50 (term -> temp .)
    MM              reduce using rule 50 (term -> temp .)
    LT              reduce using rule 50 (term -> temp .)
    LE              reduce using rule 50 (term -> temp .)
    GE              reduce using rule 50 (term -> temp .)
    GT              reduce using rule 50 (term -> temp .)
    EQ              reduce using rule 50 (term -> temp .)
    NE              reduce using rule 50 (term -> temp .)
    AND             reduce using rule 50 (term -> temp .)
    LAND            reduce using rule 50 (term -> temp .)
    PLUS            reduce using rule 50 (term -> temp .)
    TIMES           reduce using rule 50 (term -> temp .)
    MOD             reduce using rule 50 (term -> temp .)
    MINUS           reduce using rule 50 (term -> temp .)
    SEMI            reduce using rule 50 (term -> temp .)
    RPAREN          reduce using rule 50 (term -> temp .)
    COMMA           reduce using rule 50 (term -> temp .)
    LOR             reduce using rule 50 (term -> temp .)


state 37

    (66) factor -> NUMBER .

    EQUALS          reduce using rule 66 (factor -> NUMBER .)
    PP              reduce using rule 66 (factor -> NUMBER .)
    MM              reduce using rule 66 (factor -> NUMBER .)
    LT              reduce using rule 66 (factor -> NUMBER .)
    LE              reduce using rule 66 (factor -> NUMBER .)
    GE              reduce using rule 66 (factor -> NUMBER .)
    GT              reduce using rule 66 (factor -> NUMBER .)
    EQ              reduce using rule 66 (factor -> NUMBER .)
    NE              reduce using rule 66 (factor -> NUMBER .)
    AND             reduce using rule 66 (factor -> NUMBER .)
    LAND            reduce using rule 66 (factor -> NUMBER .)
    PLUS            reduce using rule 66 (factor -> NUMBER .)
    TIMES           reduce using rule 66 (factor -> NUMBER .)
    MOD             reduce using rule 66 (factor -> NUMBER .)
    MINUS           reduce using rule 66 (factor -> NUMBER .)
    SEMI            reduce using rule 66 (factor -> NUMBER .)
    RPAREN          reduce using rule 66 (factor -> NUMBER .)
    COMMA           reduce using rule 66 (factor -> NUMBER .)
    LOR             reduce using rule 66 (factor -> NUMBER .)


state 38

    (65) term -> factor .

    EQUALS          reduce using rule 65 (term -> factor .)
    PP              reduce using rule 65 (term -> factor .)
    MM              reduce using rule 65 (term -> factor .)
    LT              reduce using rule 65 (term -> factor .)
    LE              reduce using rule 65 (term -> factor .)
    GE              reduce using rule 65 (term -> factor .)
    GT              reduce using rule 65 (term -> factor .)
    EQ              reduce using rule 65 (term -> factor .)
    NE              reduce using rule 65 (term -> factor .)
    AND             reduce using rule 65 (term -> factor .)
    LAND            reduce using rule 65 (term -> factor .)
    PLUS            reduce using rule 65 (term -> factor .)
    TIMES           reduce using rule 65 (term -> factor .)
    MOD             reduce using rule 65 (term -> factor .)
    MINUS           reduce using rule 65 (term -> factor .)
    SEMI            reduce using rule 65 (term -> factor .)
    RPAREN          reduce using rule 65 (term -> factor .)
    COMMA           reduce using rule 65 (term -> factor .)
    LOR             reduce using rule 65 (term -> factor .)


state 39

    (49) temp -> LNOT . unary_expression
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    unary_expression               shift and go to state 85
    function_call                  shift and go to state 33
    term                           shift and go to state 31
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 40

    (8) arguments -> LPAREN args . RPAREN

    RPAREN          shift and go to state 86


state 41

    (9) args -> empty .

    RPAREN          reduce using rule 9 (args -> empty .)


state 42

    (10) args -> VOID .

    RPAREN          reduce using rule 10 (args -> VOID .)


state 43

    (11) args -> INT . ID
    (12) args -> INT . ID COMMA INT ID

    ID              shift and go to state 87


state 44

    (36) compound_statement -> LBRACE declaration_list . RBRACE
    (37) compound_statement -> LBRACE declaration_list . statement_list RBRACE
    (41) declaration_list -> declaration_list . declaration
    (44) statement_list -> . statement
    (45) statement_list -> . statement_list statement
    (14) declaration -> . init_declaration SEMI
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (15) init_declaration -> . id_declaration
    (16) init_declaration -> . id_declaration LBRACKET NUMBER RBRACKET
    (17) init_declaration -> . id_declaration EQUALS expression
    (36) compound_statement -> . LBRACE declaration_list RBRACE
    (37) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (38) compound_statement -> . LBRACE statement_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (42) expression_statement -> . SEMI
    (43) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN ID MOD ID EQ NUMBER RPAREN statement
    (35) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (18) id_declaration -> . VOID ID
    (19) id_declaration -> . INT ID
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 88
    LBRACE          shift and go to state 22
    SEMI            shift and go to state 49
    BREAK           shift and go to state 57
    RETURN          shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    VOID            shift and go to state 10
    INT             shift and go to state 11
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    statement_list                 shift and go to state 89
    declaration                    shift and go to state 90
    statement                      shift and go to state 48
    init_declaration               shift and go to state 9
    compound_statement             shift and go to state 50
    expression_statement           shift and go to state 51
    jump_statement                 shift and go to state 52
    loop_statement                 shift and go to state 53
    condition_statement            shift and go to state 54
    id_declaration                 shift and go to state 55
    expression                     shift and go to state 56
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 45

    (39) compound_statement -> LBRACE RBRACE .

    SEMI            reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    INCLUDE         reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    VOID            reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    STRING          reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    PP              reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    MM              reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    AND             reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    ID              reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    LNOT            reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    NUMBER          reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 39 (compound_statement -> LBRACE RBRACE .)


state 46

    (38) compound_statement -> LBRACE statement_list . RBRACE
    (45) statement_list -> statement_list . statement
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (36) compound_statement -> . LBRACE declaration_list RBRACE
    (37) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (38) compound_statement -> . LBRACE statement_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (42) expression_statement -> . SEMI
    (43) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN ID MOD ID EQ NUMBER RPAREN statement
    (35) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 91
    LBRACE          shift and go to state 22
    SEMI            shift and go to state 49
    BREAK           shift and go to state 57
    RETURN          shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    statement                      shift and go to state 92
    compound_statement             shift and go to state 50
    expression_statement           shift and go to state 51
    jump_statement                 shift and go to state 52
    loop_statement                 shift and go to state 53
    condition_statement            shift and go to state 54
    expression                     shift and go to state 56
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 47

    (40) declaration_list -> declaration .

    RBRACE          reduce using rule 40 (declaration_list -> declaration .)
    LBRACE          reduce using rule 40 (declaration_list -> declaration .)
    SEMI            reduce using rule 40 (declaration_list -> declaration .)
    BREAK           reduce using rule 40 (declaration_list -> declaration .)
    RETURN          reduce using rule 40 (declaration_list -> declaration .)
    FOR             reduce using rule 40 (declaration_list -> declaration .)
    WHILE           reduce using rule 40 (declaration_list -> declaration .)
    IF              reduce using rule 40 (declaration_list -> declaration .)
    VOID            reduce using rule 40 (declaration_list -> declaration .)
    INT             reduce using rule 40 (declaration_list -> declaration .)
    STRING          reduce using rule 40 (declaration_list -> declaration .)
    PP              reduce using rule 40 (declaration_list -> declaration .)
    MM              reduce using rule 40 (declaration_list -> declaration .)
    AND             reduce using rule 40 (declaration_list -> declaration .)
    ID              reduce using rule 40 (declaration_list -> declaration .)
    LNOT            reduce using rule 40 (declaration_list -> declaration .)
    NUMBER          reduce using rule 40 (declaration_list -> declaration .)
    LPAREN          reduce using rule 40 (declaration_list -> declaration .)


state 48

    (44) statement_list -> statement .

    RBRACE          reduce using rule 44 (statement_list -> statement .)
    LBRACE          reduce using rule 44 (statement_list -> statement .)
    SEMI            reduce using rule 44 (statement_list -> statement .)
    BREAK           reduce using rule 44 (statement_list -> statement .)
    RETURN          reduce using rule 44 (statement_list -> statement .)
    FOR             reduce using rule 44 (statement_list -> statement .)
    WHILE           reduce using rule 44 (statement_list -> statement .)
    IF              reduce using rule 44 (statement_list -> statement .)
    STRING          reduce using rule 44 (statement_list -> statement .)
    PP              reduce using rule 44 (statement_list -> statement .)
    MM              reduce using rule 44 (statement_list -> statement .)
    AND             reduce using rule 44 (statement_list -> statement .)
    ID              reduce using rule 44 (statement_list -> statement .)
    LNOT            reduce using rule 44 (statement_list -> statement .)
    NUMBER          reduce using rule 44 (statement_list -> statement .)
    LPAREN          reduce using rule 44 (statement_list -> statement .)


state 49

    (42) expression_statement -> SEMI .

    RBRACE          reduce using rule 42 (expression_statement -> SEMI .)
    LBRACE          reduce using rule 42 (expression_statement -> SEMI .)
    SEMI            reduce using rule 42 (expression_statement -> SEMI .)
    BREAK           reduce using rule 42 (expression_statement -> SEMI .)
    RETURN          reduce using rule 42 (expression_statement -> SEMI .)
    FOR             reduce using rule 42 (expression_statement -> SEMI .)
    WHILE           reduce using rule 42 (expression_statement -> SEMI .)
    IF              reduce using rule 42 (expression_statement -> SEMI .)
    STRING          reduce using rule 42 (expression_statement -> SEMI .)
    PP              reduce using rule 42 (expression_statement -> SEMI .)
    MM              reduce using rule 42 (expression_statement -> SEMI .)
    AND             reduce using rule 42 (expression_statement -> SEMI .)
    ID              reduce using rule 42 (expression_statement -> SEMI .)
    LNOT            reduce using rule 42 (expression_statement -> SEMI .)
    NUMBER          reduce using rule 42 (expression_statement -> SEMI .)
    LPAREN          reduce using rule 42 (expression_statement -> SEMI .)
    RPAREN          reduce using rule 42 (expression_statement -> SEMI .)
    ELSE            reduce using rule 42 (expression_statement -> SEMI .)


state 50

    (21) statement -> compound_statement .

    RBRACE          reduce using rule 21 (statement -> compound_statement .)
    LBRACE          reduce using rule 21 (statement -> compound_statement .)
    SEMI            reduce using rule 21 (statement -> compound_statement .)
    BREAK           reduce using rule 21 (statement -> compound_statement .)
    RETURN          reduce using rule 21 (statement -> compound_statement .)
    FOR             reduce using rule 21 (statement -> compound_statement .)
    WHILE           reduce using rule 21 (statement -> compound_statement .)
    IF              reduce using rule 21 (statement -> compound_statement .)
    STRING          reduce using rule 21 (statement -> compound_statement .)
    PP              reduce using rule 21 (statement -> compound_statement .)
    MM              reduce using rule 21 (statement -> compound_statement .)
    AND             reduce using rule 21 (statement -> compound_statement .)
    ID              reduce using rule 21 (statement -> compound_statement .)
    LNOT            reduce using rule 21 (statement -> compound_statement .)
    NUMBER          reduce using rule 21 (statement -> compound_statement .)
    LPAREN          reduce using rule 21 (statement -> compound_statement .)
    ELSE            reduce using rule 21 (statement -> compound_statement .)


state 51

    (22) statement -> expression_statement .

    RBRACE          reduce using rule 22 (statement -> expression_statement .)
    LBRACE          reduce using rule 22 (statement -> expression_statement .)
    SEMI            reduce using rule 22 (statement -> expression_statement .)
    BREAK           reduce using rule 22 (statement -> expression_statement .)
    RETURN          reduce using rule 22 (statement -> expression_statement .)
    FOR             reduce using rule 22 (statement -> expression_statement .)
    WHILE           reduce using rule 22 (statement -> expression_statement .)
    IF              reduce using rule 22 (statement -> expression_statement .)
    STRING          reduce using rule 22 (statement -> expression_statement .)
    PP              reduce using rule 22 (statement -> expression_statement .)
    MM              reduce using rule 22 (statement -> expression_statement .)
    AND             reduce using rule 22 (statement -> expression_statement .)
    ID              reduce using rule 22 (statement -> expression_statement .)
    LNOT            reduce using rule 22 (statement -> expression_statement .)
    NUMBER          reduce using rule 22 (statement -> expression_statement .)
    LPAREN          reduce using rule 22 (statement -> expression_statement .)
    ELSE            reduce using rule 22 (statement -> expression_statement .)


state 52

    (23) statement -> jump_statement .

    RBRACE          reduce using rule 23 (statement -> jump_statement .)
    LBRACE          reduce using rule 23 (statement -> jump_statement .)
    SEMI            reduce using rule 23 (statement -> jump_statement .)
    BREAK           reduce using rule 23 (statement -> jump_statement .)
    RETURN          reduce using rule 23 (statement -> jump_statement .)
    FOR             reduce using rule 23 (statement -> jump_statement .)
    WHILE           reduce using rule 23 (statement -> jump_statement .)
    IF              reduce using rule 23 (statement -> jump_statement .)
    STRING          reduce using rule 23 (statement -> jump_statement .)
    PP              reduce using rule 23 (statement -> jump_statement .)
    MM              reduce using rule 23 (statement -> jump_statement .)
    AND             reduce using rule 23 (statement -> jump_statement .)
    ID              reduce using rule 23 (statement -> jump_statement .)
    LNOT            reduce using rule 23 (statement -> jump_statement .)
    NUMBER          reduce using rule 23 (statement -> jump_statement .)
    LPAREN          reduce using rule 23 (statement -> jump_statement .)
    ELSE            reduce using rule 23 (statement -> jump_statement .)


state 53

    (24) statement -> loop_statement .

    RBRACE          reduce using rule 24 (statement -> loop_statement .)
    LBRACE          reduce using rule 24 (statement -> loop_statement .)
    SEMI            reduce using rule 24 (statement -> loop_statement .)
    BREAK           reduce using rule 24 (statement -> loop_statement .)
    RETURN          reduce using rule 24 (statement -> loop_statement .)
    FOR             reduce using rule 24 (statement -> loop_statement .)
    WHILE           reduce using rule 24 (statement -> loop_statement .)
    IF              reduce using rule 24 (statement -> loop_statement .)
    STRING          reduce using rule 24 (statement -> loop_statement .)
    PP              reduce using rule 24 (statement -> loop_statement .)
    MM              reduce using rule 24 (statement -> loop_statement .)
    AND             reduce using rule 24 (statement -> loop_statement .)
    ID              reduce using rule 24 (statement -> loop_statement .)
    LNOT            reduce using rule 24 (statement -> loop_statement .)
    NUMBER          reduce using rule 24 (statement -> loop_statement .)
    LPAREN          reduce using rule 24 (statement -> loop_statement .)
    ELSE            reduce using rule 24 (statement -> loop_statement .)


state 54

    (25) statement -> condition_statement .

    RBRACE          reduce using rule 25 (statement -> condition_statement .)
    LBRACE          reduce using rule 25 (statement -> condition_statement .)
    SEMI            reduce using rule 25 (statement -> condition_statement .)
    BREAK           reduce using rule 25 (statement -> condition_statement .)
    RETURN          reduce using rule 25 (statement -> condition_statement .)
    FOR             reduce using rule 25 (statement -> condition_statement .)
    WHILE           reduce using rule 25 (statement -> condition_statement .)
    IF              reduce using rule 25 (statement -> condition_statement .)
    STRING          reduce using rule 25 (statement -> condition_statement .)
    PP              reduce using rule 25 (statement -> condition_statement .)
    MM              reduce using rule 25 (statement -> condition_statement .)
    AND             reduce using rule 25 (statement -> condition_statement .)
    ID              reduce using rule 25 (statement -> condition_statement .)
    LNOT            reduce using rule 25 (statement -> condition_statement .)
    NUMBER          reduce using rule 25 (statement -> condition_statement .)
    LPAREN          reduce using rule 25 (statement -> condition_statement .)
    ELSE            reduce using rule 25 (statement -> condition_statement .)


state 55

    (15) init_declaration -> id_declaration .
    (16) init_declaration -> id_declaration . LBRACKET NUMBER RBRACKET
    (17) init_declaration -> id_declaration . EQUALS expression

    SEMI            reduce using rule 15 (init_declaration -> id_declaration .)
    LBRACKET        shift and go to state 15
    EQUALS          shift and go to state 16


state 56

    (43) expression_statement -> expression . SEMI

    SEMI            shift and go to state 93


state 57

    (26) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 94


state 58

    (27) jump_statement -> RETURN . SEMI
    (28) jump_statement -> RETURN . expression SEMI
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    SEMI            shift and go to state 95
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 96
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 59

    (29) loop_statement -> FOR . LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement

    LPAREN          shift and go to state 97


state 60

    (31) loop_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 98


state 61

    (32) condition_statement -> IF . LPAREN expression RPAREN statement ELSE statement
    (33) condition_statement -> IF . LPAREN expression RPAREN statement
    (34) condition_statement -> IF . LPAREN ID MOD ID EQ NUMBER RPAREN statement
    (35) condition_statement -> IF . LPAREN expression LOR expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 99


state 62

    (16) init_declaration -> id_declaration LBRACKET NUMBER RBRACKET .

    SEMI            reduce using rule 16 (init_declaration -> id_declaration LBRACKET NUMBER RBRACKET .)


state 63

    (47) expression -> unary_expression EQUALS . expression
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    unary_expression               shift and go to state 26
    expression                     shift and go to state 100
    conditional_expression         shift and go to state 25
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 64

    (58) expression -> unary_expression PP .

    SEMI            reduce using rule 58 (expression -> unary_expression PP .)
    RPAREN          reduce using rule 58 (expression -> unary_expression PP .)
    COMMA           reduce using rule 58 (expression -> unary_expression PP .)
    LOR             reduce using rule 58 (expression -> unary_expression PP .)


state 65

    (59) expression -> unary_expression MM .

    SEMI            reduce using rule 59 (expression -> unary_expression MM .)
    RPAREN          reduce using rule 59 (expression -> unary_expression MM .)
    COMMA           reduce using rule 59 (expression -> unary_expression MM .)
    LOR             reduce using rule 59 (expression -> unary_expression MM .)


state 66

    (69) conditional_expression -> unary_expression LT . term
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 81
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 101
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 67

    (70) conditional_expression -> unary_expression LE . term
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 81
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 102
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 68

    (71) conditional_expression -> unary_expression GE . term
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 81
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 103
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 69

    (72) conditional_expression -> unary_expression GT . term
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 81
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 104
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 70

    (73) conditional_expression -> unary_expression EQ . term
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 81
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 105
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 71

    (74) conditional_expression -> unary_expression NE . term
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 81
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 106
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 72

    (75) conditional_expression -> unary_expression AND . term
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 81
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 107
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 73

    (76) conditional_expression -> unary_expression LAND . term
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 81
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 108
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 74

    (77) conditional_expression -> unary_expression PLUS . term
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 81
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 109
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 75

    (78) conditional_expression -> unary_expression TIMES . term
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 81
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 110
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 76

    (79) conditional_expression -> unary_expression MOD . term
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 81
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 111
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 77

    (80) conditional_expression -> unary_expression MINUS . term
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 81
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    term                           shift and go to state 112
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 78

    (56) expression -> PP unary_expression .

    SEMI            reduce using rule 56 (expression -> PP unary_expression .)
    RPAREN          reduce using rule 56 (expression -> PP unary_expression .)
    COMMA           reduce using rule 56 (expression -> PP unary_expression .)
    LOR             reduce using rule 56 (expression -> PP unary_expression .)


state 79

    (57) expression -> MM unary_expression .

    SEMI            reduce using rule 57 (expression -> MM unary_expression .)
    RPAREN          reduce using rule 57 (expression -> MM unary_expression .)
    COMMA           reduce using rule 57 (expression -> MM unary_expression .)
    LOR             reduce using rule 57 (expression -> MM unary_expression .)


state 80

    (60) unary_expression -> AND term .

    EQUALS          reduce using rule 60 (unary_expression -> AND term .)
    PP              reduce using rule 60 (unary_expression -> AND term .)
    MM              reduce using rule 60 (unary_expression -> AND term .)
    LT              reduce using rule 60 (unary_expression -> AND term .)
    LE              reduce using rule 60 (unary_expression -> AND term .)
    GE              reduce using rule 60 (unary_expression -> AND term .)
    GT              reduce using rule 60 (unary_expression -> AND term .)
    EQ              reduce using rule 60 (unary_expression -> AND term .)
    NE              reduce using rule 60 (unary_expression -> AND term .)
    AND             reduce using rule 60 (unary_expression -> AND term .)
    LAND            reduce using rule 60 (unary_expression -> AND term .)
    PLUS            reduce using rule 60 (unary_expression -> AND term .)
    TIMES           reduce using rule 60 (unary_expression -> AND term .)
    MOD             reduce using rule 60 (unary_expression -> AND term .)
    MINUS           reduce using rule 60 (unary_expression -> AND term .)
    SEMI            reduce using rule 60 (unary_expression -> AND term .)
    RPAREN          reduce using rule 60 (unary_expression -> AND term .)
    COMMA           reduce using rule 60 (unary_expression -> AND term .)
    LOR             reduce using rule 60 (unary_expression -> AND term .)


state 81

    (61) term -> ID .
    (62) term -> ID . LBRACKET NUMBER RBRACKET
    (63) term -> ID . LBRACKET ID RBRACKET

    EQUALS          reduce using rule 61 (term -> ID .)
    PP              reduce using rule 61 (term -> ID .)
    MM              reduce using rule 61 (term -> ID .)
    LT              reduce using rule 61 (term -> ID .)
    LE              reduce using rule 61 (term -> ID .)
    GE              reduce using rule 61 (term -> ID .)
    GT              reduce using rule 61 (term -> ID .)
    EQ              reduce using rule 61 (term -> ID .)
    NE              reduce using rule 61 (term -> ID .)
    AND             reduce using rule 61 (term -> ID .)
    LAND            reduce using rule 61 (term -> ID .)
    PLUS            reduce using rule 61 (term -> ID .)
    TIMES           reduce using rule 61 (term -> ID .)
    MOD             reduce using rule 61 (term -> ID .)
    MINUS           reduce using rule 61 (term -> ID .)
    SEMI            reduce using rule 61 (term -> ID .)
    RPAREN          reduce using rule 61 (term -> ID .)
    COMMA           reduce using rule 61 (term -> ID .)
    LOR             reduce using rule 61 (term -> ID .)
    LBRACKET        shift and go to state 83


state 82

    (51) function_call -> ID LPAREN . expression_list RPAREN
    (52) function_call -> ID LPAREN . RPAREN
    (53) expression_list -> . expression
    (54) expression_list -> . expression_list COMMA expression
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    RPAREN          shift and go to state 114
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression_list                shift and go to state 113
    expression                     shift and go to state 115
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 83

    (62) term -> ID LBRACKET . NUMBER RBRACKET
    (63) term -> ID LBRACKET . ID RBRACKET

    NUMBER          shift and go to state 117
    ID              shift and go to state 116


state 84

    (67) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 118


state 85

    (49) temp -> LNOT unary_expression .

    EQUALS          reduce using rule 49 (temp -> LNOT unary_expression .)
    PP              reduce using rule 49 (temp -> LNOT unary_expression .)
    MM              reduce using rule 49 (temp -> LNOT unary_expression .)
    LT              reduce using rule 49 (temp -> LNOT unary_expression .)
    LE              reduce using rule 49 (temp -> LNOT unary_expression .)
    GE              reduce using rule 49 (temp -> LNOT unary_expression .)
    GT              reduce using rule 49 (temp -> LNOT unary_expression .)
    EQ              reduce using rule 49 (temp -> LNOT unary_expression .)
    NE              reduce using rule 49 (temp -> LNOT unary_expression .)
    AND             reduce using rule 49 (temp -> LNOT unary_expression .)
    LAND            reduce using rule 49 (temp -> LNOT unary_expression .)
    PLUS            reduce using rule 49 (temp -> LNOT unary_expression .)
    TIMES           reduce using rule 49 (temp -> LNOT unary_expression .)
    MOD             reduce using rule 49 (temp -> LNOT unary_expression .)
    MINUS           reduce using rule 49 (temp -> LNOT unary_expression .)
    SEMI            reduce using rule 49 (temp -> LNOT unary_expression .)
    RPAREN          reduce using rule 49 (temp -> LNOT unary_expression .)
    COMMA           reduce using rule 49 (temp -> LNOT unary_expression .)
    LOR             reduce using rule 49 (temp -> LNOT unary_expression .)


state 86

    (8) arguments -> LPAREN args RPAREN .

    LBRACE          reduce using rule 8 (arguments -> LPAREN args RPAREN .)


state 87

    (11) args -> INT ID .
    (12) args -> INT ID . COMMA INT ID

    RPAREN          reduce using rule 11 (args -> INT ID .)
    COMMA           shift and go to state 119


state 88

    (36) compound_statement -> LBRACE declaration_list RBRACE .

    SEMI            reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    INCLUDE         reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    VOID            reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    INT             reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    $end            reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    LBRACE          reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    BREAK           reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    RETURN          reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    FOR             reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    IF              reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    STRING          reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    PP              reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    MM              reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    AND             reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    ID              reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    LNOT            reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    NUMBER          reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)
    ELSE            reduce using rule 36 (compound_statement -> LBRACE declaration_list RBRACE .)


state 89

    (37) compound_statement -> LBRACE declaration_list statement_list . RBRACE
    (45) statement_list -> statement_list . statement
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (36) compound_statement -> . LBRACE declaration_list RBRACE
    (37) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (38) compound_statement -> . LBRACE statement_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (42) expression_statement -> . SEMI
    (43) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN ID MOD ID EQ NUMBER RPAREN statement
    (35) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 120
    LBRACE          shift and go to state 22
    SEMI            shift and go to state 49
    BREAK           shift and go to state 57
    RETURN          shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    statement                      shift and go to state 92
    compound_statement             shift and go to state 50
    expression_statement           shift and go to state 51
    jump_statement                 shift and go to state 52
    loop_statement                 shift and go to state 53
    condition_statement            shift and go to state 54
    expression                     shift and go to state 56
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 90

    (41) declaration_list -> declaration_list declaration .

    RBRACE          reduce using rule 41 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 41 (declaration_list -> declaration_list declaration .)
    SEMI            reduce using rule 41 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 41 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 41 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 41 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 41 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 41 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 41 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 41 (declaration_list -> declaration_list declaration .)
    STRING          reduce using rule 41 (declaration_list -> declaration_list declaration .)
    PP              reduce using rule 41 (declaration_list -> declaration_list declaration .)
    MM              reduce using rule 41 (declaration_list -> declaration_list declaration .)
    AND             reduce using rule 41 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 41 (declaration_list -> declaration_list declaration .)
    LNOT            reduce using rule 41 (declaration_list -> declaration_list declaration .)
    NUMBER          reduce using rule 41 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 41 (declaration_list -> declaration_list declaration .)


state 91

    (38) compound_statement -> LBRACE statement_list RBRACE .

    SEMI            reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    INCLUDE         reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    VOID            reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    STRING          reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    PP              reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    MM              reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    AND             reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    LNOT            reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 38 (compound_statement -> LBRACE statement_list RBRACE .)


state 92

    (45) statement_list -> statement_list statement .

    RBRACE          reduce using rule 45 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 45 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 45 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 45 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 45 (statement_list -> statement_list statement .)
    FOR             reduce using rule 45 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 45 (statement_list -> statement_list statement .)
    IF              reduce using rule 45 (statement_list -> statement_list statement .)
    STRING          reduce using rule 45 (statement_list -> statement_list statement .)
    PP              reduce using rule 45 (statement_list -> statement_list statement .)
    MM              reduce using rule 45 (statement_list -> statement_list statement .)
    AND             reduce using rule 45 (statement_list -> statement_list statement .)
    ID              reduce using rule 45 (statement_list -> statement_list statement .)
    LNOT            reduce using rule 45 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 45 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 45 (statement_list -> statement_list statement .)


state 93

    (43) expression_statement -> expression SEMI .

    RBRACE          reduce using rule 43 (expression_statement -> expression SEMI .)
    LBRACE          reduce using rule 43 (expression_statement -> expression SEMI .)
    SEMI            reduce using rule 43 (expression_statement -> expression SEMI .)
    BREAK           reduce using rule 43 (expression_statement -> expression SEMI .)
    RETURN          reduce using rule 43 (expression_statement -> expression SEMI .)
    FOR             reduce using rule 43 (expression_statement -> expression SEMI .)
    WHILE           reduce using rule 43 (expression_statement -> expression SEMI .)
    IF              reduce using rule 43 (expression_statement -> expression SEMI .)
    STRING          reduce using rule 43 (expression_statement -> expression SEMI .)
    PP              reduce using rule 43 (expression_statement -> expression SEMI .)
    MM              reduce using rule 43 (expression_statement -> expression SEMI .)
    AND             reduce using rule 43 (expression_statement -> expression SEMI .)
    ID              reduce using rule 43 (expression_statement -> expression SEMI .)
    LNOT            reduce using rule 43 (expression_statement -> expression SEMI .)
    NUMBER          reduce using rule 43 (expression_statement -> expression SEMI .)
    LPAREN          reduce using rule 43 (expression_statement -> expression SEMI .)
    RPAREN          reduce using rule 43 (expression_statement -> expression SEMI .)
    ELSE            reduce using rule 43 (expression_statement -> expression SEMI .)


state 94

    (26) jump_statement -> BREAK SEMI .

    RBRACE          reduce using rule 26 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 26 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 26 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 26 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 26 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 26 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 26 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 26 (jump_statement -> BREAK SEMI .)
    STRING          reduce using rule 26 (jump_statement -> BREAK SEMI .)
    PP              reduce using rule 26 (jump_statement -> BREAK SEMI .)
    MM              reduce using rule 26 (jump_statement -> BREAK SEMI .)
    AND             reduce using rule 26 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 26 (jump_statement -> BREAK SEMI .)
    LNOT            reduce using rule 26 (jump_statement -> BREAK SEMI .)
    NUMBER          reduce using rule 26 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 26 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 26 (jump_statement -> BREAK SEMI .)


state 95

    (27) jump_statement -> RETURN SEMI .

    RBRACE          reduce using rule 27 (jump_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 27 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 27 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 27 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 27 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 27 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 27 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 27 (jump_statement -> RETURN SEMI .)
    STRING          reduce using rule 27 (jump_statement -> RETURN SEMI .)
    PP              reduce using rule 27 (jump_statement -> RETURN SEMI .)
    MM              reduce using rule 27 (jump_statement -> RETURN SEMI .)
    AND             reduce using rule 27 (jump_statement -> RETURN SEMI .)
    ID              reduce using rule 27 (jump_statement -> RETURN SEMI .)
    LNOT            reduce using rule 27 (jump_statement -> RETURN SEMI .)
    NUMBER          reduce using rule 27 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 27 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 27 (jump_statement -> RETURN SEMI .)


state 96

    (28) jump_statement -> RETURN expression . SEMI

    SEMI            shift and go to state 121


state 97

    (29) loop_statement -> FOR LPAREN . expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement
    (42) expression_statement -> . SEMI
    (43) expression_statement -> . expression SEMI
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    SEMI            shift and go to state 49
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression_statement           shift and go to state 122
    expression                     shift and go to state 56
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 98

    (31) loop_statement -> WHILE LPAREN . expression RPAREN statement
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 123
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 99

    (32) condition_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (33) condition_statement -> IF LPAREN . expression RPAREN statement
    (34) condition_statement -> IF LPAREN . ID MOD ID EQ NUMBER RPAREN statement
    (35) condition_statement -> IF LPAREN . expression LOR expression RPAREN statement ELSE statement
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 125
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 124
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 100

    (47) expression -> unary_expression EQUALS expression .

    SEMI            reduce using rule 47 (expression -> unary_expression EQUALS expression .)
    RPAREN          reduce using rule 47 (expression -> unary_expression EQUALS expression .)
    COMMA           reduce using rule 47 (expression -> unary_expression EQUALS expression .)
    LOR             reduce using rule 47 (expression -> unary_expression EQUALS expression .)


state 101

    (69) conditional_expression -> unary_expression LT term .

    SEMI            reduce using rule 69 (conditional_expression -> unary_expression LT term .)
    RPAREN          reduce using rule 69 (conditional_expression -> unary_expression LT term .)
    COMMA           reduce using rule 69 (conditional_expression -> unary_expression LT term .)
    LOR             reduce using rule 69 (conditional_expression -> unary_expression LT term .)


state 102

    (70) conditional_expression -> unary_expression LE term .

    SEMI            reduce using rule 70 (conditional_expression -> unary_expression LE term .)
    RPAREN          reduce using rule 70 (conditional_expression -> unary_expression LE term .)
    COMMA           reduce using rule 70 (conditional_expression -> unary_expression LE term .)
    LOR             reduce using rule 70 (conditional_expression -> unary_expression LE term .)


state 103

    (71) conditional_expression -> unary_expression GE term .

    SEMI            reduce using rule 71 (conditional_expression -> unary_expression GE term .)
    RPAREN          reduce using rule 71 (conditional_expression -> unary_expression GE term .)
    COMMA           reduce using rule 71 (conditional_expression -> unary_expression GE term .)
    LOR             reduce using rule 71 (conditional_expression -> unary_expression GE term .)


state 104

    (72) conditional_expression -> unary_expression GT term .

    SEMI            reduce using rule 72 (conditional_expression -> unary_expression GT term .)
    RPAREN          reduce using rule 72 (conditional_expression -> unary_expression GT term .)
    COMMA           reduce using rule 72 (conditional_expression -> unary_expression GT term .)
    LOR             reduce using rule 72 (conditional_expression -> unary_expression GT term .)


state 105

    (73) conditional_expression -> unary_expression EQ term .

    SEMI            reduce using rule 73 (conditional_expression -> unary_expression EQ term .)
    RPAREN          reduce using rule 73 (conditional_expression -> unary_expression EQ term .)
    COMMA           reduce using rule 73 (conditional_expression -> unary_expression EQ term .)
    LOR             reduce using rule 73 (conditional_expression -> unary_expression EQ term .)


state 106

    (74) conditional_expression -> unary_expression NE term .

    SEMI            reduce using rule 74 (conditional_expression -> unary_expression NE term .)
    RPAREN          reduce using rule 74 (conditional_expression -> unary_expression NE term .)
    COMMA           reduce using rule 74 (conditional_expression -> unary_expression NE term .)
    LOR             reduce using rule 74 (conditional_expression -> unary_expression NE term .)


state 107

    (75) conditional_expression -> unary_expression AND term .

    SEMI            reduce using rule 75 (conditional_expression -> unary_expression AND term .)
    RPAREN          reduce using rule 75 (conditional_expression -> unary_expression AND term .)
    COMMA           reduce using rule 75 (conditional_expression -> unary_expression AND term .)
    LOR             reduce using rule 75 (conditional_expression -> unary_expression AND term .)


state 108

    (76) conditional_expression -> unary_expression LAND term .

    SEMI            reduce using rule 76 (conditional_expression -> unary_expression LAND term .)
    RPAREN          reduce using rule 76 (conditional_expression -> unary_expression LAND term .)
    COMMA           reduce using rule 76 (conditional_expression -> unary_expression LAND term .)
    LOR             reduce using rule 76 (conditional_expression -> unary_expression LAND term .)


state 109

    (77) conditional_expression -> unary_expression PLUS term .

    SEMI            reduce using rule 77 (conditional_expression -> unary_expression PLUS term .)
    RPAREN          reduce using rule 77 (conditional_expression -> unary_expression PLUS term .)
    COMMA           reduce using rule 77 (conditional_expression -> unary_expression PLUS term .)
    LOR             reduce using rule 77 (conditional_expression -> unary_expression PLUS term .)


state 110

    (78) conditional_expression -> unary_expression TIMES term .

    SEMI            reduce using rule 78 (conditional_expression -> unary_expression TIMES term .)
    RPAREN          reduce using rule 78 (conditional_expression -> unary_expression TIMES term .)
    COMMA           reduce using rule 78 (conditional_expression -> unary_expression TIMES term .)
    LOR             reduce using rule 78 (conditional_expression -> unary_expression TIMES term .)


state 111

    (79) conditional_expression -> unary_expression MOD term .

    SEMI            reduce using rule 79 (conditional_expression -> unary_expression MOD term .)
    RPAREN          reduce using rule 79 (conditional_expression -> unary_expression MOD term .)
    COMMA           reduce using rule 79 (conditional_expression -> unary_expression MOD term .)
    LOR             reduce using rule 79 (conditional_expression -> unary_expression MOD term .)


state 112

    (80) conditional_expression -> unary_expression MINUS term .

    SEMI            reduce using rule 80 (conditional_expression -> unary_expression MINUS term .)
    RPAREN          reduce using rule 80 (conditional_expression -> unary_expression MINUS term .)
    COMMA           reduce using rule 80 (conditional_expression -> unary_expression MINUS term .)
    LOR             reduce using rule 80 (conditional_expression -> unary_expression MINUS term .)


state 113

    (51) function_call -> ID LPAREN expression_list . RPAREN
    (54) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 126
    COMMA           shift and go to state 127


state 114

    (52) function_call -> ID LPAREN RPAREN .

    EQUALS          reduce using rule 52 (function_call -> ID LPAREN RPAREN .)
    PP              reduce using rule 52 (function_call -> ID LPAREN RPAREN .)
    MM              reduce using rule 52 (function_call -> ID LPAREN RPAREN .)
    LT              reduce using rule 52 (function_call -> ID LPAREN RPAREN .)
    LE              reduce using rule 52 (function_call -> ID LPAREN RPAREN .)
    GE              reduce using rule 52 (function_call -> ID LPAREN RPAREN .)
    GT              reduce using rule 52 (function_call -> ID LPAREN RPAREN .)
    EQ              reduce using rule 52 (function_call -> ID LPAREN RPAREN .)
    NE              reduce using rule 52 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 52 (function_call -> ID LPAREN RPAREN .)
    LAND            reduce using rule 52 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 52 (function_call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 52 (function_call -> ID LPAREN RPAREN .)
    MOD             reduce using rule 52 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 52 (function_call -> ID LPAREN RPAREN .)
    SEMI            reduce using rule 52 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 52 (function_call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 52 (function_call -> ID LPAREN RPAREN .)
    LOR             reduce using rule 52 (function_call -> ID LPAREN RPAREN .)


state 115

    (53) expression_list -> expression .

    RPAREN          reduce using rule 53 (expression_list -> expression .)
    COMMA           reduce using rule 53 (expression_list -> expression .)


state 116

    (63) term -> ID LBRACKET ID . RBRACKET

    RBRACKET        shift and go to state 128


state 117

    (62) term -> ID LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 129


state 118

    (67) factor -> LPAREN expression RPAREN .

    EQUALS          reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    PP              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    MM              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    EQ              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    LAND            reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    LOR             reduce using rule 67 (factor -> LPAREN expression RPAREN .)


state 119

    (12) args -> INT ID COMMA . INT ID

    INT             shift and go to state 130


state 120

    (37) compound_statement -> LBRACE declaration_list statement_list RBRACE .

    SEMI            reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INCLUDE         reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    VOID            reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INT             reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    $end            reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RBRACE          reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LBRACE          reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BREAK           reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RETURN          reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FOR             reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    WHILE           reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    IF              reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    STRING          reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PP              reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    MM              reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    AND             reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ID              reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LNOT            reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    NUMBER          reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LPAREN          reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ELSE            reduce using rule 37 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)


state 121

    (28) jump_statement -> RETURN expression SEMI .

    RBRACE          reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    STRING          reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    PP              reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    MM              reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    AND             reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    ID              reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    LNOT            reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    NUMBER          reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 28 (jump_statement -> RETURN expression SEMI .)


state 122

    (29) loop_statement -> FOR LPAREN expression_statement . expression_statement expression_statement RPAREN statement
    (30) loop_statement -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement
    (42) expression_statement -> . SEMI
    (43) expression_statement -> . expression SEMI
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    SEMI            shift and go to state 49
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression_statement           shift and go to state 131
    expression                     shift and go to state 56
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 123

    (31) loop_statement -> WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 132


state 124

    (32) condition_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (33) condition_statement -> IF LPAREN expression . RPAREN statement
    (35) condition_statement -> IF LPAREN expression . LOR expression RPAREN statement ELSE statement

    RPAREN          shift and go to state 133
    LOR             shift and go to state 134


state 125

    (34) condition_statement -> IF LPAREN ID . MOD ID EQ NUMBER RPAREN statement
    (51) function_call -> ID . LPAREN expression_list RPAREN
    (52) function_call -> ID . LPAREN RPAREN
    (61) term -> ID .
    (62) term -> ID . LBRACKET NUMBER RBRACKET
    (63) term -> ID . LBRACKET ID RBRACKET

  ! shift/reduce conflict for MOD resolved as shift
    MOD             shift and go to state 135
    LPAREN          shift and go to state 82
    EQUALS          reduce using rule 61 (term -> ID .)
    PP              reduce using rule 61 (term -> ID .)
    MM              reduce using rule 61 (term -> ID .)
    LT              reduce using rule 61 (term -> ID .)
    LE              reduce using rule 61 (term -> ID .)
    GE              reduce using rule 61 (term -> ID .)
    GT              reduce using rule 61 (term -> ID .)
    EQ              reduce using rule 61 (term -> ID .)
    NE              reduce using rule 61 (term -> ID .)
    AND             reduce using rule 61 (term -> ID .)
    LAND            reduce using rule 61 (term -> ID .)
    PLUS            reduce using rule 61 (term -> ID .)
    TIMES           reduce using rule 61 (term -> ID .)
    MINUS           reduce using rule 61 (term -> ID .)
    RPAREN          reduce using rule 61 (term -> ID .)
    LOR             reduce using rule 61 (term -> ID .)
    LBRACKET        shift and go to state 83

  ! MOD             [ reduce using rule 61 (term -> ID .) ]


state 126

    (51) function_call -> ID LPAREN expression_list RPAREN .

    EQUALS          reduce using rule 51 (function_call -> ID LPAREN expression_list RPAREN .)
    PP              reduce using rule 51 (function_call -> ID LPAREN expression_list RPAREN .)
    MM              reduce using rule 51 (function_call -> ID LPAREN expression_list RPAREN .)
    LT              reduce using rule 51 (function_call -> ID LPAREN expression_list RPAREN .)
    LE              reduce using rule 51 (function_call -> ID LPAREN expression_list RPAREN .)
    GE              reduce using rule 51 (function_call -> ID LPAREN expression_list RPAREN .)
    GT              reduce using rule 51 (function_call -> ID LPAREN expression_list RPAREN .)
    EQ              reduce using rule 51 (function_call -> ID LPAREN expression_list RPAREN .)
    NE              reduce using rule 51 (function_call -> ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 51 (function_call -> ID LPAREN expression_list RPAREN .)
    LAND            reduce using rule 51 (function_call -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 51 (function_call -> ID LPAREN expression_list RPAREN .)
    TIMES           reduce using rule 51 (function_call -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 51 (function_call -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 51 (function_call -> ID LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 51 (function_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 51 (function_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 51 (function_call -> ID LPAREN expression_list RPAREN .)
    LOR             reduce using rule 51 (function_call -> ID LPAREN expression_list RPAREN .)


state 127

    (54) expression_list -> expression_list COMMA . expression
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 136
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 128

    (63) term -> ID LBRACKET ID RBRACKET .

    EQUALS          reduce using rule 63 (term -> ID LBRACKET ID RBRACKET .)
    PP              reduce using rule 63 (term -> ID LBRACKET ID RBRACKET .)
    MM              reduce using rule 63 (term -> ID LBRACKET ID RBRACKET .)
    LT              reduce using rule 63 (term -> ID LBRACKET ID RBRACKET .)
    LE              reduce using rule 63 (term -> ID LBRACKET ID RBRACKET .)
    GE              reduce using rule 63 (term -> ID LBRACKET ID RBRACKET .)
    GT              reduce using rule 63 (term -> ID LBRACKET ID RBRACKET .)
    EQ              reduce using rule 63 (term -> ID LBRACKET ID RBRACKET .)
    NE              reduce using rule 63 (term -> ID LBRACKET ID RBRACKET .)
    AND             reduce using rule 63 (term -> ID LBRACKET ID RBRACKET .)
    LAND            reduce using rule 63 (term -> ID LBRACKET ID RBRACKET .)
    PLUS            reduce using rule 63 (term -> ID LBRACKET ID RBRACKET .)
    TIMES           reduce using rule 63 (term -> ID LBRACKET ID RBRACKET .)
    MOD             reduce using rule 63 (term -> ID LBRACKET ID RBRACKET .)
    MINUS           reduce using rule 63 (term -> ID LBRACKET ID RBRACKET .)
    SEMI            reduce using rule 63 (term -> ID LBRACKET ID RBRACKET .)
    RPAREN          reduce using rule 63 (term -> ID LBRACKET ID RBRACKET .)
    COMMA           reduce using rule 63 (term -> ID LBRACKET ID RBRACKET .)
    LOR             reduce using rule 63 (term -> ID LBRACKET ID RBRACKET .)


state 129

    (62) term -> ID LBRACKET NUMBER RBRACKET .

    EQUALS          reduce using rule 62 (term -> ID LBRACKET NUMBER RBRACKET .)
    PP              reduce using rule 62 (term -> ID LBRACKET NUMBER RBRACKET .)
    MM              reduce using rule 62 (term -> ID LBRACKET NUMBER RBRACKET .)
    LT              reduce using rule 62 (term -> ID LBRACKET NUMBER RBRACKET .)
    LE              reduce using rule 62 (term -> ID LBRACKET NUMBER RBRACKET .)
    GE              reduce using rule 62 (term -> ID LBRACKET NUMBER RBRACKET .)
    GT              reduce using rule 62 (term -> ID LBRACKET NUMBER RBRACKET .)
    EQ              reduce using rule 62 (term -> ID LBRACKET NUMBER RBRACKET .)
    NE              reduce using rule 62 (term -> ID LBRACKET NUMBER RBRACKET .)
    AND             reduce using rule 62 (term -> ID LBRACKET NUMBER RBRACKET .)
    LAND            reduce using rule 62 (term -> ID LBRACKET NUMBER RBRACKET .)
    PLUS            reduce using rule 62 (term -> ID LBRACKET NUMBER RBRACKET .)
    TIMES           reduce using rule 62 (term -> ID LBRACKET NUMBER RBRACKET .)
    MOD             reduce using rule 62 (term -> ID LBRACKET NUMBER RBRACKET .)
    MINUS           reduce using rule 62 (term -> ID LBRACKET NUMBER RBRACKET .)
    SEMI            reduce using rule 62 (term -> ID LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 62 (term -> ID LBRACKET NUMBER RBRACKET .)
    COMMA           reduce using rule 62 (term -> ID LBRACKET NUMBER RBRACKET .)
    LOR             reduce using rule 62 (term -> ID LBRACKET NUMBER RBRACKET .)


state 130

    (12) args -> INT ID COMMA INT . ID

    ID              shift and go to state 137


state 131

    (29) loop_statement -> FOR LPAREN expression_statement expression_statement . expression_statement RPAREN statement
    (30) loop_statement -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement
    (42) expression_statement -> . SEMI
    (43) expression_statement -> . expression SEMI
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    SEMI            shift and go to state 49
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression_statement           shift and go to state 138
    expression                     shift and go to state 139
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 132

    (31) loop_statement -> WHILE LPAREN expression RPAREN . statement
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (36) compound_statement -> . LBRACE declaration_list RBRACE
    (37) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (38) compound_statement -> . LBRACE statement_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (42) expression_statement -> . SEMI
    (43) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN ID MOD ID EQ NUMBER RPAREN statement
    (35) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 22
    SEMI            shift and go to state 49
    BREAK           shift and go to state 57
    RETURN          shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 56
    statement                      shift and go to state 140
    compound_statement             shift and go to state 50
    expression_statement           shift and go to state 51
    jump_statement                 shift and go to state 52
    loop_statement                 shift and go to state 53
    condition_statement            shift and go to state 54
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 133

    (32) condition_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (33) condition_statement -> IF LPAREN expression RPAREN . statement
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (36) compound_statement -> . LBRACE declaration_list RBRACE
    (37) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (38) compound_statement -> . LBRACE statement_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (42) expression_statement -> . SEMI
    (43) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN ID MOD ID EQ NUMBER RPAREN statement
    (35) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 22
    SEMI            shift and go to state 49
    BREAK           shift and go to state 57
    RETURN          shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 56
    statement                      shift and go to state 141
    compound_statement             shift and go to state 50
    expression_statement           shift and go to state 51
    jump_statement                 shift and go to state 52
    loop_statement                 shift and go to state 53
    condition_statement            shift and go to state 54
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 134

    (35) condition_statement -> IF LPAREN expression LOR . expression RPAREN statement ELSE statement
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 142
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 135

    (34) condition_statement -> IF LPAREN ID MOD . ID EQ NUMBER RPAREN statement

    ID              shift and go to state 143


state 136

    (54) expression_list -> expression_list COMMA expression .

    RPAREN          reduce using rule 54 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 54 (expression_list -> expression_list COMMA expression .)


state 137

    (12) args -> INT ID COMMA INT ID .

    RPAREN          reduce using rule 12 (args -> INT ID COMMA INT ID .)


state 138

    (29) loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement . RPAREN statement

    RPAREN          shift and go to state 144


state 139

    (30) loop_statement -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement
    (43) expression_statement -> expression . SEMI

    RPAREN          shift and go to state 145
    SEMI            shift and go to state 93


state 140

    (31) loop_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    PP              reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    MM              reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    AND             reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)


state 141

    (32) condition_statement -> IF LPAREN expression RPAREN statement . ELSE statement
    (33) condition_statement -> IF LPAREN expression RPAREN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 146
    RBRACE          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    PP              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    MM              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    AND             reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)

  ! ELSE            [ reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .) ]


state 142

    (35) condition_statement -> IF LPAREN expression LOR expression . RPAREN statement ELSE statement

    RPAREN          shift and go to state 147


state 143

    (34) condition_statement -> IF LPAREN ID MOD ID . EQ NUMBER RPAREN statement

    EQ              shift and go to state 148


state 144

    (29) loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN . statement
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (36) compound_statement -> . LBRACE declaration_list RBRACE
    (37) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (38) compound_statement -> . LBRACE statement_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (42) expression_statement -> . SEMI
    (43) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN ID MOD ID EQ NUMBER RPAREN statement
    (35) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 22
    SEMI            shift and go to state 49
    BREAK           shift and go to state 57
    RETURN          shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression_statement           shift and go to state 51
    statement                      shift and go to state 149
    compound_statement             shift and go to state 50
    jump_statement                 shift and go to state 52
    loop_statement                 shift and go to state 53
    condition_statement            shift and go to state 54
    expression                     shift and go to state 56
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 145

    (30) loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (36) compound_statement -> . LBRACE declaration_list RBRACE
    (37) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (38) compound_statement -> . LBRACE statement_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (42) expression_statement -> . SEMI
    (43) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN ID MOD ID EQ NUMBER RPAREN statement
    (35) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 22
    SEMI            shift and go to state 49
    BREAK           shift and go to state 57
    RETURN          shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression_statement           shift and go to state 51
    expression                     shift and go to state 56
    statement                      shift and go to state 150
    compound_statement             shift and go to state 50
    jump_statement                 shift and go to state 52
    loop_statement                 shift and go to state 53
    condition_statement            shift and go to state 54
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 146

    (32) condition_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (36) compound_statement -> . LBRACE declaration_list RBRACE
    (37) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (38) compound_statement -> . LBRACE statement_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (42) expression_statement -> . SEMI
    (43) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN ID MOD ID EQ NUMBER RPAREN statement
    (35) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 22
    SEMI            shift and go to state 49
    BREAK           shift and go to state 57
    RETURN          shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 56
    statement                      shift and go to state 151
    compound_statement             shift and go to state 50
    expression_statement           shift and go to state 51
    jump_statement                 shift and go to state 52
    loop_statement                 shift and go to state 53
    condition_statement            shift and go to state 54
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 147

    (35) condition_statement -> IF LPAREN expression LOR expression RPAREN . statement ELSE statement
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (36) compound_statement -> . LBRACE declaration_list RBRACE
    (37) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (38) compound_statement -> . LBRACE statement_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (42) expression_statement -> . SEMI
    (43) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN ID MOD ID EQ NUMBER RPAREN statement
    (35) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 22
    SEMI            shift and go to state 49
    BREAK           shift and go to state 57
    RETURN          shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 56
    statement                      shift and go to state 152
    compound_statement             shift and go to state 50
    expression_statement           shift and go to state 51
    jump_statement                 shift and go to state 52
    loop_statement                 shift and go to state 53
    condition_statement            shift and go to state 54
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 148

    (34) condition_statement -> IF LPAREN ID MOD ID EQ . NUMBER RPAREN statement

    NUMBER          shift and go to state 153


state 149

    (29) loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .

    RBRACE          reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    LBRACE          reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    SEMI            reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    BREAK           reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    RETURN          reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    FOR             reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    WHILE           reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    IF              reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    STRING          reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    PP              reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    MM              reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    AND             reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    ID              reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    LNOT            reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    NUMBER          reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    LPAREN          reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    ELSE            reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)


state 150

    (30) loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .

    RBRACE          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LBRACE          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SEMI            reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FOR             reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IF              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STRING          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    PP              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MM              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    AND             reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ID              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LNOT            reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    NUMBER          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)


state 151

    (32) condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PP              reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MM              reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AND             reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LNOT            reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 152

    (35) condition_statement -> IF LPAREN expression LOR expression RPAREN statement . ELSE statement

    ELSE            shift and go to state 154


state 153

    (34) condition_statement -> IF LPAREN ID MOD ID EQ NUMBER . RPAREN statement

    RPAREN          shift and go to state 155


state 154

    (35) condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE . statement
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (36) compound_statement -> . LBRACE declaration_list RBRACE
    (37) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (38) compound_statement -> . LBRACE statement_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (42) expression_statement -> . SEMI
    (43) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN ID MOD ID EQ NUMBER RPAREN statement
    (35) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 22
    SEMI            shift and go to state 49
    BREAK           shift and go to state 57
    RETURN          shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    expression                     shift and go to state 56
    statement                      shift and go to state 156
    compound_statement             shift and go to state 50
    expression_statement           shift and go to state 51
    jump_statement                 shift and go to state 52
    loop_statement                 shift and go to state 53
    condition_statement            shift and go to state 54
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 155

    (34) condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN . statement
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (36) compound_statement -> . LBRACE declaration_list RBRACE
    (37) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (38) compound_statement -> . LBRACE statement_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (42) expression_statement -> . SEMI
    (43) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN ID MOD ID EQ NUMBER RPAREN statement
    (35) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (46) expression -> . conditional_expression
    (47) expression -> . unary_expression EQUALS expression
    (48) expression -> . STRING
    (56) expression -> . PP unary_expression
    (57) expression -> . MM unary_expression
    (58) expression -> . unary_expression PP
    (59) expression -> . unary_expression MM
    (68) conditional_expression -> . cast_expression
    (69) conditional_expression -> . unary_expression LT term
    (70) conditional_expression -> . unary_expression LE term
    (71) conditional_expression -> . unary_expression GE term
    (72) conditional_expression -> . unary_expression GT term
    (73) conditional_expression -> . unary_expression EQ term
    (74) conditional_expression -> . unary_expression NE term
    (75) conditional_expression -> . unary_expression AND term
    (76) conditional_expression -> . unary_expression LAND term
    (77) conditional_expression -> . unary_expression PLUS term
    (78) conditional_expression -> . unary_expression TIMES term
    (79) conditional_expression -> . unary_expression MOD term
    (80) conditional_expression -> . unary_expression MINUS term
    (55) unary_expression -> . function_call
    (60) unary_expression -> . AND term
    (64) unary_expression -> . term
    (81) cast_expression -> . unary_expression
    (51) function_call -> . ID LPAREN expression_list RPAREN
    (52) function_call -> . ID LPAREN RPAREN
    (50) term -> . temp
    (61) term -> . ID
    (62) term -> . ID LBRACKET NUMBER RBRACKET
    (63) term -> . ID LBRACKET ID RBRACKET
    (65) term -> . factor
    (49) temp -> . LNOT unary_expression
    (66) factor -> . NUMBER
    (67) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 22
    SEMI            shift and go to state 49
    BREAK           shift and go to state 57
    RETURN          shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    AND             shift and go to state 32
    ID              shift and go to state 34
    LNOT            shift and go to state 39
    NUMBER          shift and go to state 37
    LPAREN          shift and go to state 35

    statement                      shift and go to state 157
    compound_statement             shift and go to state 50
    expression_statement           shift and go to state 51
    jump_statement                 shift and go to state 52
    loop_statement                 shift and go to state 53
    condition_statement            shift and go to state 54
    expression                     shift and go to state 56
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    cast_expression                shift and go to state 30
    term                           shift and go to state 31
    function_call                  shift and go to state 33
    temp                           shift and go to state 36
    factor                         shift and go to state 38

state 156

    (35) condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 35 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 35 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 35 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 35 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 35 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 35 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 35 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    IF              reduce using rule 35 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 35 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    PP              reduce using rule 35 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    MM              reduce using rule 35 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    AND             reduce using rule 35 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    ID              reduce using rule 35 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    LNOT            reduce using rule 35 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 35 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 35 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 35 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)


state 157

    (34) condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN statement .

    RBRACE          reduce using rule 34 (condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN statement .)
    LBRACE          reduce using rule 34 (condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN statement .)
    SEMI            reduce using rule 34 (condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN statement .)
    BREAK           reduce using rule 34 (condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN statement .)
    RETURN          reduce using rule 34 (condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN statement .)
    FOR             reduce using rule 34 (condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN statement .)
    WHILE           reduce using rule 34 (condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN statement .)
    IF              reduce using rule 34 (condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN statement .)
    STRING          reduce using rule 34 (condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN statement .)
    PP              reduce using rule 34 (condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN statement .)
    MM              reduce using rule 34 (condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN statement .)
    AND             reduce using rule 34 (condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN statement .)
    ID              reduce using rule 34 (condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN statement .)
    LNOT            reduce using rule 34 (condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN statement .)
    NUMBER          reduce using rule 34 (condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN statement .)
    LPAREN          reduce using rule 34 (condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN statement .)
    ELSE            reduce using rule 34 (condition_statement -> IF LPAREN ID MOD ID EQ NUMBER RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MOD in state 125 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 141 resolved as shift
