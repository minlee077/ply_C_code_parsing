Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> include_header
Rule 4     empty -> <empty>
Rule 5     include_header -> INCLUDE HEADER
Rule 6     external_declaration -> function_definition
Rule 7     function_definition -> id_declaration arguments compound_statement
Rule 8     arguments -> LPAREN args RPAREN
Rule 9     args -> empty
Rule 10    args -> VOID
Rule 11    args -> INT ID
Rule 12    args -> INT ID COMMA INT ID
Rule 13    external_declaration -> declaration
Rule 14    declaration -> init_declaration SEMI
Rule 15    init_declaration -> id_declaration
Rule 16    init_declaration -> id_declaration LBRACKET NUMBER RBRACKET
Rule 17    init_declaration -> id_declaration EQUALS expression
Rule 18    id_declaration -> VOID ID
Rule 19    id_declaration -> INT ID
Rule 20    external_declaration -> SEMI
Rule 21    statement -> compound_statement
Rule 22    statement -> expression_statement
Rule 23    statement -> jump_statement
Rule 24    statement -> loop_statement
Rule 25    statement -> condition_statement
Rule 26    jump_statement -> BREAK SEMI
Rule 27    jump_statement -> RETURN SEMI
Rule 28    jump_statement -> RETURN expression SEMI
Rule 29    loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
Rule 30    loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement
Rule 31    loop_statement -> WHILE LPAREN expression RPAREN statement
Rule 32    condition_statement -> IF LPAREN expression RPAREN statement ELSE statement empty
Rule 33    condition_statement -> IF LPAREN expression RPAREN statement
Rule 34    condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement
Rule 35    compound_statement -> LBRACE declaration_list RBRACE
Rule 36    compound_statement -> LBRACE declaration_list statement_list RBRACE
Rule 37    compound_statement -> LBRACE statement_list RBRACE
Rule 38    compound_statement -> LBRACE RBRACE
Rule 39    declaration_list -> declaration
Rule 40    declaration_list -> declaration_list declaration
Rule 41    expression_statement -> SEMI
Rule 42    expression_statement -> expression SEMI
Rule 43    statement_list -> statement
Rule 44    statement_list -> statement_list statement
Rule 45    expression -> conditional_expression
Rule 46    expression -> unary_expression EQUALS expression
Rule 47    expression -> STRING
Rule 48    unary_expression -> LNOT term
Rule 49    function_call -> ID LPAREN expression_list RPAREN
Rule 50    function_call -> ID LPAREN RPAREN
Rule 51    expression_list -> expression
Rule 52    expression_list -> expression_list COMMA expression
Rule 53    unary_expression -> function_call
Rule 54    expression -> PP unary_expression
Rule 55    expression -> MM unary_expression
Rule 56    expression -> unary_expression PP
Rule 57    expression -> unary_expression MM
Rule 58    unary_expression -> AND term
Rule 59    term -> ID
Rule 60    term -> ID LBRACKET NUMBER RBRACKET
Rule 61    term -> ID LBRACKET ID RBRACKET
Rule 62    term -> factor
Rule 63    factor -> NUMBER
Rule 64    factor -> LPAREN expression RPAREN
Rule 65    unary_expression -> term
Rule 66    unary_expression -> unary_expression LT term
Rule 67    unary_expression -> unary_expression LE term
Rule 68    unary_expression -> unary_expression GE term
Rule 69    unary_expression -> unary_expression GT term
Rule 70    unary_expression -> unary_expression EQ term
Rule 71    unary_expression -> unary_expression NE term
Rule 72    unary_expression -> unary_expression AND term
Rule 73    unary_expression -> unary_expression LAND unary_expression
Rule 74    unary_expression -> unary_expression PLUS term
Rule 75    unary_expression -> unary_expression TIMES term
Rule 76    unary_expression -> unary_expression MOD term
Rule 77    unary_expression -> unary_expression MINUS term
Rule 78    conditional_expression -> unary_expression

Terminals, with rules where they appear

AND                  : 58 72
BREAK                : 26
COMMA                : 12 52
ELSE                 : 32 34
EQ                   : 70
EQUALS               : 17 46
FOR                  : 29 30
GE                   : 68
GT                   : 69
HEADER               : 5
ID                   : 11 12 12 18 19 49 50 59 60 61 61
IF                   : 32 33 34
INCLUDE              : 5
INT                  : 11 12 12 19
LAND                 : 73
LBRACE               : 35 36 37 38
LBRACKET             : 16 60 61
LE                   : 67
LNOT                 : 48
LOR                  : 34
LPAREN               : 8 29 30 31 32 33 34 49 50 64
LT                   : 66
MINUS                : 77
MM                   : 55 57
MOD                  : 76
NE                   : 71
NUMBER               : 16 60 63
PLUS                 : 74
PP                   : 54 56
RBRACE               : 35 36 37 38
RBRACKET             : 16 60 61
RETURN               : 27 28
RPAREN               : 8 29 30 31 32 33 34 49 50 64
SEMI                 : 14 20 26 27 28 41 42
STRING               : 47
TIMES                : 75
VOID                 : 10 18
WHILE                : 31
error                : 

Nonterminals, with rules where they appear

args                 : 8
arguments            : 7
compound_statement   : 7 21
condition_statement  : 25
conditional_expression : 45
declaration          : 13 39 40
declaration_list     : 35 36 40
empty                : 9 32
expression           : 17 28 30 31 32 33 34 34 42 46 51 52 64
expression_list      : 49 52
expression_statement : 22 29 29 29 30 30
external_declaration : 1 2
factor               : 62
function_call        : 53
function_definition  : 6
id_declaration       : 7 15 16 17
include_header       : 3
init_declaration     : 14
jump_statement       : 23
loop_statement       : 24
statement            : 29 30 31 32 32 33 34 34 43 44
statement_list       : 36 37 44
term                 : 48 58 65 66 67 68 69 70 71 72 74 75 76 77
translation_unit     : 2 0
unary_expression     : 46 54 55 56 57 66 67 68 69 70 71 72 73 73 74 75 76 77 78

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . include_header
    (6) external_declaration -> . function_definition
    (13) external_declaration -> . declaration
    (20) external_declaration -> . SEMI
    (5) include_header -> . INCLUDE HEADER
    (7) function_definition -> . id_declaration arguments compound_statement
    (14) declaration -> . init_declaration SEMI
    (18) id_declaration -> . VOID ID
    (19) id_declaration -> . INT ID
    (15) init_declaration -> . id_declaration
    (16) init_declaration -> . id_declaration LBRACKET NUMBER RBRACKET
    (17) init_declaration -> . id_declaration EQUALS expression

    SEMI            shift and go to state 6
    INCLUDE         shift and go to state 7
    VOID            shift and go to state 10
    INT             shift and go to state 11

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    include_header                 shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    id_declaration                 shift and go to state 8
    init_declaration               shift and go to state 9

state 1

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . include_header
    (6) external_declaration -> . function_definition
    (13) external_declaration -> . declaration
    (20) external_declaration -> . SEMI
    (5) include_header -> . INCLUDE HEADER
    (7) function_definition -> . id_declaration arguments compound_statement
    (14) declaration -> . init_declaration SEMI
    (18) id_declaration -> . VOID ID
    (19) id_declaration -> . INT ID
    (15) init_declaration -> . id_declaration
    (16) init_declaration -> . id_declaration LBRACKET NUMBER RBRACKET
    (17) init_declaration -> . id_declaration EQUALS expression

    SEMI            shift and go to state 6
    INCLUDE         shift and go to state 7
    VOID            shift and go to state 10
    INT             shift and go to state 11

    external_declaration           shift and go to state 12
    include_header                 shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    id_declaration                 shift and go to state 8
    init_declaration               shift and go to state 9

state 2

    (1) translation_unit -> external_declaration .

    SEMI            reduce using rule 1 (translation_unit -> external_declaration .)
    INCLUDE         reduce using rule 1 (translation_unit -> external_declaration .)
    VOID            reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)


state 3

    (3) external_declaration -> include_header .

    SEMI            reduce using rule 3 (external_declaration -> include_header .)
    INCLUDE         reduce using rule 3 (external_declaration -> include_header .)
    VOID            reduce using rule 3 (external_declaration -> include_header .)
    INT             reduce using rule 3 (external_declaration -> include_header .)
    $end            reduce using rule 3 (external_declaration -> include_header .)


state 4

    (6) external_declaration -> function_definition .

    SEMI            reduce using rule 6 (external_declaration -> function_definition .)
    INCLUDE         reduce using rule 6 (external_declaration -> function_definition .)
    VOID            reduce using rule 6 (external_declaration -> function_definition .)
    INT             reduce using rule 6 (external_declaration -> function_definition .)
    $end            reduce using rule 6 (external_declaration -> function_definition .)


state 5

    (13) external_declaration -> declaration .

    SEMI            reduce using rule 13 (external_declaration -> declaration .)
    INCLUDE         reduce using rule 13 (external_declaration -> declaration .)
    VOID            reduce using rule 13 (external_declaration -> declaration .)
    INT             reduce using rule 13 (external_declaration -> declaration .)
    $end            reduce using rule 13 (external_declaration -> declaration .)


state 6

    (20) external_declaration -> SEMI .

    SEMI            reduce using rule 20 (external_declaration -> SEMI .)
    INCLUDE         reduce using rule 20 (external_declaration -> SEMI .)
    VOID            reduce using rule 20 (external_declaration -> SEMI .)
    INT             reduce using rule 20 (external_declaration -> SEMI .)
    $end            reduce using rule 20 (external_declaration -> SEMI .)


state 7

    (5) include_header -> INCLUDE . HEADER

    HEADER          shift and go to state 13


state 8

    (7) function_definition -> id_declaration . arguments compound_statement
    (15) init_declaration -> id_declaration .
    (16) init_declaration -> id_declaration . LBRACKET NUMBER RBRACKET
    (17) init_declaration -> id_declaration . EQUALS expression
    (8) arguments -> . LPAREN args RPAREN

    SEMI            reduce using rule 15 (init_declaration -> id_declaration .)
    LBRACKET        shift and go to state 15
    EQUALS          shift and go to state 16
    LPAREN          shift and go to state 17

    arguments                      shift and go to state 14

state 9

    (14) declaration -> init_declaration . SEMI

    SEMI            shift and go to state 18


state 10

    (18) id_declaration -> VOID . ID

    ID              shift and go to state 19


state 11

    (19) id_declaration -> INT . ID

    ID              shift and go to state 20


state 12

    (2) translation_unit -> translation_unit external_declaration .

    SEMI            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INCLUDE         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 13

    (5) include_header -> INCLUDE HEADER .

    SEMI            reduce using rule 5 (include_header -> INCLUDE HEADER .)
    INCLUDE         reduce using rule 5 (include_header -> INCLUDE HEADER .)
    VOID            reduce using rule 5 (include_header -> INCLUDE HEADER .)
    INT             reduce using rule 5 (include_header -> INCLUDE HEADER .)
    $end            reduce using rule 5 (include_header -> INCLUDE HEADER .)


state 14

    (7) function_definition -> id_declaration arguments . compound_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE

    LBRACE          shift and go to state 22

    compound_statement             shift and go to state 21

state 15

    (16) init_declaration -> id_declaration LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 23


state 16

    (17) init_declaration -> id_declaration EQUALS . expression
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    expression                     shift and go to state 24
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 17

    (8) arguments -> LPAREN . args RPAREN
    (9) args -> . empty
    (10) args -> . VOID
    (11) args -> . INT ID
    (12) args -> . INT ID COMMA INT ID
    (4) empty -> .

    VOID            shift and go to state 40
    INT             shift and go to state 41
    RPAREN          reduce using rule 4 (empty -> .)

    args                           shift and go to state 38
    empty                          shift and go to state 39

state 18

    (14) declaration -> init_declaration SEMI .

    SEMI            reduce using rule 14 (declaration -> init_declaration SEMI .)
    INCLUDE         reduce using rule 14 (declaration -> init_declaration SEMI .)
    VOID            reduce using rule 14 (declaration -> init_declaration SEMI .)
    INT             reduce using rule 14 (declaration -> init_declaration SEMI .)
    $end            reduce using rule 14 (declaration -> init_declaration SEMI .)
    RBRACE          reduce using rule 14 (declaration -> init_declaration SEMI .)
    LBRACE          reduce using rule 14 (declaration -> init_declaration SEMI .)
    BREAK           reduce using rule 14 (declaration -> init_declaration SEMI .)
    RETURN          reduce using rule 14 (declaration -> init_declaration SEMI .)
    FOR             reduce using rule 14 (declaration -> init_declaration SEMI .)
    WHILE           reduce using rule 14 (declaration -> init_declaration SEMI .)
    IF              reduce using rule 14 (declaration -> init_declaration SEMI .)
    STRING          reduce using rule 14 (declaration -> init_declaration SEMI .)
    PP              reduce using rule 14 (declaration -> init_declaration SEMI .)
    MM              reduce using rule 14 (declaration -> init_declaration SEMI .)
    LNOT            reduce using rule 14 (declaration -> init_declaration SEMI .)
    AND             reduce using rule 14 (declaration -> init_declaration SEMI .)
    ID              reduce using rule 14 (declaration -> init_declaration SEMI .)
    NUMBER          reduce using rule 14 (declaration -> init_declaration SEMI .)
    LPAREN          reduce using rule 14 (declaration -> init_declaration SEMI .)


state 19

    (18) id_declaration -> VOID ID .

    LBRACKET        reduce using rule 18 (id_declaration -> VOID ID .)
    EQUALS          reduce using rule 18 (id_declaration -> VOID ID .)
    LPAREN          reduce using rule 18 (id_declaration -> VOID ID .)
    SEMI            reduce using rule 18 (id_declaration -> VOID ID .)


state 20

    (19) id_declaration -> INT ID .

    LBRACKET        reduce using rule 19 (id_declaration -> INT ID .)
    EQUALS          reduce using rule 19 (id_declaration -> INT ID .)
    LPAREN          reduce using rule 19 (id_declaration -> INT ID .)
    SEMI            reduce using rule 19 (id_declaration -> INT ID .)


state 21

    (7) function_definition -> id_declaration arguments compound_statement .

    SEMI            reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)
    INCLUDE         reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)
    VOID            reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)
    INT             reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)
    $end            reduce using rule 7 (function_definition -> id_declaration arguments compound_statement .)


state 22

    (35) compound_statement -> LBRACE . declaration_list RBRACE
    (36) compound_statement -> LBRACE . declaration_list statement_list RBRACE
    (37) compound_statement -> LBRACE . statement_list RBRACE
    (38) compound_statement -> LBRACE . RBRACE
    (39) declaration_list -> . declaration
    (40) declaration_list -> . declaration_list declaration
    (43) statement_list -> . statement
    (44) statement_list -> . statement_list statement
    (14) declaration -> . init_declaration SEMI
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (15) init_declaration -> . id_declaration
    (16) init_declaration -> . id_declaration LBRACKET NUMBER RBRACKET
    (17) init_declaration -> . id_declaration EQUALS expression
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement empty
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (18) id_declaration -> . VOID ID
    (19) id_declaration -> . INT ID
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 43
    LBRACE          shift and go to state 22
    SEMI            shift and go to state 47
    BREAK           shift and go to state 55
    RETURN          shift and go to state 56
    FOR             shift and go to state 57
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    VOID            shift and go to state 10
    INT             shift and go to state 11
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    declaration_list               shift and go to state 42
    statement_list                 shift and go to state 44
    declaration                    shift and go to state 45
    statement                      shift and go to state 46
    init_declaration               shift and go to state 9
    compound_statement             shift and go to state 48
    expression_statement           shift and go to state 49
    jump_statement                 shift and go to state 50
    loop_statement                 shift and go to state 51
    condition_statement            shift and go to state 52
    id_declaration                 shift and go to state 53
    expression                     shift and go to state 54
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 23

    (16) init_declaration -> id_declaration LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 60


state 24

    (17) init_declaration -> id_declaration EQUALS expression .

    SEMI            reduce using rule 17 (init_declaration -> id_declaration EQUALS expression .)


state 25

    (45) expression -> conditional_expression .

    SEMI            reduce using rule 45 (expression -> conditional_expression .)
    RPAREN          reduce using rule 45 (expression -> conditional_expression .)
    COMMA           reduce using rule 45 (expression -> conditional_expression .)
    LOR             reduce using rule 45 (expression -> conditional_expression .)


state 26

    (46) expression -> unary_expression . EQUALS expression
    (56) expression -> unary_expression . PP
    (57) expression -> unary_expression . MM
    (78) conditional_expression -> unary_expression .
    (66) unary_expression -> unary_expression . LT term
    (67) unary_expression -> unary_expression . LE term
    (68) unary_expression -> unary_expression . GE term
    (69) unary_expression -> unary_expression . GT term
    (70) unary_expression -> unary_expression . EQ term
    (71) unary_expression -> unary_expression . NE term
    (72) unary_expression -> unary_expression . AND term
    (73) unary_expression -> unary_expression . LAND unary_expression
    (74) unary_expression -> unary_expression . PLUS term
    (75) unary_expression -> unary_expression . TIMES term
    (76) unary_expression -> unary_expression . MOD term
    (77) unary_expression -> unary_expression . MINUS term

    EQUALS          shift and go to state 61
    PP              shift and go to state 62
    MM              shift and go to state 63
    SEMI            reduce using rule 78 (conditional_expression -> unary_expression .)
    RPAREN          reduce using rule 78 (conditional_expression -> unary_expression .)
    COMMA           reduce using rule 78 (conditional_expression -> unary_expression .)
    LOR             reduce using rule 78 (conditional_expression -> unary_expression .)
    LT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66
    GT              shift and go to state 67
    EQ              shift and go to state 68
    NE              shift and go to state 69
    AND             shift and go to state 70
    LAND            shift and go to state 71
    PLUS            shift and go to state 72
    TIMES           shift and go to state 73
    MOD             shift and go to state 74
    MINUS           shift and go to state 75


state 27

    (47) expression -> STRING .

    SEMI            reduce using rule 47 (expression -> STRING .)
    RPAREN          reduce using rule 47 (expression -> STRING .)
    COMMA           reduce using rule 47 (expression -> STRING .)
    LOR             reduce using rule 47 (expression -> STRING .)


state 28

    (54) expression -> PP . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    unary_expression               shift and go to state 76
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 29

    (55) expression -> MM . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    unary_expression               shift and go to state 77
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 30

    (48) unary_expression -> LNOT . term
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 79
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    term                           shift and go to state 78
    factor                         shift and go to state 37

state 31

    (65) unary_expression -> term .

    EQUALS          reduce using rule 65 (unary_expression -> term .)
    PP              reduce using rule 65 (unary_expression -> term .)
    MM              reduce using rule 65 (unary_expression -> term .)
    LT              reduce using rule 65 (unary_expression -> term .)
    LE              reduce using rule 65 (unary_expression -> term .)
    GE              reduce using rule 65 (unary_expression -> term .)
    GT              reduce using rule 65 (unary_expression -> term .)
    EQ              reduce using rule 65 (unary_expression -> term .)
    NE              reduce using rule 65 (unary_expression -> term .)
    AND             reduce using rule 65 (unary_expression -> term .)
    LAND            reduce using rule 65 (unary_expression -> term .)
    PLUS            reduce using rule 65 (unary_expression -> term .)
    TIMES           reduce using rule 65 (unary_expression -> term .)
    MOD             reduce using rule 65 (unary_expression -> term .)
    MINUS           reduce using rule 65 (unary_expression -> term .)
    SEMI            reduce using rule 65 (unary_expression -> term .)
    RPAREN          reduce using rule 65 (unary_expression -> term .)
    COMMA           reduce using rule 65 (unary_expression -> term .)
    LOR             reduce using rule 65 (unary_expression -> term .)


state 32

    (53) unary_expression -> function_call .

    EQUALS          reduce using rule 53 (unary_expression -> function_call .)
    PP              reduce using rule 53 (unary_expression -> function_call .)
    MM              reduce using rule 53 (unary_expression -> function_call .)
    LT              reduce using rule 53 (unary_expression -> function_call .)
    LE              reduce using rule 53 (unary_expression -> function_call .)
    GE              reduce using rule 53 (unary_expression -> function_call .)
    GT              reduce using rule 53 (unary_expression -> function_call .)
    EQ              reduce using rule 53 (unary_expression -> function_call .)
    NE              reduce using rule 53 (unary_expression -> function_call .)
    AND             reduce using rule 53 (unary_expression -> function_call .)
    LAND            reduce using rule 53 (unary_expression -> function_call .)
    PLUS            reduce using rule 53 (unary_expression -> function_call .)
    TIMES           reduce using rule 53 (unary_expression -> function_call .)
    MOD             reduce using rule 53 (unary_expression -> function_call .)
    MINUS           reduce using rule 53 (unary_expression -> function_call .)
    SEMI            reduce using rule 53 (unary_expression -> function_call .)
    RPAREN          reduce using rule 53 (unary_expression -> function_call .)
    COMMA           reduce using rule 53 (unary_expression -> function_call .)
    LOR             reduce using rule 53 (unary_expression -> function_call .)


state 33

    (58) unary_expression -> AND . term
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 79
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    term                           shift and go to state 80
    factor                         shift and go to state 37

state 34

    (49) function_call -> ID . LPAREN expression_list RPAREN
    (50) function_call -> ID . LPAREN RPAREN
    (59) term -> ID .
    (60) term -> ID . LBRACKET NUMBER RBRACKET
    (61) term -> ID . LBRACKET ID RBRACKET

    LPAREN          shift and go to state 81
    EQUALS          reduce using rule 59 (term -> ID .)
    PP              reduce using rule 59 (term -> ID .)
    MM              reduce using rule 59 (term -> ID .)
    LT              reduce using rule 59 (term -> ID .)
    LE              reduce using rule 59 (term -> ID .)
    GE              reduce using rule 59 (term -> ID .)
    GT              reduce using rule 59 (term -> ID .)
    EQ              reduce using rule 59 (term -> ID .)
    NE              reduce using rule 59 (term -> ID .)
    AND             reduce using rule 59 (term -> ID .)
    LAND            reduce using rule 59 (term -> ID .)
    PLUS            reduce using rule 59 (term -> ID .)
    TIMES           reduce using rule 59 (term -> ID .)
    MOD             reduce using rule 59 (term -> ID .)
    MINUS           reduce using rule 59 (term -> ID .)
    SEMI            reduce using rule 59 (term -> ID .)
    RPAREN          reduce using rule 59 (term -> ID .)
    COMMA           reduce using rule 59 (term -> ID .)
    LOR             reduce using rule 59 (term -> ID .)
    LBRACKET        shift and go to state 82


state 35

    (64) factor -> LPAREN . expression RPAREN
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    expression                     shift and go to state 83
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 36

    (63) factor -> NUMBER .

    EQUALS          reduce using rule 63 (factor -> NUMBER .)
    PP              reduce using rule 63 (factor -> NUMBER .)
    MM              reduce using rule 63 (factor -> NUMBER .)
    LT              reduce using rule 63 (factor -> NUMBER .)
    LE              reduce using rule 63 (factor -> NUMBER .)
    GE              reduce using rule 63 (factor -> NUMBER .)
    GT              reduce using rule 63 (factor -> NUMBER .)
    EQ              reduce using rule 63 (factor -> NUMBER .)
    NE              reduce using rule 63 (factor -> NUMBER .)
    AND             reduce using rule 63 (factor -> NUMBER .)
    LAND            reduce using rule 63 (factor -> NUMBER .)
    PLUS            reduce using rule 63 (factor -> NUMBER .)
    TIMES           reduce using rule 63 (factor -> NUMBER .)
    MOD             reduce using rule 63 (factor -> NUMBER .)
    MINUS           reduce using rule 63 (factor -> NUMBER .)
    SEMI            reduce using rule 63 (factor -> NUMBER .)
    RPAREN          reduce using rule 63 (factor -> NUMBER .)
    COMMA           reduce using rule 63 (factor -> NUMBER .)
    LOR             reduce using rule 63 (factor -> NUMBER .)


state 37

    (62) term -> factor .

    EQUALS          reduce using rule 62 (term -> factor .)
    PP              reduce using rule 62 (term -> factor .)
    MM              reduce using rule 62 (term -> factor .)
    LT              reduce using rule 62 (term -> factor .)
    LE              reduce using rule 62 (term -> factor .)
    GE              reduce using rule 62 (term -> factor .)
    GT              reduce using rule 62 (term -> factor .)
    EQ              reduce using rule 62 (term -> factor .)
    NE              reduce using rule 62 (term -> factor .)
    AND             reduce using rule 62 (term -> factor .)
    LAND            reduce using rule 62 (term -> factor .)
    PLUS            reduce using rule 62 (term -> factor .)
    TIMES           reduce using rule 62 (term -> factor .)
    MOD             reduce using rule 62 (term -> factor .)
    MINUS           reduce using rule 62 (term -> factor .)
    SEMI            reduce using rule 62 (term -> factor .)
    RPAREN          reduce using rule 62 (term -> factor .)
    COMMA           reduce using rule 62 (term -> factor .)
    LOR             reduce using rule 62 (term -> factor .)


state 38

    (8) arguments -> LPAREN args . RPAREN

    RPAREN          shift and go to state 84


state 39

    (9) args -> empty .

    RPAREN          reduce using rule 9 (args -> empty .)


state 40

    (10) args -> VOID .

    RPAREN          reduce using rule 10 (args -> VOID .)


state 41

    (11) args -> INT . ID
    (12) args -> INT . ID COMMA INT ID

    ID              shift and go to state 85


state 42

    (35) compound_statement -> LBRACE declaration_list . RBRACE
    (36) compound_statement -> LBRACE declaration_list . statement_list RBRACE
    (40) declaration_list -> declaration_list . declaration
    (43) statement_list -> . statement
    (44) statement_list -> . statement_list statement
    (14) declaration -> . init_declaration SEMI
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (15) init_declaration -> . id_declaration
    (16) init_declaration -> . id_declaration LBRACKET NUMBER RBRACKET
    (17) init_declaration -> . id_declaration EQUALS expression
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement empty
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (18) id_declaration -> . VOID ID
    (19) id_declaration -> . INT ID
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 86
    LBRACE          shift and go to state 22
    SEMI            shift and go to state 47
    BREAK           shift and go to state 55
    RETURN          shift and go to state 56
    FOR             shift and go to state 57
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    VOID            shift and go to state 10
    INT             shift and go to state 11
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    statement_list                 shift and go to state 87
    declaration                    shift and go to state 88
    statement                      shift and go to state 46
    init_declaration               shift and go to state 9
    compound_statement             shift and go to state 48
    expression_statement           shift and go to state 49
    jump_statement                 shift and go to state 50
    loop_statement                 shift and go to state 51
    condition_statement            shift and go to state 52
    id_declaration                 shift and go to state 53
    expression                     shift and go to state 54
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 43

    (38) compound_statement -> LBRACE RBRACE .

    SEMI            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    INCLUDE         reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    VOID            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    STRING          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    PP              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    MM              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    LNOT            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    AND             reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    ID              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    NUMBER          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)


state 44

    (37) compound_statement -> LBRACE statement_list . RBRACE
    (44) statement_list -> statement_list . statement
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement empty
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 89
    LBRACE          shift and go to state 22
    SEMI            shift and go to state 47
    BREAK           shift and go to state 55
    RETURN          shift and go to state 56
    FOR             shift and go to state 57
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    statement                      shift and go to state 90
    compound_statement             shift and go to state 48
    expression_statement           shift and go to state 49
    jump_statement                 shift and go to state 50
    loop_statement                 shift and go to state 51
    condition_statement            shift and go to state 52
    expression                     shift and go to state 54
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 45

    (39) declaration_list -> declaration .

    RBRACE          reduce using rule 39 (declaration_list -> declaration .)
    LBRACE          reduce using rule 39 (declaration_list -> declaration .)
    SEMI            reduce using rule 39 (declaration_list -> declaration .)
    BREAK           reduce using rule 39 (declaration_list -> declaration .)
    RETURN          reduce using rule 39 (declaration_list -> declaration .)
    FOR             reduce using rule 39 (declaration_list -> declaration .)
    WHILE           reduce using rule 39 (declaration_list -> declaration .)
    IF              reduce using rule 39 (declaration_list -> declaration .)
    VOID            reduce using rule 39 (declaration_list -> declaration .)
    INT             reduce using rule 39 (declaration_list -> declaration .)
    STRING          reduce using rule 39 (declaration_list -> declaration .)
    PP              reduce using rule 39 (declaration_list -> declaration .)
    MM              reduce using rule 39 (declaration_list -> declaration .)
    LNOT            reduce using rule 39 (declaration_list -> declaration .)
    AND             reduce using rule 39 (declaration_list -> declaration .)
    ID              reduce using rule 39 (declaration_list -> declaration .)
    NUMBER          reduce using rule 39 (declaration_list -> declaration .)
    LPAREN          reduce using rule 39 (declaration_list -> declaration .)


state 46

    (43) statement_list -> statement .

    RBRACE          reduce using rule 43 (statement_list -> statement .)
    LBRACE          reduce using rule 43 (statement_list -> statement .)
    SEMI            reduce using rule 43 (statement_list -> statement .)
    BREAK           reduce using rule 43 (statement_list -> statement .)
    RETURN          reduce using rule 43 (statement_list -> statement .)
    FOR             reduce using rule 43 (statement_list -> statement .)
    WHILE           reduce using rule 43 (statement_list -> statement .)
    IF              reduce using rule 43 (statement_list -> statement .)
    STRING          reduce using rule 43 (statement_list -> statement .)
    PP              reduce using rule 43 (statement_list -> statement .)
    MM              reduce using rule 43 (statement_list -> statement .)
    LNOT            reduce using rule 43 (statement_list -> statement .)
    AND             reduce using rule 43 (statement_list -> statement .)
    ID              reduce using rule 43 (statement_list -> statement .)
    NUMBER          reduce using rule 43 (statement_list -> statement .)
    LPAREN          reduce using rule 43 (statement_list -> statement .)


state 47

    (41) expression_statement -> SEMI .

    RBRACE          reduce using rule 41 (expression_statement -> SEMI .)
    LBRACE          reduce using rule 41 (expression_statement -> SEMI .)
    SEMI            reduce using rule 41 (expression_statement -> SEMI .)
    BREAK           reduce using rule 41 (expression_statement -> SEMI .)
    RETURN          reduce using rule 41 (expression_statement -> SEMI .)
    FOR             reduce using rule 41 (expression_statement -> SEMI .)
    WHILE           reduce using rule 41 (expression_statement -> SEMI .)
    IF              reduce using rule 41 (expression_statement -> SEMI .)
    STRING          reduce using rule 41 (expression_statement -> SEMI .)
    PP              reduce using rule 41 (expression_statement -> SEMI .)
    MM              reduce using rule 41 (expression_statement -> SEMI .)
    LNOT            reduce using rule 41 (expression_statement -> SEMI .)
    AND             reduce using rule 41 (expression_statement -> SEMI .)
    ID              reduce using rule 41 (expression_statement -> SEMI .)
    NUMBER          reduce using rule 41 (expression_statement -> SEMI .)
    LPAREN          reduce using rule 41 (expression_statement -> SEMI .)
    RPAREN          reduce using rule 41 (expression_statement -> SEMI .)
    ELSE            reduce using rule 41 (expression_statement -> SEMI .)


state 48

    (21) statement -> compound_statement .

    RBRACE          reduce using rule 21 (statement -> compound_statement .)
    LBRACE          reduce using rule 21 (statement -> compound_statement .)
    SEMI            reduce using rule 21 (statement -> compound_statement .)
    BREAK           reduce using rule 21 (statement -> compound_statement .)
    RETURN          reduce using rule 21 (statement -> compound_statement .)
    FOR             reduce using rule 21 (statement -> compound_statement .)
    WHILE           reduce using rule 21 (statement -> compound_statement .)
    IF              reduce using rule 21 (statement -> compound_statement .)
    STRING          reduce using rule 21 (statement -> compound_statement .)
    PP              reduce using rule 21 (statement -> compound_statement .)
    MM              reduce using rule 21 (statement -> compound_statement .)
    LNOT            reduce using rule 21 (statement -> compound_statement .)
    AND             reduce using rule 21 (statement -> compound_statement .)
    ID              reduce using rule 21 (statement -> compound_statement .)
    NUMBER          reduce using rule 21 (statement -> compound_statement .)
    LPAREN          reduce using rule 21 (statement -> compound_statement .)
    ELSE            reduce using rule 21 (statement -> compound_statement .)


state 49

    (22) statement -> expression_statement .

    RBRACE          reduce using rule 22 (statement -> expression_statement .)
    LBRACE          reduce using rule 22 (statement -> expression_statement .)
    SEMI            reduce using rule 22 (statement -> expression_statement .)
    BREAK           reduce using rule 22 (statement -> expression_statement .)
    RETURN          reduce using rule 22 (statement -> expression_statement .)
    FOR             reduce using rule 22 (statement -> expression_statement .)
    WHILE           reduce using rule 22 (statement -> expression_statement .)
    IF              reduce using rule 22 (statement -> expression_statement .)
    STRING          reduce using rule 22 (statement -> expression_statement .)
    PP              reduce using rule 22 (statement -> expression_statement .)
    MM              reduce using rule 22 (statement -> expression_statement .)
    LNOT            reduce using rule 22 (statement -> expression_statement .)
    AND             reduce using rule 22 (statement -> expression_statement .)
    ID              reduce using rule 22 (statement -> expression_statement .)
    NUMBER          reduce using rule 22 (statement -> expression_statement .)
    LPAREN          reduce using rule 22 (statement -> expression_statement .)
    ELSE            reduce using rule 22 (statement -> expression_statement .)


state 50

    (23) statement -> jump_statement .

    RBRACE          reduce using rule 23 (statement -> jump_statement .)
    LBRACE          reduce using rule 23 (statement -> jump_statement .)
    SEMI            reduce using rule 23 (statement -> jump_statement .)
    BREAK           reduce using rule 23 (statement -> jump_statement .)
    RETURN          reduce using rule 23 (statement -> jump_statement .)
    FOR             reduce using rule 23 (statement -> jump_statement .)
    WHILE           reduce using rule 23 (statement -> jump_statement .)
    IF              reduce using rule 23 (statement -> jump_statement .)
    STRING          reduce using rule 23 (statement -> jump_statement .)
    PP              reduce using rule 23 (statement -> jump_statement .)
    MM              reduce using rule 23 (statement -> jump_statement .)
    LNOT            reduce using rule 23 (statement -> jump_statement .)
    AND             reduce using rule 23 (statement -> jump_statement .)
    ID              reduce using rule 23 (statement -> jump_statement .)
    NUMBER          reduce using rule 23 (statement -> jump_statement .)
    LPAREN          reduce using rule 23 (statement -> jump_statement .)
    ELSE            reduce using rule 23 (statement -> jump_statement .)


state 51

    (24) statement -> loop_statement .

    RBRACE          reduce using rule 24 (statement -> loop_statement .)
    LBRACE          reduce using rule 24 (statement -> loop_statement .)
    SEMI            reduce using rule 24 (statement -> loop_statement .)
    BREAK           reduce using rule 24 (statement -> loop_statement .)
    RETURN          reduce using rule 24 (statement -> loop_statement .)
    FOR             reduce using rule 24 (statement -> loop_statement .)
    WHILE           reduce using rule 24 (statement -> loop_statement .)
    IF              reduce using rule 24 (statement -> loop_statement .)
    STRING          reduce using rule 24 (statement -> loop_statement .)
    PP              reduce using rule 24 (statement -> loop_statement .)
    MM              reduce using rule 24 (statement -> loop_statement .)
    LNOT            reduce using rule 24 (statement -> loop_statement .)
    AND             reduce using rule 24 (statement -> loop_statement .)
    ID              reduce using rule 24 (statement -> loop_statement .)
    NUMBER          reduce using rule 24 (statement -> loop_statement .)
    LPAREN          reduce using rule 24 (statement -> loop_statement .)
    ELSE            reduce using rule 24 (statement -> loop_statement .)


state 52

    (25) statement -> condition_statement .

    RBRACE          reduce using rule 25 (statement -> condition_statement .)
    LBRACE          reduce using rule 25 (statement -> condition_statement .)
    SEMI            reduce using rule 25 (statement -> condition_statement .)
    BREAK           reduce using rule 25 (statement -> condition_statement .)
    RETURN          reduce using rule 25 (statement -> condition_statement .)
    FOR             reduce using rule 25 (statement -> condition_statement .)
    WHILE           reduce using rule 25 (statement -> condition_statement .)
    IF              reduce using rule 25 (statement -> condition_statement .)
    STRING          reduce using rule 25 (statement -> condition_statement .)
    PP              reduce using rule 25 (statement -> condition_statement .)
    MM              reduce using rule 25 (statement -> condition_statement .)
    LNOT            reduce using rule 25 (statement -> condition_statement .)
    AND             reduce using rule 25 (statement -> condition_statement .)
    ID              reduce using rule 25 (statement -> condition_statement .)
    NUMBER          reduce using rule 25 (statement -> condition_statement .)
    LPAREN          reduce using rule 25 (statement -> condition_statement .)
    ELSE            reduce using rule 25 (statement -> condition_statement .)


state 53

    (15) init_declaration -> id_declaration .
    (16) init_declaration -> id_declaration . LBRACKET NUMBER RBRACKET
    (17) init_declaration -> id_declaration . EQUALS expression

    SEMI            reduce using rule 15 (init_declaration -> id_declaration .)
    LBRACKET        shift and go to state 15
    EQUALS          shift and go to state 16


state 54

    (42) expression_statement -> expression . SEMI

    SEMI            shift and go to state 91


state 55

    (26) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 92


state 56

    (27) jump_statement -> RETURN . SEMI
    (28) jump_statement -> RETURN . expression SEMI
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    SEMI            shift and go to state 93
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    expression                     shift and go to state 94
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 57

    (29) loop_statement -> FOR . LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement

    LPAREN          shift and go to state 95


state 58

    (31) loop_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 96


state 59

    (32) condition_statement -> IF . LPAREN expression RPAREN statement ELSE statement empty
    (33) condition_statement -> IF . LPAREN expression RPAREN statement
    (34) condition_statement -> IF . LPAREN expression LOR expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 97


state 60

    (16) init_declaration -> id_declaration LBRACKET NUMBER RBRACKET .

    SEMI            reduce using rule 16 (init_declaration -> id_declaration LBRACKET NUMBER RBRACKET .)


state 61

    (46) expression -> unary_expression EQUALS . expression
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    unary_expression               shift and go to state 26
    expression                     shift and go to state 98
    conditional_expression         shift and go to state 25
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 62

    (56) expression -> unary_expression PP .

    SEMI            reduce using rule 56 (expression -> unary_expression PP .)
    RPAREN          reduce using rule 56 (expression -> unary_expression PP .)
    COMMA           reduce using rule 56 (expression -> unary_expression PP .)
    LOR             reduce using rule 56 (expression -> unary_expression PP .)


state 63

    (57) expression -> unary_expression MM .

    SEMI            reduce using rule 57 (expression -> unary_expression MM .)
    RPAREN          reduce using rule 57 (expression -> unary_expression MM .)
    COMMA           reduce using rule 57 (expression -> unary_expression MM .)
    LOR             reduce using rule 57 (expression -> unary_expression MM .)


state 64

    (66) unary_expression -> unary_expression LT . term
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 79
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    term                           shift and go to state 99
    factor                         shift and go to state 37

state 65

    (67) unary_expression -> unary_expression LE . term
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 79
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    term                           shift and go to state 100
    factor                         shift and go to state 37

state 66

    (68) unary_expression -> unary_expression GE . term
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 79
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    term                           shift and go to state 101
    factor                         shift and go to state 37

state 67

    (69) unary_expression -> unary_expression GT . term
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 79
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    term                           shift and go to state 102
    factor                         shift and go to state 37

state 68

    (70) unary_expression -> unary_expression EQ . term
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 79
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    term                           shift and go to state 103
    factor                         shift and go to state 37

state 69

    (71) unary_expression -> unary_expression NE . term
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 79
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    term                           shift and go to state 104
    factor                         shift and go to state 37

state 70

    (72) unary_expression -> unary_expression AND . term
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 79
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    term                           shift and go to state 105
    factor                         shift and go to state 37

state 71

    (73) unary_expression -> unary_expression LAND . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    unary_expression               shift and go to state 106
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 72

    (74) unary_expression -> unary_expression PLUS . term
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 79
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    term                           shift and go to state 107
    factor                         shift and go to state 37

state 73

    (75) unary_expression -> unary_expression TIMES . term
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 79
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    term                           shift and go to state 108
    factor                         shift and go to state 37

state 74

    (76) unary_expression -> unary_expression MOD . term
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 79
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    term                           shift and go to state 109
    factor                         shift and go to state 37

state 75

    (77) unary_expression -> unary_expression MINUS . term
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 79
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    term                           shift and go to state 110
    factor                         shift and go to state 37

state 76

    (54) expression -> PP unary_expression .
    (66) unary_expression -> unary_expression . LT term
    (67) unary_expression -> unary_expression . LE term
    (68) unary_expression -> unary_expression . GE term
    (69) unary_expression -> unary_expression . GT term
    (70) unary_expression -> unary_expression . EQ term
    (71) unary_expression -> unary_expression . NE term
    (72) unary_expression -> unary_expression . AND term
    (73) unary_expression -> unary_expression . LAND unary_expression
    (74) unary_expression -> unary_expression . PLUS term
    (75) unary_expression -> unary_expression . TIMES term
    (76) unary_expression -> unary_expression . MOD term
    (77) unary_expression -> unary_expression . MINUS term

    SEMI            reduce using rule 54 (expression -> PP unary_expression .)
    RPAREN          reduce using rule 54 (expression -> PP unary_expression .)
    COMMA           reduce using rule 54 (expression -> PP unary_expression .)
    LOR             reduce using rule 54 (expression -> PP unary_expression .)
    LT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66
    GT              shift and go to state 67
    EQ              shift and go to state 68
    NE              shift and go to state 69
    AND             shift and go to state 70
    LAND            shift and go to state 71
    PLUS            shift and go to state 72
    TIMES           shift and go to state 73
    MOD             shift and go to state 74
    MINUS           shift and go to state 75


state 77

    (55) expression -> MM unary_expression .
    (66) unary_expression -> unary_expression . LT term
    (67) unary_expression -> unary_expression . LE term
    (68) unary_expression -> unary_expression . GE term
    (69) unary_expression -> unary_expression . GT term
    (70) unary_expression -> unary_expression . EQ term
    (71) unary_expression -> unary_expression . NE term
    (72) unary_expression -> unary_expression . AND term
    (73) unary_expression -> unary_expression . LAND unary_expression
    (74) unary_expression -> unary_expression . PLUS term
    (75) unary_expression -> unary_expression . TIMES term
    (76) unary_expression -> unary_expression . MOD term
    (77) unary_expression -> unary_expression . MINUS term

    SEMI            reduce using rule 55 (expression -> MM unary_expression .)
    RPAREN          reduce using rule 55 (expression -> MM unary_expression .)
    COMMA           reduce using rule 55 (expression -> MM unary_expression .)
    LOR             reduce using rule 55 (expression -> MM unary_expression .)
    LT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66
    GT              shift and go to state 67
    EQ              shift and go to state 68
    NE              shift and go to state 69
    AND             shift and go to state 70
    LAND            shift and go to state 71
    PLUS            shift and go to state 72
    TIMES           shift and go to state 73
    MOD             shift and go to state 74
    MINUS           shift and go to state 75


state 78

    (48) unary_expression -> LNOT term .

    EQUALS          reduce using rule 48 (unary_expression -> LNOT term .)
    PP              reduce using rule 48 (unary_expression -> LNOT term .)
    MM              reduce using rule 48 (unary_expression -> LNOT term .)
    LT              reduce using rule 48 (unary_expression -> LNOT term .)
    LE              reduce using rule 48 (unary_expression -> LNOT term .)
    GE              reduce using rule 48 (unary_expression -> LNOT term .)
    GT              reduce using rule 48 (unary_expression -> LNOT term .)
    EQ              reduce using rule 48 (unary_expression -> LNOT term .)
    NE              reduce using rule 48 (unary_expression -> LNOT term .)
    AND             reduce using rule 48 (unary_expression -> LNOT term .)
    LAND            reduce using rule 48 (unary_expression -> LNOT term .)
    PLUS            reduce using rule 48 (unary_expression -> LNOT term .)
    TIMES           reduce using rule 48 (unary_expression -> LNOT term .)
    MOD             reduce using rule 48 (unary_expression -> LNOT term .)
    MINUS           reduce using rule 48 (unary_expression -> LNOT term .)
    SEMI            reduce using rule 48 (unary_expression -> LNOT term .)
    RPAREN          reduce using rule 48 (unary_expression -> LNOT term .)
    COMMA           reduce using rule 48 (unary_expression -> LNOT term .)
    LOR             reduce using rule 48 (unary_expression -> LNOT term .)


state 79

    (59) term -> ID .
    (60) term -> ID . LBRACKET NUMBER RBRACKET
    (61) term -> ID . LBRACKET ID RBRACKET

    EQUALS          reduce using rule 59 (term -> ID .)
    PP              reduce using rule 59 (term -> ID .)
    MM              reduce using rule 59 (term -> ID .)
    LT              reduce using rule 59 (term -> ID .)
    LE              reduce using rule 59 (term -> ID .)
    GE              reduce using rule 59 (term -> ID .)
    GT              reduce using rule 59 (term -> ID .)
    EQ              reduce using rule 59 (term -> ID .)
    NE              reduce using rule 59 (term -> ID .)
    AND             reduce using rule 59 (term -> ID .)
    LAND            reduce using rule 59 (term -> ID .)
    PLUS            reduce using rule 59 (term -> ID .)
    TIMES           reduce using rule 59 (term -> ID .)
    MOD             reduce using rule 59 (term -> ID .)
    MINUS           reduce using rule 59 (term -> ID .)
    SEMI            reduce using rule 59 (term -> ID .)
    RPAREN          reduce using rule 59 (term -> ID .)
    COMMA           reduce using rule 59 (term -> ID .)
    LOR             reduce using rule 59 (term -> ID .)
    LBRACKET        shift and go to state 82


state 80

    (58) unary_expression -> AND term .

    EQUALS          reduce using rule 58 (unary_expression -> AND term .)
    PP              reduce using rule 58 (unary_expression -> AND term .)
    MM              reduce using rule 58 (unary_expression -> AND term .)
    LT              reduce using rule 58 (unary_expression -> AND term .)
    LE              reduce using rule 58 (unary_expression -> AND term .)
    GE              reduce using rule 58 (unary_expression -> AND term .)
    GT              reduce using rule 58 (unary_expression -> AND term .)
    EQ              reduce using rule 58 (unary_expression -> AND term .)
    NE              reduce using rule 58 (unary_expression -> AND term .)
    AND             reduce using rule 58 (unary_expression -> AND term .)
    LAND            reduce using rule 58 (unary_expression -> AND term .)
    PLUS            reduce using rule 58 (unary_expression -> AND term .)
    TIMES           reduce using rule 58 (unary_expression -> AND term .)
    MOD             reduce using rule 58 (unary_expression -> AND term .)
    MINUS           reduce using rule 58 (unary_expression -> AND term .)
    SEMI            reduce using rule 58 (unary_expression -> AND term .)
    RPAREN          reduce using rule 58 (unary_expression -> AND term .)
    COMMA           reduce using rule 58 (unary_expression -> AND term .)
    LOR             reduce using rule 58 (unary_expression -> AND term .)


state 81

    (49) function_call -> ID LPAREN . expression_list RPAREN
    (50) function_call -> ID LPAREN . RPAREN
    (51) expression_list -> . expression
    (52) expression_list -> . expression_list COMMA expression
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    RPAREN          shift and go to state 112
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    expression_list                shift and go to state 111
    expression                     shift and go to state 113
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 82

    (60) term -> ID LBRACKET . NUMBER RBRACKET
    (61) term -> ID LBRACKET . ID RBRACKET

    NUMBER          shift and go to state 115
    ID              shift and go to state 114


state 83

    (64) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 116


state 84

    (8) arguments -> LPAREN args RPAREN .

    LBRACE          reduce using rule 8 (arguments -> LPAREN args RPAREN .)


state 85

    (11) args -> INT ID .
    (12) args -> INT ID . COMMA INT ID

    RPAREN          reduce using rule 11 (args -> INT ID .)
    COMMA           shift and go to state 117


state 86

    (35) compound_statement -> LBRACE declaration_list RBRACE .

    SEMI            reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    INCLUDE         reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    VOID            reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    INT             reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    $end            reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    LBRACE          reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    BREAK           reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    RETURN          reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    FOR             reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    IF              reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    STRING          reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    PP              reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    MM              reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    LNOT            reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    AND             reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    ID              reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    NUMBER          reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)
    ELSE            reduce using rule 35 (compound_statement -> LBRACE declaration_list RBRACE .)


state 87

    (36) compound_statement -> LBRACE declaration_list statement_list . RBRACE
    (44) statement_list -> statement_list . statement
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement empty
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 118
    LBRACE          shift and go to state 22
    SEMI            shift and go to state 47
    BREAK           shift and go to state 55
    RETURN          shift and go to state 56
    FOR             shift and go to state 57
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    statement                      shift and go to state 90
    compound_statement             shift and go to state 48
    expression_statement           shift and go to state 49
    jump_statement                 shift and go to state 50
    loop_statement                 shift and go to state 51
    condition_statement            shift and go to state 52
    expression                     shift and go to state 54
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 88

    (40) declaration_list -> declaration_list declaration .

    RBRACE          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    SEMI            reduce using rule 40 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 40 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 40 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 40 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 40 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 40 (declaration_list -> declaration_list declaration .)
    STRING          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    PP              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    MM              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    LNOT            reduce using rule 40 (declaration_list -> declaration_list declaration .)
    AND             reduce using rule 40 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    NUMBER          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 40 (declaration_list -> declaration_list declaration .)


state 89

    (37) compound_statement -> LBRACE statement_list RBRACE .

    SEMI            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    INCLUDE         reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    VOID            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    STRING          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    PP              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    MM              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LNOT            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    AND             reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)


state 90

    (44) statement_list -> statement_list statement .

    RBRACE          reduce using rule 44 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 44 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 44 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 44 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 44 (statement_list -> statement_list statement .)
    FOR             reduce using rule 44 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 44 (statement_list -> statement_list statement .)
    IF              reduce using rule 44 (statement_list -> statement_list statement .)
    STRING          reduce using rule 44 (statement_list -> statement_list statement .)
    PP              reduce using rule 44 (statement_list -> statement_list statement .)
    MM              reduce using rule 44 (statement_list -> statement_list statement .)
    LNOT            reduce using rule 44 (statement_list -> statement_list statement .)
    AND             reduce using rule 44 (statement_list -> statement_list statement .)
    ID              reduce using rule 44 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 44 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 44 (statement_list -> statement_list statement .)


state 91

    (42) expression_statement -> expression SEMI .

    RBRACE          reduce using rule 42 (expression_statement -> expression SEMI .)
    LBRACE          reduce using rule 42 (expression_statement -> expression SEMI .)
    SEMI            reduce using rule 42 (expression_statement -> expression SEMI .)
    BREAK           reduce using rule 42 (expression_statement -> expression SEMI .)
    RETURN          reduce using rule 42 (expression_statement -> expression SEMI .)
    FOR             reduce using rule 42 (expression_statement -> expression SEMI .)
    WHILE           reduce using rule 42 (expression_statement -> expression SEMI .)
    IF              reduce using rule 42 (expression_statement -> expression SEMI .)
    STRING          reduce using rule 42 (expression_statement -> expression SEMI .)
    PP              reduce using rule 42 (expression_statement -> expression SEMI .)
    MM              reduce using rule 42 (expression_statement -> expression SEMI .)
    LNOT            reduce using rule 42 (expression_statement -> expression SEMI .)
    AND             reduce using rule 42 (expression_statement -> expression SEMI .)
    ID              reduce using rule 42 (expression_statement -> expression SEMI .)
    NUMBER          reduce using rule 42 (expression_statement -> expression SEMI .)
    LPAREN          reduce using rule 42 (expression_statement -> expression SEMI .)
    RPAREN          reduce using rule 42 (expression_statement -> expression SEMI .)
    ELSE            reduce using rule 42 (expression_statement -> expression SEMI .)


state 92

    (26) jump_statement -> BREAK SEMI .

    RBRACE          reduce using rule 26 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 26 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 26 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 26 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 26 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 26 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 26 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 26 (jump_statement -> BREAK SEMI .)
    STRING          reduce using rule 26 (jump_statement -> BREAK SEMI .)
    PP              reduce using rule 26 (jump_statement -> BREAK SEMI .)
    MM              reduce using rule 26 (jump_statement -> BREAK SEMI .)
    LNOT            reduce using rule 26 (jump_statement -> BREAK SEMI .)
    AND             reduce using rule 26 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 26 (jump_statement -> BREAK SEMI .)
    NUMBER          reduce using rule 26 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 26 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 26 (jump_statement -> BREAK SEMI .)


state 93

    (27) jump_statement -> RETURN SEMI .

    RBRACE          reduce using rule 27 (jump_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 27 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 27 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 27 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 27 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 27 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 27 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 27 (jump_statement -> RETURN SEMI .)
    STRING          reduce using rule 27 (jump_statement -> RETURN SEMI .)
    PP              reduce using rule 27 (jump_statement -> RETURN SEMI .)
    MM              reduce using rule 27 (jump_statement -> RETURN SEMI .)
    LNOT            reduce using rule 27 (jump_statement -> RETURN SEMI .)
    AND             reduce using rule 27 (jump_statement -> RETURN SEMI .)
    ID              reduce using rule 27 (jump_statement -> RETURN SEMI .)
    NUMBER          reduce using rule 27 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 27 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 27 (jump_statement -> RETURN SEMI .)


state 94

    (28) jump_statement -> RETURN expression . SEMI

    SEMI            shift and go to state 119


state 95

    (29) loop_statement -> FOR LPAREN . expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    SEMI            shift and go to state 47
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    expression_statement           shift and go to state 120
    expression                     shift and go to state 54
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 96

    (31) loop_statement -> WHILE LPAREN . expression RPAREN statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    expression                     shift and go to state 121
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 97

    (32) condition_statement -> IF LPAREN . expression RPAREN statement ELSE statement empty
    (33) condition_statement -> IF LPAREN . expression RPAREN statement
    (34) condition_statement -> IF LPAREN . expression LOR expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    expression                     shift and go to state 122
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 98

    (46) expression -> unary_expression EQUALS expression .

    SEMI            reduce using rule 46 (expression -> unary_expression EQUALS expression .)
    RPAREN          reduce using rule 46 (expression -> unary_expression EQUALS expression .)
    COMMA           reduce using rule 46 (expression -> unary_expression EQUALS expression .)
    LOR             reduce using rule 46 (expression -> unary_expression EQUALS expression .)


state 99

    (66) unary_expression -> unary_expression LT term .

    EQUALS          reduce using rule 66 (unary_expression -> unary_expression LT term .)
    PP              reduce using rule 66 (unary_expression -> unary_expression LT term .)
    MM              reduce using rule 66 (unary_expression -> unary_expression LT term .)
    LT              reduce using rule 66 (unary_expression -> unary_expression LT term .)
    LE              reduce using rule 66 (unary_expression -> unary_expression LT term .)
    GE              reduce using rule 66 (unary_expression -> unary_expression LT term .)
    GT              reduce using rule 66 (unary_expression -> unary_expression LT term .)
    EQ              reduce using rule 66 (unary_expression -> unary_expression LT term .)
    NE              reduce using rule 66 (unary_expression -> unary_expression LT term .)
    AND             reduce using rule 66 (unary_expression -> unary_expression LT term .)
    LAND            reduce using rule 66 (unary_expression -> unary_expression LT term .)
    PLUS            reduce using rule 66 (unary_expression -> unary_expression LT term .)
    TIMES           reduce using rule 66 (unary_expression -> unary_expression LT term .)
    MOD             reduce using rule 66 (unary_expression -> unary_expression LT term .)
    MINUS           reduce using rule 66 (unary_expression -> unary_expression LT term .)
    SEMI            reduce using rule 66 (unary_expression -> unary_expression LT term .)
    RPAREN          reduce using rule 66 (unary_expression -> unary_expression LT term .)
    COMMA           reduce using rule 66 (unary_expression -> unary_expression LT term .)
    LOR             reduce using rule 66 (unary_expression -> unary_expression LT term .)


state 100

    (67) unary_expression -> unary_expression LE term .

    EQUALS          reduce using rule 67 (unary_expression -> unary_expression LE term .)
    PP              reduce using rule 67 (unary_expression -> unary_expression LE term .)
    MM              reduce using rule 67 (unary_expression -> unary_expression LE term .)
    LT              reduce using rule 67 (unary_expression -> unary_expression LE term .)
    LE              reduce using rule 67 (unary_expression -> unary_expression LE term .)
    GE              reduce using rule 67 (unary_expression -> unary_expression LE term .)
    GT              reduce using rule 67 (unary_expression -> unary_expression LE term .)
    EQ              reduce using rule 67 (unary_expression -> unary_expression LE term .)
    NE              reduce using rule 67 (unary_expression -> unary_expression LE term .)
    AND             reduce using rule 67 (unary_expression -> unary_expression LE term .)
    LAND            reduce using rule 67 (unary_expression -> unary_expression LE term .)
    PLUS            reduce using rule 67 (unary_expression -> unary_expression LE term .)
    TIMES           reduce using rule 67 (unary_expression -> unary_expression LE term .)
    MOD             reduce using rule 67 (unary_expression -> unary_expression LE term .)
    MINUS           reduce using rule 67 (unary_expression -> unary_expression LE term .)
    SEMI            reduce using rule 67 (unary_expression -> unary_expression LE term .)
    RPAREN          reduce using rule 67 (unary_expression -> unary_expression LE term .)
    COMMA           reduce using rule 67 (unary_expression -> unary_expression LE term .)
    LOR             reduce using rule 67 (unary_expression -> unary_expression LE term .)


state 101

    (68) unary_expression -> unary_expression GE term .

    EQUALS          reduce using rule 68 (unary_expression -> unary_expression GE term .)
    PP              reduce using rule 68 (unary_expression -> unary_expression GE term .)
    MM              reduce using rule 68 (unary_expression -> unary_expression GE term .)
    LT              reduce using rule 68 (unary_expression -> unary_expression GE term .)
    LE              reduce using rule 68 (unary_expression -> unary_expression GE term .)
    GE              reduce using rule 68 (unary_expression -> unary_expression GE term .)
    GT              reduce using rule 68 (unary_expression -> unary_expression GE term .)
    EQ              reduce using rule 68 (unary_expression -> unary_expression GE term .)
    NE              reduce using rule 68 (unary_expression -> unary_expression GE term .)
    AND             reduce using rule 68 (unary_expression -> unary_expression GE term .)
    LAND            reduce using rule 68 (unary_expression -> unary_expression GE term .)
    PLUS            reduce using rule 68 (unary_expression -> unary_expression GE term .)
    TIMES           reduce using rule 68 (unary_expression -> unary_expression GE term .)
    MOD             reduce using rule 68 (unary_expression -> unary_expression GE term .)
    MINUS           reduce using rule 68 (unary_expression -> unary_expression GE term .)
    SEMI            reduce using rule 68 (unary_expression -> unary_expression GE term .)
    RPAREN          reduce using rule 68 (unary_expression -> unary_expression GE term .)
    COMMA           reduce using rule 68 (unary_expression -> unary_expression GE term .)
    LOR             reduce using rule 68 (unary_expression -> unary_expression GE term .)


state 102

    (69) unary_expression -> unary_expression GT term .

    EQUALS          reduce using rule 69 (unary_expression -> unary_expression GT term .)
    PP              reduce using rule 69 (unary_expression -> unary_expression GT term .)
    MM              reduce using rule 69 (unary_expression -> unary_expression GT term .)
    LT              reduce using rule 69 (unary_expression -> unary_expression GT term .)
    LE              reduce using rule 69 (unary_expression -> unary_expression GT term .)
    GE              reduce using rule 69 (unary_expression -> unary_expression GT term .)
    GT              reduce using rule 69 (unary_expression -> unary_expression GT term .)
    EQ              reduce using rule 69 (unary_expression -> unary_expression GT term .)
    NE              reduce using rule 69 (unary_expression -> unary_expression GT term .)
    AND             reduce using rule 69 (unary_expression -> unary_expression GT term .)
    LAND            reduce using rule 69 (unary_expression -> unary_expression GT term .)
    PLUS            reduce using rule 69 (unary_expression -> unary_expression GT term .)
    TIMES           reduce using rule 69 (unary_expression -> unary_expression GT term .)
    MOD             reduce using rule 69 (unary_expression -> unary_expression GT term .)
    MINUS           reduce using rule 69 (unary_expression -> unary_expression GT term .)
    SEMI            reduce using rule 69 (unary_expression -> unary_expression GT term .)
    RPAREN          reduce using rule 69 (unary_expression -> unary_expression GT term .)
    COMMA           reduce using rule 69 (unary_expression -> unary_expression GT term .)
    LOR             reduce using rule 69 (unary_expression -> unary_expression GT term .)


state 103

    (70) unary_expression -> unary_expression EQ term .

    EQUALS          reduce using rule 70 (unary_expression -> unary_expression EQ term .)
    PP              reduce using rule 70 (unary_expression -> unary_expression EQ term .)
    MM              reduce using rule 70 (unary_expression -> unary_expression EQ term .)
    LT              reduce using rule 70 (unary_expression -> unary_expression EQ term .)
    LE              reduce using rule 70 (unary_expression -> unary_expression EQ term .)
    GE              reduce using rule 70 (unary_expression -> unary_expression EQ term .)
    GT              reduce using rule 70 (unary_expression -> unary_expression EQ term .)
    EQ              reduce using rule 70 (unary_expression -> unary_expression EQ term .)
    NE              reduce using rule 70 (unary_expression -> unary_expression EQ term .)
    AND             reduce using rule 70 (unary_expression -> unary_expression EQ term .)
    LAND            reduce using rule 70 (unary_expression -> unary_expression EQ term .)
    PLUS            reduce using rule 70 (unary_expression -> unary_expression EQ term .)
    TIMES           reduce using rule 70 (unary_expression -> unary_expression EQ term .)
    MOD             reduce using rule 70 (unary_expression -> unary_expression EQ term .)
    MINUS           reduce using rule 70 (unary_expression -> unary_expression EQ term .)
    SEMI            reduce using rule 70 (unary_expression -> unary_expression EQ term .)
    RPAREN          reduce using rule 70 (unary_expression -> unary_expression EQ term .)
    COMMA           reduce using rule 70 (unary_expression -> unary_expression EQ term .)
    LOR             reduce using rule 70 (unary_expression -> unary_expression EQ term .)


state 104

    (71) unary_expression -> unary_expression NE term .

    EQUALS          reduce using rule 71 (unary_expression -> unary_expression NE term .)
    PP              reduce using rule 71 (unary_expression -> unary_expression NE term .)
    MM              reduce using rule 71 (unary_expression -> unary_expression NE term .)
    LT              reduce using rule 71 (unary_expression -> unary_expression NE term .)
    LE              reduce using rule 71 (unary_expression -> unary_expression NE term .)
    GE              reduce using rule 71 (unary_expression -> unary_expression NE term .)
    GT              reduce using rule 71 (unary_expression -> unary_expression NE term .)
    EQ              reduce using rule 71 (unary_expression -> unary_expression NE term .)
    NE              reduce using rule 71 (unary_expression -> unary_expression NE term .)
    AND             reduce using rule 71 (unary_expression -> unary_expression NE term .)
    LAND            reduce using rule 71 (unary_expression -> unary_expression NE term .)
    PLUS            reduce using rule 71 (unary_expression -> unary_expression NE term .)
    TIMES           reduce using rule 71 (unary_expression -> unary_expression NE term .)
    MOD             reduce using rule 71 (unary_expression -> unary_expression NE term .)
    MINUS           reduce using rule 71 (unary_expression -> unary_expression NE term .)
    SEMI            reduce using rule 71 (unary_expression -> unary_expression NE term .)
    RPAREN          reduce using rule 71 (unary_expression -> unary_expression NE term .)
    COMMA           reduce using rule 71 (unary_expression -> unary_expression NE term .)
    LOR             reduce using rule 71 (unary_expression -> unary_expression NE term .)


state 105

    (72) unary_expression -> unary_expression AND term .

    EQUALS          reduce using rule 72 (unary_expression -> unary_expression AND term .)
    PP              reduce using rule 72 (unary_expression -> unary_expression AND term .)
    MM              reduce using rule 72 (unary_expression -> unary_expression AND term .)
    LT              reduce using rule 72 (unary_expression -> unary_expression AND term .)
    LE              reduce using rule 72 (unary_expression -> unary_expression AND term .)
    GE              reduce using rule 72 (unary_expression -> unary_expression AND term .)
    GT              reduce using rule 72 (unary_expression -> unary_expression AND term .)
    EQ              reduce using rule 72 (unary_expression -> unary_expression AND term .)
    NE              reduce using rule 72 (unary_expression -> unary_expression AND term .)
    AND             reduce using rule 72 (unary_expression -> unary_expression AND term .)
    LAND            reduce using rule 72 (unary_expression -> unary_expression AND term .)
    PLUS            reduce using rule 72 (unary_expression -> unary_expression AND term .)
    TIMES           reduce using rule 72 (unary_expression -> unary_expression AND term .)
    MOD             reduce using rule 72 (unary_expression -> unary_expression AND term .)
    MINUS           reduce using rule 72 (unary_expression -> unary_expression AND term .)
    SEMI            reduce using rule 72 (unary_expression -> unary_expression AND term .)
    RPAREN          reduce using rule 72 (unary_expression -> unary_expression AND term .)
    COMMA           reduce using rule 72 (unary_expression -> unary_expression AND term .)
    LOR             reduce using rule 72 (unary_expression -> unary_expression AND term .)


state 106

    (73) unary_expression -> unary_expression LAND unary_expression .
    (66) unary_expression -> unary_expression . LT term
    (67) unary_expression -> unary_expression . LE term
    (68) unary_expression -> unary_expression . GE term
    (69) unary_expression -> unary_expression . GT term
    (70) unary_expression -> unary_expression . EQ term
    (71) unary_expression -> unary_expression . NE term
    (72) unary_expression -> unary_expression . AND term
    (73) unary_expression -> unary_expression . LAND unary_expression
    (74) unary_expression -> unary_expression . PLUS term
    (75) unary_expression -> unary_expression . TIMES term
    (76) unary_expression -> unary_expression . MOD term
    (77) unary_expression -> unary_expression . MINUS term

    EQUALS          reduce using rule 73 (unary_expression -> unary_expression LAND unary_expression .)
    PP              reduce using rule 73 (unary_expression -> unary_expression LAND unary_expression .)
    MM              reduce using rule 73 (unary_expression -> unary_expression LAND unary_expression .)
    LAND            reduce using rule 73 (unary_expression -> unary_expression LAND unary_expression .)
    SEMI            reduce using rule 73 (unary_expression -> unary_expression LAND unary_expression .)
    RPAREN          reduce using rule 73 (unary_expression -> unary_expression LAND unary_expression .)
    COMMA           reduce using rule 73 (unary_expression -> unary_expression LAND unary_expression .)
    LOR             reduce using rule 73 (unary_expression -> unary_expression LAND unary_expression .)
    LT              shift and go to state 64
    LE              shift and go to state 65
    GE              shift and go to state 66
    GT              shift and go to state 67
    EQ              shift and go to state 68
    NE              shift and go to state 69
    AND             shift and go to state 70
    PLUS            shift and go to state 72
    TIMES           shift and go to state 73
    MOD             shift and go to state 74
    MINUS           shift and go to state 75

  ! LT              [ reduce using rule 73 (unary_expression -> unary_expression LAND unary_expression .) ]
  ! LE              [ reduce using rule 73 (unary_expression -> unary_expression LAND unary_expression .) ]
  ! GE              [ reduce using rule 73 (unary_expression -> unary_expression LAND unary_expression .) ]
  ! GT              [ reduce using rule 73 (unary_expression -> unary_expression LAND unary_expression .) ]
  ! EQ              [ reduce using rule 73 (unary_expression -> unary_expression LAND unary_expression .) ]
  ! NE              [ reduce using rule 73 (unary_expression -> unary_expression LAND unary_expression .) ]
  ! AND             [ reduce using rule 73 (unary_expression -> unary_expression LAND unary_expression .) ]
  ! PLUS            [ reduce using rule 73 (unary_expression -> unary_expression LAND unary_expression .) ]
  ! TIMES           [ reduce using rule 73 (unary_expression -> unary_expression LAND unary_expression .) ]
  ! MOD             [ reduce using rule 73 (unary_expression -> unary_expression LAND unary_expression .) ]
  ! MINUS           [ reduce using rule 73 (unary_expression -> unary_expression LAND unary_expression .) ]
  ! LAND            [ shift and go to state 71 ]


state 107

    (74) unary_expression -> unary_expression PLUS term .

    EQUALS          reduce using rule 74 (unary_expression -> unary_expression PLUS term .)
    PP              reduce using rule 74 (unary_expression -> unary_expression PLUS term .)
    MM              reduce using rule 74 (unary_expression -> unary_expression PLUS term .)
    LT              reduce using rule 74 (unary_expression -> unary_expression PLUS term .)
    LE              reduce using rule 74 (unary_expression -> unary_expression PLUS term .)
    GE              reduce using rule 74 (unary_expression -> unary_expression PLUS term .)
    GT              reduce using rule 74 (unary_expression -> unary_expression PLUS term .)
    EQ              reduce using rule 74 (unary_expression -> unary_expression PLUS term .)
    NE              reduce using rule 74 (unary_expression -> unary_expression PLUS term .)
    AND             reduce using rule 74 (unary_expression -> unary_expression PLUS term .)
    LAND            reduce using rule 74 (unary_expression -> unary_expression PLUS term .)
    PLUS            reduce using rule 74 (unary_expression -> unary_expression PLUS term .)
    TIMES           reduce using rule 74 (unary_expression -> unary_expression PLUS term .)
    MOD             reduce using rule 74 (unary_expression -> unary_expression PLUS term .)
    MINUS           reduce using rule 74 (unary_expression -> unary_expression PLUS term .)
    SEMI            reduce using rule 74 (unary_expression -> unary_expression PLUS term .)
    RPAREN          reduce using rule 74 (unary_expression -> unary_expression PLUS term .)
    COMMA           reduce using rule 74 (unary_expression -> unary_expression PLUS term .)
    LOR             reduce using rule 74 (unary_expression -> unary_expression PLUS term .)


state 108

    (75) unary_expression -> unary_expression TIMES term .

    EQUALS          reduce using rule 75 (unary_expression -> unary_expression TIMES term .)
    PP              reduce using rule 75 (unary_expression -> unary_expression TIMES term .)
    MM              reduce using rule 75 (unary_expression -> unary_expression TIMES term .)
    LT              reduce using rule 75 (unary_expression -> unary_expression TIMES term .)
    LE              reduce using rule 75 (unary_expression -> unary_expression TIMES term .)
    GE              reduce using rule 75 (unary_expression -> unary_expression TIMES term .)
    GT              reduce using rule 75 (unary_expression -> unary_expression TIMES term .)
    EQ              reduce using rule 75 (unary_expression -> unary_expression TIMES term .)
    NE              reduce using rule 75 (unary_expression -> unary_expression TIMES term .)
    AND             reduce using rule 75 (unary_expression -> unary_expression TIMES term .)
    LAND            reduce using rule 75 (unary_expression -> unary_expression TIMES term .)
    PLUS            reduce using rule 75 (unary_expression -> unary_expression TIMES term .)
    TIMES           reduce using rule 75 (unary_expression -> unary_expression TIMES term .)
    MOD             reduce using rule 75 (unary_expression -> unary_expression TIMES term .)
    MINUS           reduce using rule 75 (unary_expression -> unary_expression TIMES term .)
    SEMI            reduce using rule 75 (unary_expression -> unary_expression TIMES term .)
    RPAREN          reduce using rule 75 (unary_expression -> unary_expression TIMES term .)
    COMMA           reduce using rule 75 (unary_expression -> unary_expression TIMES term .)
    LOR             reduce using rule 75 (unary_expression -> unary_expression TIMES term .)


state 109

    (76) unary_expression -> unary_expression MOD term .

    EQUALS          reduce using rule 76 (unary_expression -> unary_expression MOD term .)
    PP              reduce using rule 76 (unary_expression -> unary_expression MOD term .)
    MM              reduce using rule 76 (unary_expression -> unary_expression MOD term .)
    LT              reduce using rule 76 (unary_expression -> unary_expression MOD term .)
    LE              reduce using rule 76 (unary_expression -> unary_expression MOD term .)
    GE              reduce using rule 76 (unary_expression -> unary_expression MOD term .)
    GT              reduce using rule 76 (unary_expression -> unary_expression MOD term .)
    EQ              reduce using rule 76 (unary_expression -> unary_expression MOD term .)
    NE              reduce using rule 76 (unary_expression -> unary_expression MOD term .)
    AND             reduce using rule 76 (unary_expression -> unary_expression MOD term .)
    LAND            reduce using rule 76 (unary_expression -> unary_expression MOD term .)
    PLUS            reduce using rule 76 (unary_expression -> unary_expression MOD term .)
    TIMES           reduce using rule 76 (unary_expression -> unary_expression MOD term .)
    MOD             reduce using rule 76 (unary_expression -> unary_expression MOD term .)
    MINUS           reduce using rule 76 (unary_expression -> unary_expression MOD term .)
    SEMI            reduce using rule 76 (unary_expression -> unary_expression MOD term .)
    RPAREN          reduce using rule 76 (unary_expression -> unary_expression MOD term .)
    COMMA           reduce using rule 76 (unary_expression -> unary_expression MOD term .)
    LOR             reduce using rule 76 (unary_expression -> unary_expression MOD term .)


state 110

    (77) unary_expression -> unary_expression MINUS term .

    EQUALS          reduce using rule 77 (unary_expression -> unary_expression MINUS term .)
    PP              reduce using rule 77 (unary_expression -> unary_expression MINUS term .)
    MM              reduce using rule 77 (unary_expression -> unary_expression MINUS term .)
    LT              reduce using rule 77 (unary_expression -> unary_expression MINUS term .)
    LE              reduce using rule 77 (unary_expression -> unary_expression MINUS term .)
    GE              reduce using rule 77 (unary_expression -> unary_expression MINUS term .)
    GT              reduce using rule 77 (unary_expression -> unary_expression MINUS term .)
    EQ              reduce using rule 77 (unary_expression -> unary_expression MINUS term .)
    NE              reduce using rule 77 (unary_expression -> unary_expression MINUS term .)
    AND             reduce using rule 77 (unary_expression -> unary_expression MINUS term .)
    LAND            reduce using rule 77 (unary_expression -> unary_expression MINUS term .)
    PLUS            reduce using rule 77 (unary_expression -> unary_expression MINUS term .)
    TIMES           reduce using rule 77 (unary_expression -> unary_expression MINUS term .)
    MOD             reduce using rule 77 (unary_expression -> unary_expression MINUS term .)
    MINUS           reduce using rule 77 (unary_expression -> unary_expression MINUS term .)
    SEMI            reduce using rule 77 (unary_expression -> unary_expression MINUS term .)
    RPAREN          reduce using rule 77 (unary_expression -> unary_expression MINUS term .)
    COMMA           reduce using rule 77 (unary_expression -> unary_expression MINUS term .)
    LOR             reduce using rule 77 (unary_expression -> unary_expression MINUS term .)


state 111

    (49) function_call -> ID LPAREN expression_list . RPAREN
    (52) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 123
    COMMA           shift and go to state 124


state 112

    (50) function_call -> ID LPAREN RPAREN .

    EQUALS          reduce using rule 50 (function_call -> ID LPAREN RPAREN .)
    PP              reduce using rule 50 (function_call -> ID LPAREN RPAREN .)
    MM              reduce using rule 50 (function_call -> ID LPAREN RPAREN .)
    LT              reduce using rule 50 (function_call -> ID LPAREN RPAREN .)
    LE              reduce using rule 50 (function_call -> ID LPAREN RPAREN .)
    GE              reduce using rule 50 (function_call -> ID LPAREN RPAREN .)
    GT              reduce using rule 50 (function_call -> ID LPAREN RPAREN .)
    EQ              reduce using rule 50 (function_call -> ID LPAREN RPAREN .)
    NE              reduce using rule 50 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 50 (function_call -> ID LPAREN RPAREN .)
    LAND            reduce using rule 50 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 50 (function_call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 50 (function_call -> ID LPAREN RPAREN .)
    MOD             reduce using rule 50 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 50 (function_call -> ID LPAREN RPAREN .)
    SEMI            reduce using rule 50 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 50 (function_call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 50 (function_call -> ID LPAREN RPAREN .)
    LOR             reduce using rule 50 (function_call -> ID LPAREN RPAREN .)


state 113

    (51) expression_list -> expression .

    RPAREN          reduce using rule 51 (expression_list -> expression .)
    COMMA           reduce using rule 51 (expression_list -> expression .)


state 114

    (61) term -> ID LBRACKET ID . RBRACKET

    RBRACKET        shift and go to state 125


state 115

    (60) term -> ID LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 126


state 116

    (64) factor -> LPAREN expression RPAREN .

    EQUALS          reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    PP              reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    MM              reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    EQ              reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    LAND            reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    LOR             reduce using rule 64 (factor -> LPAREN expression RPAREN .)


state 117

    (12) args -> INT ID COMMA . INT ID

    INT             shift and go to state 127


state 118

    (36) compound_statement -> LBRACE declaration_list statement_list RBRACE .

    SEMI            reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INCLUDE         reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    VOID            reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INT             reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    $end            reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RBRACE          reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LBRACE          reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BREAK           reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RETURN          reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FOR             reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    WHILE           reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    IF              reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    STRING          reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PP              reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    MM              reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LNOT            reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    AND             reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ID              reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    NUMBER          reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LPAREN          reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ELSE            reduce using rule 36 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)


state 119

    (28) jump_statement -> RETURN expression SEMI .

    RBRACE          reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    STRING          reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    PP              reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    MM              reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    LNOT            reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    AND             reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    ID              reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    NUMBER          reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 28 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 28 (jump_statement -> RETURN expression SEMI .)


state 120

    (29) loop_statement -> FOR LPAREN expression_statement . expression_statement expression_statement RPAREN statement
    (30) loop_statement -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    SEMI            shift and go to state 47
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    expression_statement           shift and go to state 128
    expression                     shift and go to state 54
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 121

    (31) loop_statement -> WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 129


state 122

    (32) condition_statement -> IF LPAREN expression . RPAREN statement ELSE statement empty
    (33) condition_statement -> IF LPAREN expression . RPAREN statement
    (34) condition_statement -> IF LPAREN expression . LOR expression RPAREN statement ELSE statement

    RPAREN          shift and go to state 130
    LOR             shift and go to state 131


state 123

    (49) function_call -> ID LPAREN expression_list RPAREN .

    EQUALS          reduce using rule 49 (function_call -> ID LPAREN expression_list RPAREN .)
    PP              reduce using rule 49 (function_call -> ID LPAREN expression_list RPAREN .)
    MM              reduce using rule 49 (function_call -> ID LPAREN expression_list RPAREN .)
    LT              reduce using rule 49 (function_call -> ID LPAREN expression_list RPAREN .)
    LE              reduce using rule 49 (function_call -> ID LPAREN expression_list RPAREN .)
    GE              reduce using rule 49 (function_call -> ID LPAREN expression_list RPAREN .)
    GT              reduce using rule 49 (function_call -> ID LPAREN expression_list RPAREN .)
    EQ              reduce using rule 49 (function_call -> ID LPAREN expression_list RPAREN .)
    NE              reduce using rule 49 (function_call -> ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 49 (function_call -> ID LPAREN expression_list RPAREN .)
    LAND            reduce using rule 49 (function_call -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 49 (function_call -> ID LPAREN expression_list RPAREN .)
    TIMES           reduce using rule 49 (function_call -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 49 (function_call -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 49 (function_call -> ID LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 49 (function_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 49 (function_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 49 (function_call -> ID LPAREN expression_list RPAREN .)
    LOR             reduce using rule 49 (function_call -> ID LPAREN expression_list RPAREN .)


state 124

    (52) expression_list -> expression_list COMMA . expression
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    expression                     shift and go to state 132
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 125

    (61) term -> ID LBRACKET ID RBRACKET .

    EQUALS          reduce using rule 61 (term -> ID LBRACKET ID RBRACKET .)
    PP              reduce using rule 61 (term -> ID LBRACKET ID RBRACKET .)
    MM              reduce using rule 61 (term -> ID LBRACKET ID RBRACKET .)
    LT              reduce using rule 61 (term -> ID LBRACKET ID RBRACKET .)
    LE              reduce using rule 61 (term -> ID LBRACKET ID RBRACKET .)
    GE              reduce using rule 61 (term -> ID LBRACKET ID RBRACKET .)
    GT              reduce using rule 61 (term -> ID LBRACKET ID RBRACKET .)
    EQ              reduce using rule 61 (term -> ID LBRACKET ID RBRACKET .)
    NE              reduce using rule 61 (term -> ID LBRACKET ID RBRACKET .)
    AND             reduce using rule 61 (term -> ID LBRACKET ID RBRACKET .)
    LAND            reduce using rule 61 (term -> ID LBRACKET ID RBRACKET .)
    PLUS            reduce using rule 61 (term -> ID LBRACKET ID RBRACKET .)
    TIMES           reduce using rule 61 (term -> ID LBRACKET ID RBRACKET .)
    MOD             reduce using rule 61 (term -> ID LBRACKET ID RBRACKET .)
    MINUS           reduce using rule 61 (term -> ID LBRACKET ID RBRACKET .)
    SEMI            reduce using rule 61 (term -> ID LBRACKET ID RBRACKET .)
    RPAREN          reduce using rule 61 (term -> ID LBRACKET ID RBRACKET .)
    COMMA           reduce using rule 61 (term -> ID LBRACKET ID RBRACKET .)
    LOR             reduce using rule 61 (term -> ID LBRACKET ID RBRACKET .)


state 126

    (60) term -> ID LBRACKET NUMBER RBRACKET .

    EQUALS          reduce using rule 60 (term -> ID LBRACKET NUMBER RBRACKET .)
    PP              reduce using rule 60 (term -> ID LBRACKET NUMBER RBRACKET .)
    MM              reduce using rule 60 (term -> ID LBRACKET NUMBER RBRACKET .)
    LT              reduce using rule 60 (term -> ID LBRACKET NUMBER RBRACKET .)
    LE              reduce using rule 60 (term -> ID LBRACKET NUMBER RBRACKET .)
    GE              reduce using rule 60 (term -> ID LBRACKET NUMBER RBRACKET .)
    GT              reduce using rule 60 (term -> ID LBRACKET NUMBER RBRACKET .)
    EQ              reduce using rule 60 (term -> ID LBRACKET NUMBER RBRACKET .)
    NE              reduce using rule 60 (term -> ID LBRACKET NUMBER RBRACKET .)
    AND             reduce using rule 60 (term -> ID LBRACKET NUMBER RBRACKET .)
    LAND            reduce using rule 60 (term -> ID LBRACKET NUMBER RBRACKET .)
    PLUS            reduce using rule 60 (term -> ID LBRACKET NUMBER RBRACKET .)
    TIMES           reduce using rule 60 (term -> ID LBRACKET NUMBER RBRACKET .)
    MOD             reduce using rule 60 (term -> ID LBRACKET NUMBER RBRACKET .)
    MINUS           reduce using rule 60 (term -> ID LBRACKET NUMBER RBRACKET .)
    SEMI            reduce using rule 60 (term -> ID LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 60 (term -> ID LBRACKET NUMBER RBRACKET .)
    COMMA           reduce using rule 60 (term -> ID LBRACKET NUMBER RBRACKET .)
    LOR             reduce using rule 60 (term -> ID LBRACKET NUMBER RBRACKET .)


state 127

    (12) args -> INT ID COMMA INT . ID

    ID              shift and go to state 133


state 128

    (29) loop_statement -> FOR LPAREN expression_statement expression_statement . expression_statement RPAREN statement
    (30) loop_statement -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    SEMI            shift and go to state 47
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    expression_statement           shift and go to state 134
    expression                     shift and go to state 135
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 129

    (31) loop_statement -> WHILE LPAREN expression RPAREN . statement
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement empty
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 22
    SEMI            shift and go to state 47
    BREAK           shift and go to state 55
    RETURN          shift and go to state 56
    FOR             shift and go to state 57
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    expression                     shift and go to state 54
    statement                      shift and go to state 136
    compound_statement             shift and go to state 48
    expression_statement           shift and go to state 49
    jump_statement                 shift and go to state 50
    loop_statement                 shift and go to state 51
    condition_statement            shift and go to state 52
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 130

    (32) condition_statement -> IF LPAREN expression RPAREN . statement ELSE statement empty
    (33) condition_statement -> IF LPAREN expression RPAREN . statement
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement empty
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 22
    SEMI            shift and go to state 47
    BREAK           shift and go to state 55
    RETURN          shift and go to state 56
    FOR             shift and go to state 57
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    expression                     shift and go to state 54
    statement                      shift and go to state 137
    compound_statement             shift and go to state 48
    expression_statement           shift and go to state 49
    jump_statement                 shift and go to state 50
    loop_statement                 shift and go to state 51
    condition_statement            shift and go to state 52
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 131

    (34) condition_statement -> IF LPAREN expression LOR . expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    expression                     shift and go to state 138
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 132

    (52) expression_list -> expression_list COMMA expression .

    RPAREN          reduce using rule 52 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 52 (expression_list -> expression_list COMMA expression .)


state 133

    (12) args -> INT ID COMMA INT ID .

    RPAREN          reduce using rule 12 (args -> INT ID COMMA INT ID .)


state 134

    (29) loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement . RPAREN statement

    RPAREN          shift and go to state 139


state 135

    (30) loop_statement -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement
    (42) expression_statement -> expression . SEMI

    RPAREN          shift and go to state 140
    SEMI            shift and go to state 91


state 136

    (31) loop_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    PP              reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    MM              reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    AND             reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 31 (loop_statement -> WHILE LPAREN expression RPAREN statement .)


state 137

    (32) condition_statement -> IF LPAREN expression RPAREN statement . ELSE statement empty
    (33) condition_statement -> IF LPAREN expression RPAREN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 141
    RBRACE          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    PP              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    MM              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    AND             reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .)

  ! ELSE            [ reduce using rule 33 (condition_statement -> IF LPAREN expression RPAREN statement .) ]


state 138

    (34) condition_statement -> IF LPAREN expression LOR expression . RPAREN statement ELSE statement

    RPAREN          shift and go to state 142


state 139

    (29) loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN . statement
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement empty
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 22
    SEMI            shift and go to state 47
    BREAK           shift and go to state 55
    RETURN          shift and go to state 56
    FOR             shift and go to state 57
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    expression_statement           shift and go to state 49
    statement                      shift and go to state 143
    compound_statement             shift and go to state 48
    jump_statement                 shift and go to state 50
    loop_statement                 shift and go to state 51
    condition_statement            shift and go to state 52
    expression                     shift and go to state 54
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 140

    (30) loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement empty
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 22
    SEMI            shift and go to state 47
    BREAK           shift and go to state 55
    RETURN          shift and go to state 56
    FOR             shift and go to state 57
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    expression_statement           shift and go to state 49
    expression                     shift and go to state 54
    statement                      shift and go to state 144
    compound_statement             shift and go to state 48
    jump_statement                 shift and go to state 50
    loop_statement                 shift and go to state 51
    condition_statement            shift and go to state 52
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 141

    (32) condition_statement -> IF LPAREN expression RPAREN statement ELSE . statement empty
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement empty
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 22
    SEMI            shift and go to state 47
    BREAK           shift and go to state 55
    RETURN          shift and go to state 56
    FOR             shift and go to state 57
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    expression                     shift and go to state 54
    statement                      shift and go to state 145
    compound_statement             shift and go to state 48
    expression_statement           shift and go to state 49
    jump_statement                 shift and go to state 50
    loop_statement                 shift and go to state 51
    condition_statement            shift and go to state 52
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 142

    (34) condition_statement -> IF LPAREN expression LOR expression RPAREN . statement ELSE statement
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement empty
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 22
    SEMI            shift and go to state 47
    BREAK           shift and go to state 55
    RETURN          shift and go to state 56
    FOR             shift and go to state 57
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    expression                     shift and go to state 54
    statement                      shift and go to state 146
    compound_statement             shift and go to state 48
    expression_statement           shift and go to state 49
    jump_statement                 shift and go to state 50
    loop_statement                 shift and go to state 51
    condition_statement            shift and go to state 52
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 143

    (29) loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .

    RBRACE          reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    LBRACE          reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    SEMI            reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    BREAK           reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    RETURN          reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    FOR             reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    WHILE           reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    IF              reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    STRING          reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    PP              reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    MM              reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    LNOT            reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    AND             reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    ID              reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    NUMBER          reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    LPAREN          reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)
    ELSE            reduce using rule 29 (loop_statement -> FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement .)


state 144

    (30) loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .

    RBRACE          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LBRACE          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SEMI            reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FOR             reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IF              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STRING          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    PP              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MM              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LNOT            reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    AND             reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ID              reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    NUMBER          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 30 (loop_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)


state 145

    (32) condition_statement -> IF LPAREN expression RPAREN statement ELSE statement . empty
    (4) empty -> .

    RBRACE          reduce using rule 4 (empty -> .)
    LBRACE          reduce using rule 4 (empty -> .)
    SEMI            reduce using rule 4 (empty -> .)
    BREAK           reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    WHILE           reduce using rule 4 (empty -> .)
    IF              reduce using rule 4 (empty -> .)
    STRING          reduce using rule 4 (empty -> .)
    PP              reduce using rule 4 (empty -> .)
    MM              reduce using rule 4 (empty -> .)
    LNOT            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    NUMBER          reduce using rule 4 (empty -> .)
    LPAREN          reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

    empty                          shift and go to state 147

state 146

    (34) condition_statement -> IF LPAREN expression LOR expression RPAREN statement . ELSE statement

    ELSE            shift and go to state 148


state 147

    (32) condition_statement -> IF LPAREN expression RPAREN statement ELSE statement empty .

    RBRACE          reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement empty .)
    LBRACE          reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement empty .)
    SEMI            reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement empty .)
    BREAK           reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement empty .)
    RETURN          reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement empty .)
    FOR             reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement empty .)
    WHILE           reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement empty .)
    IF              reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement empty .)
    STRING          reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement empty .)
    PP              reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement empty .)
    MM              reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement empty .)
    LNOT            reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement empty .)
    AND             reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement empty .)
    ID              reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement empty .)
    NUMBER          reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement empty .)
    LPAREN          reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement empty .)
    ELSE            reduce using rule 32 (condition_statement -> IF LPAREN expression RPAREN statement ELSE statement empty .)


state 148

    (34) condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE . statement
    (21) statement -> . compound_statement
    (22) statement -> . expression_statement
    (23) statement -> . jump_statement
    (24) statement -> . loop_statement
    (25) statement -> . condition_statement
    (35) compound_statement -> . LBRACE declaration_list RBRACE
    (36) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (38) compound_statement -> . LBRACE RBRACE
    (41) expression_statement -> . SEMI
    (42) expression_statement -> . expression SEMI
    (26) jump_statement -> . BREAK SEMI
    (27) jump_statement -> . RETURN SEMI
    (28) jump_statement -> . RETURN expression SEMI
    (29) loop_statement -> . FOR LPAREN expression_statement expression_statement expression_statement RPAREN statement
    (30) loop_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (31) loop_statement -> . WHILE LPAREN expression RPAREN statement
    (32) condition_statement -> . IF LPAREN expression RPAREN statement ELSE statement empty
    (33) condition_statement -> . IF LPAREN expression RPAREN statement
    (34) condition_statement -> . IF LPAREN expression LOR expression RPAREN statement ELSE statement
    (45) expression -> . conditional_expression
    (46) expression -> . unary_expression EQUALS expression
    (47) expression -> . STRING
    (54) expression -> . PP unary_expression
    (55) expression -> . MM unary_expression
    (56) expression -> . unary_expression PP
    (57) expression -> . unary_expression MM
    (78) conditional_expression -> . unary_expression
    (48) unary_expression -> . LNOT term
    (53) unary_expression -> . function_call
    (58) unary_expression -> . AND term
    (65) unary_expression -> . term
    (66) unary_expression -> . unary_expression LT term
    (67) unary_expression -> . unary_expression LE term
    (68) unary_expression -> . unary_expression GE term
    (69) unary_expression -> . unary_expression GT term
    (70) unary_expression -> . unary_expression EQ term
    (71) unary_expression -> . unary_expression NE term
    (72) unary_expression -> . unary_expression AND term
    (73) unary_expression -> . unary_expression LAND unary_expression
    (74) unary_expression -> . unary_expression PLUS term
    (75) unary_expression -> . unary_expression TIMES term
    (76) unary_expression -> . unary_expression MOD term
    (77) unary_expression -> . unary_expression MINUS term
    (49) function_call -> . ID LPAREN expression_list RPAREN
    (50) function_call -> . ID LPAREN RPAREN
    (59) term -> . ID
    (60) term -> . ID LBRACKET NUMBER RBRACKET
    (61) term -> . ID LBRACKET ID RBRACKET
    (62) term -> . factor
    (63) factor -> . NUMBER
    (64) factor -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 22
    SEMI            shift and go to state 47
    BREAK           shift and go to state 55
    RETURN          shift and go to state 56
    FOR             shift and go to state 57
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    STRING          shift and go to state 27
    PP              shift and go to state 28
    MM              shift and go to state 29
    LNOT            shift and go to state 30
    AND             shift and go to state 33
    ID              shift and go to state 34
    NUMBER          shift and go to state 36
    LPAREN          shift and go to state 35

    expression                     shift and go to state 54
    statement                      shift and go to state 149
    compound_statement             shift and go to state 48
    expression_statement           shift and go to state 49
    jump_statement                 shift and go to state 50
    loop_statement                 shift and go to state 51
    condition_statement            shift and go to state 52
    conditional_expression         shift and go to state 25
    unary_expression               shift and go to state 26
    term                           shift and go to state 31
    function_call                  shift and go to state 32
    factor                         shift and go to state 37

state 149

    (34) condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 34 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 34 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 34 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 34 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 34 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 34 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 34 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    IF              reduce using rule 34 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 34 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    PP              reduce using rule 34 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    MM              reduce using rule 34 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    LNOT            reduce using rule 34 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    AND             reduce using rule 34 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    ID              reduce using rule 34 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 34 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 34 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 34 (condition_statement -> IF LPAREN expression LOR expression RPAREN statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 137 resolved as shift
